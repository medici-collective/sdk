"use strict";(self.webpackChunkaleo_website=self.webpackChunkaleo_website||[]).push([[6,345,157],{4693:(e,r,t)=>{t.d(r,{Z:()=>c,p:()=>s});var i=t(7582),o=t(9723),n=t(7231);class s{constructor(e){this.proverUri=e.proverUri,this.verifierUri=e.verifierUri,this.cacheKey=e.cacheKey}}class c{fetchBytes(e="/"){return(0,i.mG)(this,void 0,void 0,(function*(){try{const r=yield n.Z.get(e,{responseType:"arraybuffer"});return new Uint8Array(r.data)}catch(e){throw new Error("Error fetching data."+e)}}))}constructor(){this.keyUris=o.KEY_STORE,this.cache=new Map,this.cacheOption=!1}useCache(e){this.cacheOption=e}clearCache(){this.cache.clear()}cacheKeys(e,r){const[t,i]=r;this.cache.set(e,[t.toBytes(),i.toBytes()])}containsKeys(e){return this.cache.has(e)}deleteKeys(e){return this.cache.delete(e)}getKeys(e){if(console.debug(`Checking if key exists in cache. KeyId: ${e}`),this.cache.has(e)){const[r,t]=this.cache.get(e);return[o.ProvingKey.fromBytes(r),o.VerifyingKey.fromBytes(t)]}return new Error("Key not found in cache.")}functionKeys(e){return(0,i.mG)(this,void 0,void 0,(function*(){if(e){let r,t,i;if("proverUrl"in e&&"string"==typeof e.proverUrl&&(r=e.proverUrl),"verifierUrl"in e&&"string"==typeof e.verifierUrl&&(t=e.verifierUrl),"cacheKey"in e&&"string"==typeof e.cacheKey&&(i=e.cacheKey),r&&t)return yield this.fetchKeys(r,t,i);if(i)return this.getKeys(i)}throw Error("Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl")}))}fetchKeys(e,r,t){return(0,i.mG)(this,void 0,void 0,(function*(){try{if(this.cacheOption){t||(t=e+r);const i=this.cache.get(t);if(void 0!==i)return[o.ProvingKey.fromBytes(i[0]),o.VerifyingKey.fromBytes(i[1])];{console.debug("Fetching proving keys from url "+e);const i=o.ProvingKey.fromBytes(yield this.fetchBytes(e));console.debug("Fetching verifying keys from url "+r);const n=o.VerifyingKey.fromBytes(yield this.fetchBytes(r));return this.cache.set(t,[i.toBytes(),n.toBytes()]),[i,n]}}return[o.ProvingKey.fromBytes(yield this.fetchBytes(e)),o.VerifyingKey.fromBytes(yield this.fetchBytes(r))]}catch(t){throw new Error(`Error: ${t} fetching fee proving and verifying keys from ${e} and ${r}.`)}}))}transferKeys(e){return(0,i.mG)(this,void 0,void 0,(function*(){if(o.PRIVATE_TRANSFER.has(e))return yield this.fetchKeys(o.CREDITS_PROGRAM_KEYS.transfer_private.prover,o.CREDITS_PROGRAM_KEYS.transfer_private.verifier);if(o.PRIVATE_TO_PUBLIC_TRANSFER.has(e))return yield this.fetchKeys(o.CREDITS_PROGRAM_KEYS.transfer_private_to_public.prover,o.CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier);if(o.PUBLIC_TRANSFER.has(e))return yield this.fetchKeys(o.CREDITS_PROGRAM_KEYS.transfer_public.prover,o.CREDITS_PROGRAM_KEYS.transfer_public.verifier);if(o.PUBLIC_TO_PRIVATE_TRANSFER.has(e))return yield this.fetchKeys(o.CREDITS_PROGRAM_KEYS.transfer_public_to_private.prover,o.CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier);throw new Error("Invalid visibility type")}))}joinKeys(){return(0,i.mG)(this,void 0,void 0,(function*(){return yield this.fetchKeys(o.CREDITS_PROGRAM_KEYS.join.prover,o.CREDITS_PROGRAM_KEYS.join.verifier)}))}splitKeys(){return(0,i.mG)(this,void 0,void 0,(function*(){return yield this.fetchKeys(o.CREDITS_PROGRAM_KEYS.split.prover,o.CREDITS_PROGRAM_KEYS.split.verifier)}))}feeKeys(){return(0,i.mG)(this,void 0,void 0,(function*(){return yield this.fetchKeys(o.CREDITS_PROGRAM_KEYS.fee.prover,o.CREDITS_PROGRAM_KEYS.fee.verifier)}))}}},1037:(e,r,t)=>{t.d(r,{L:()=>s});var i=t(7582),o=t(1529),n=t(9723);class s{constructor(e,r,t){e?(this.host=e,this.networkClient=new n.AleoNetworkClient(e)):(this.host="https://vm.aleo.org/api",this.networkClient=new n.AleoNetworkClient(this.host)),this.keyProvider=r||new n.AleoKeyProvider,this.executionEngine=new o.ProgramManager,this.recordProvider=t}setAccount(e){this.account=e}setKeyProvider(e){this.keyProvider=e}setHost(e){this.host=e,this.networkClient.setHost(e)}setRecordProvider(e){this.recordProvider=e}deploy(e,r,t,o,s){return(0,i.mG)(this,void 0,void 0,(function*(){try{const r=n.Program.fromString(e);let t;try{t=this.networkClient.getProgram(r.id())}catch(e){console.log(`Program ${r.id()} does not exist on the network, deploying...`)}if("string"==typeof t)throw`Program ${r.id()} already exists on the network, please rename your program`}catch(e){throw(0,n.logAndThrow)(`Error validating program: ${e}`)}let i,c=s;if(void 0===s&&void 0!==this.account&&(c=this.account.privateKey()),void 0===c)throw"No private key provided and no private key set in the ProgramManager";try{o=yield this.getCreditsRecord(r,[],o,t)}catch(e){throw(0,n.logAndThrow)(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`)}try{i=yield this.keyProvider.feeKeys()}catch(e){throw(0,n.logAndThrow)(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`)}const[a,d]=i;let h;try{h=yield this.networkClient.getProgramImports(e)}catch(e){throw(0,n.logAndThrow)(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`)}const y=yield this.executionEngine.buildDeploymentTransaction(c,e,r,o,this.host,!1,h,a,d);return yield this.networkClient.submitTransaction(y)}))}execute(e,r,t,o,s,c,a,d,h,y){return(0,i.mG)(this,void 0,void 0,(function*(){let i;try{i=yield this.networkClient.getProgram(e)}catch(r){throw(0,n.logAndThrow)(`Error finding ${e}. Network response: '${r}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`)}let l,f=y;if(void 0===y&&void 0!==this.account&&(f=this.account.privateKey()),void 0===f)throw"No private key provided and no private key set in the ProgramManager";try{a=yield this.getCreditsRecord(t,[],a,s)}catch(e){throw(0,n.logAndThrow)(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`)}try{l=yield this.keyProvider.feeKeys()}catch(e){throw(0,n.logAndThrow)(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`)}const[u,v]=l;if(!d||!h)try{[d,h]=yield this.keyProvider.functionKeys(c)}catch(e){console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)}let g;try{g=yield this.networkClient.getProgramImports(e)}catch(e){throw(0,n.logAndThrow)(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`)}const p=yield this.executionEngine.buildExecutionTransaction(f,i,r,o,t,a,this.host,!1,g,d,h,u,v);return yield this.networkClient.submitTransaction(p)}))}executeOffline(e,r,t,o,n,s,c,a,d){return(0,i.mG)(this,void 0,void 0,(function*(){let i=d;if(void 0===d&&void 0!==this.account&&(i=this.account.privateKey()),void 0===i)throw"No private key provided and no private key set in the ProgramManager";if(!c||!a)try{[c,a]=yield this.keyProvider.functionKeys(s)}catch(e){console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)}return console.log("Running program offline"),console.log("Proving key: ",c),console.log("Verifying key: ",a),this.executionEngine.executeFunctionOffline(i,e,r,t,o,!1,n,c,a)}))}join(e,r,t,o,s,c){return(0,i.mG)(this,void 0,void 0,(function*(){let i,a,d=c;if(void 0===c&&void 0!==this.account&&(d=this.account.privateKey()),void 0===d)throw"No private key provided and no private key set in the ProgramManager";try{i=yield this.keyProvider.feeKeys(),a=yield this.keyProvider.joinKeys()}catch(e){throw(0,n.logAndThrow)(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`)}const[h,y]=i,[l,f]=a;try{s=yield this.getCreditsRecord(t,[],s,o)}catch(e){throw(0,n.logAndThrow)(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`)}try{e=e instanceof n.RecordPlaintext?e:n.RecordPlaintext.fromString(e),r=r instanceof n.RecordPlaintext?r:n.RecordPlaintext.fromString(r)}catch(e){throw(0,n.logAndThrow)("Records provided are not valid. Please ensure they are valid plaintext records.")}const u=yield this.executionEngine.buildJoinTransaction(d,e,r,t,s,this.host,!1,l,f,h,y);return yield this.networkClient.submitTransaction(u)}))}split(e,r,t){return(0,i.mG)(this,void 0,void 0,(function*(){let i,o=t;if(void 0===o&&void 0!==this.account&&(o=this.account.privateKey()),void 0===o)throw"No private key provided and no private key set in the ProgramManager";try{i=yield this.keyProvider.splitKeys()}catch(e){throw(0,n.logAndThrow)(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`)}const[s,c]=i;try{r=r instanceof n.RecordPlaintext?r:n.RecordPlaintext.fromString(r)}catch(e){throw(0,n.logAndThrow)("Record provided is not valid. Please ensure it is a valid plaintext record.")}const a=yield this.executionEngine.buildSplitTransaction(o,e,r,this.host,!1,s,c);return yield this.networkClient.submitTransaction(a)}))}transfer(e,r,t,o,s,c,a,d){return(0,i.mG)(this,void 0,void 0,(function*(){t=function(e){return n.VALID_TRANSFER_TYPES.has(e)?e:(0,n.logAndThrow)(`Invalid transfer type '${e}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`)}(t);let i,h,y=d;if(void 0===y&&void 0!==this.account&&(y=this.account.privateKey()),void 0===y)throw"No private key provided and no private key set in the ProgramManager";try{i=yield this.keyProvider.feeKeys(),h=yield this.keyProvider.transferKeys(t)}catch(e){throw(0,n.logAndThrow)(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`)}const[l,f]=i,[u,v]=h;try{const e=[];!function(e){return n.PRIVATE_TRANSFER_TYPES.has(e)}(t)?c=void 0:(c=yield this.getCreditsRecord(o,[],c,s),e.push(c.nonce())),a=yield this.getCreditsRecord(o,e,a,s)}catch(e){throw(0,n.logAndThrow)(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`)}const g=yield this.executionEngine.buildTransferTransaction(y,e,r,t,c,o,a,this.host,!1,u,v,l,f);return yield this.networkClient.submitTransaction(g)}))}createProgramFromSource(e){return n.Program.fromString(e)}creditsProgram(){return n.Program.getCreditsProgram()}verifyProgram(e){try{return n.Program.fromString(e),!0}catch(e){return!1}}getCreditsRecord(e,r,t,o){return(0,i.mG)(this,void 0,void 0,(function*(){try{return t instanceof n.RecordPlaintext?t:n.RecordPlaintext.fromString(t)}catch(t){try{const t=this.recordProvider;return yield t.findCreditsRecord(e,!0,r,o)}catch(e){throw(0,n.logAndThrow)(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`)}}}))}}},9157:(e,r,t)=>{function i(e,r){return new Promise((t=>{e.addEventListener("message",(function i({data:o}){null!=o&&o.type===r&&(e.removeEventListener("message",i),t(o))}))}))}let o;async function n(e,r,n){const s={type:"wasm_bindgen_worker_init",module:e,memory:r,receiver:n.receiver()};o=await Promise.all(Array.from({length:n.numThreads()},(async()=>{const e=new Worker(new URL(t.p+t.u(157),t.b),{type:void 0});return e.postMessage(s),await i(e,"wasm_bindgen_worker_ready"),e}))),n.build()}t.d(r,{Q:()=>n}),i(self,"wasm_bindgen_worker_init").then((async e=>{const r=await Promise.all([t.e(529),t.e(345)]).then(t.bind(t,1529));await r.default(e.module,e.memory),postMessage({type:"wasm_bindgen_worker_ready"}),r.wbg_rayon_start_worker(e.receiver)}))},3345:(e,r,t)=>{e.exports=t.p+"e10e3cf22c58a5802f81.wasm"},7582:(e,r,t)=>{function i(e,r,t,i){return new(t||(t=Promise))((function(o,n){function s(e){try{a(i.next(e))}catch(e){n(e)}}function c(e){try{a(i.throw(e))}catch(e){n(e)}}function a(e){var r;e.done?o(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(s,c)}a((i=i.apply(e,r||[])).next())}))}t.d(r,{mG:()=>i}),Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError}}]);
//# sourceMappingURL=6.bundle.js.map