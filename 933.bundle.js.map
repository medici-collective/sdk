{"version":3,"file":"933.bundle.js","mappings":"wOAAA,SAASA,EAAYC,EAAKC,EAAQC,EAAQC,GAClC,OAAO,IAAIC,SAASC,IAChB,MAAMC,EAAS,IAAIC,OAAOP,EAAK,CAC3BQ,KAAM,WAGVF,EAAOG,iBAAiB,WAAYC,IAGhCC,YAAW,KACPN,EAAQC,GAIJA,EAAOM,OACPN,EAAOM,OAC/B,GACmB,EAAE,GACN,CACCC,SAAS,EACTC,MAAM,IAGVR,EAAOS,YAAY,CACfd,SACAC,SACAC,WACF,GAEd,CAEA,IAAIa,E,2GAEJ,MAAMC,EAAO,IAAIC,MAAM,KAAKC,UAAKC,GAIjC,SAASC,EAAUC,GAAO,OAAOL,EAAKK,EAAK,CAF3CL,EAAKM,UAAKH,EAAW,MAAM,GAAM,GAIjC,IAAII,EAAYP,EAAKQ,OAErB,SAASC,EAAWJ,GACZA,EAAM,MACVL,EAAKK,GAAOE,EACZA,EAAYF,EAChB,CAEA,SAASK,EAAWL,GAChB,MAAMM,EAAMP,EAAUC,GAEtB,OADAI,EAAWJ,GACJM,CACX,CAEA,MAAMC,EAA4C,oBAAhBC,YAA8B,IAAIA,YAAY,QAAS,CAAEC,WAAW,EAAMC,OAAO,IAAU,CAAEC,OAAQA,KAAQ,MAAMC,MAAM,4BAA4B,GAE5J,oBAAhBJ,aAA+BD,EAAkBI,SAC5D,IAAIE,EAAqB,KAEzB,SAASC,IAIL,OAH2B,OAAvBD,GAA+BA,EAAmBE,SAAWrB,EAAKd,OAAOmC,SACzEF,EAAqB,IAAIG,WAAWtB,EAAKd,OAAOmC,SAE7CF,CACX,CAEA,SAASI,EAAmBC,EAAKC,GAE7B,OADAD,KAAc,EACPX,EAAkBI,OAAOG,IAAkBM,MAAMF,EAAKA,EAAMC,GACvE,CAEA,SAASE,EAAcC,GACfpB,IAAcP,EAAKQ,QAAQR,EAAKM,KAAKN,EAAKQ,OAAS,GACvD,MAAMH,EAAME,EAIZ,OAHAA,EAAYP,EAAKK,GAEjBL,EAAKK,GAAOsB,EACLtB,CACX,CAEA,IAAIuB,EAAkB,EAEtB,MAAMC,EAA4C,oBAAhBC,YAA8B,IAAIA,YAAY,SAAW,CAAEC,OAAQA,KAAQ,MAAMd,MAAM,4BAA4B,GAE/Ie,EAAe,SAAUC,EAAKC,GAChC,MAAMC,EAAMN,EAAkBE,OAAOE,GAErC,OADAC,EAAKE,IAAID,GACF,CACHE,KAAMJ,EAAIzB,OACV8B,QAASH,EAAI3B,OAErB,EAEA,SAAS+B,EAAkBN,EAAKO,EAAQC,GAEpC,QAAgBtC,IAAZsC,EAAuB,CACvB,MAAMN,EAAMN,EAAkBE,OAAOE,GAC/BV,EAAMiB,EAAOL,EAAI3B,OAAQ,KAAO,EAGtC,OAFAW,IAAkBuB,SAASnB,EAAKA,EAAMY,EAAI3B,QAAQ4B,IAAID,GACtDP,EAAkBO,EAAI3B,OACfe,CACf,CAEI,IAAIC,EAAMS,EAAIzB,OACVe,EAAMiB,EAAOhB,EAAK,KAAO,EAE7B,MAAMmB,EAAMxB,IAEZ,IAAIyB,EAAS,EAEb,KAAOA,EAASpB,EAAKoB,IAAU,CAC3B,MAAMC,EAAOZ,EAAIa,WAAWF,GAC5B,GAAIC,EAAO,IAAM,MACjBF,EAAIpB,EAAMqB,GAAUC,CAC5B,CAEI,GAAID,IAAWpB,EAAK,CACD,IAAXoB,IACAX,EAAMA,EAAIR,MAAMmB,IAEpBrB,EAAMkB,EAAQlB,EAAKC,EAAKA,EAAMoB,EAAsB,EAAbX,EAAIzB,OAAY,KAAO,EAC9D,MAAM0B,EAAOf,IAAkBuB,SAASnB,EAAMqB,EAAQrB,EAAMC,GAG5DoB,GAFYZ,EAAaC,EAAKC,GAEhBI,QACdf,EAAMkB,EAAQlB,EAAKC,EAAKoB,EAAQ,KAAO,CAC/C,CAGI,OADAhB,EAAkBgB,EACXrB,CACX,CAEA,SAASwB,EAAWC,GAChB,OAAOA,OACX,CAEA,IAAIC,EAAqB,KAEzB,SAASC,IAIL,OAH2B,OAAvBD,GAA+BA,EAAmB7B,SAAWrB,EAAKd,OAAOmC,SACzE6B,EAAqB,IAAIE,WAAWpD,EAAKd,OAAOmC,SAE7C6B,CACX,CAEA,SAASG,EAAYC,GAEjB,MAAM9D,SAAc8D,EACpB,GAAY,UAAR9D,GAA4B,WAARA,GAA4B,MAAP8D,EACzC,MAAS,GAAEA,IAEf,GAAY,UAAR9D,EACA,MAAQ,IAAG8D,KAEf,GAAY,UAAR9D,EAAkB,CAClB,MAAM+D,EAAcD,EAAIC,YACxB,OAAmB,MAAfA,EACO,SAEC,UAASA,IAE7B,CACI,GAAY,YAAR/D,EAAoB,CACpB,MAAMgE,EAAOF,EAAIE,KACjB,MAAmB,iBAARA,GAAoBA,EAAK/C,OAAS,EACjC,YAAW+C,KAEZ,UAEnB,CAEI,GAAItD,MAAMuD,QAAQH,GAAM,CACpB,MAAM7C,EAAS6C,EAAI7C,OACnB,IAAIiD,EAAQ,IACRjD,EAAS,IACTiD,GAASL,EAAYC,EAAI,KAE7B,IAAI,IAAIK,EAAI,EAAGA,EAAIlD,EAAQkD,IACvBD,GAAS,KAAOL,EAAYC,EAAIK,IAGpC,OADAD,GAAS,IACFA,CACf,CAEI,MAAME,EAAiB,sBAAsBC,KAAKC,SAASC,KAAKT,IAChE,IAAIU,EACJ,KAAIJ,EAAenD,OAAS,GAIxB,OAAOqD,SAASC,KAAKT,GAEzB,GALIU,EAAYJ,EAAe,GAKd,UAAbI,EAIA,IACI,MAAO,UAAYC,KAAKC,UAAUZ,GAAO,GACrD,CAAU,MAAOa,GACL,MAAO,QACnB,CAGI,OAAIb,aAAepC,MACP,GAAEoC,EAAIE,SAASF,EAAIc,YAAYd,EAAIe,QAGxCL,CACX,CAEA,MAAMM,EAAiD,oBAAzBC,qBACxB,CAAEC,SAAUA,OAAUC,WAAYA,QAClC,IAAIF,sBAAqBG,IAC3B1E,EAAK2E,oBAAoBC,IAAIF,EAAMG,KAAnC7E,CAAyC0E,EAAMI,EAAGJ,EAAMK,EAAE,IAG9D,SAASC,EAAeC,EAAMC,EAAML,EAAMM,GACtC,MAAMT,EAAQ,CAAEI,EAAGG,EAAMF,EAAGG,EAAME,IAAK,EAAGP,QACpCQ,EAAOA,IAAIC,KAIbZ,EAAMU,MACN,MAAMN,EAAIJ,EAAMI,EAChBJ,EAAMI,EAAI,EACV,IACI,OAAOK,EAAEL,EAAGJ,EAAMK,KAAMO,EACpC,CAAU,QACsB,KAAdZ,EAAMU,KACRpF,EAAK2E,oBAAoBC,IAAIF,EAAMG,KAAnC7E,CAAyC8E,EAAGJ,EAAMK,GAClDT,EAAcG,WAAWC,IAEzBA,EAAMI,EAAIA,CAE1B,GAII,OAFAO,EAAKE,SAAWb,EAChBJ,EAAcE,SAASa,EAAMX,EAAOA,GAC7BW,CACX,CACA,SAASG,EAAiBP,EAAMC,EAAMO,GAClCzF,EAAK0F,6HAA6HT,EAAMC,EAAMvD,EAAc8D,GAChK,CAEA,SAASE,EAAaC,EAAUC,GAC5B,KAAMD,aAAoBC,GACtB,MAAM,IAAI3E,MAAO,wBAAuB2E,EAAMrC,QAElD,OAAOoC,EAASpE,GACpB,CAEA,SAASsE,EAAkB5D,EAAKO,GAC5B,MAAMjB,EAAMiB,EAAoB,EAAbP,EAAIzB,OAAY,KAAO,EAG1C,OAFAW,IAAkBiB,IAAIH,EAAKV,EAAM,GACjCK,EAAkBK,EAAIzB,OACfe,CACX,CAiBA,SAASuE,EAAwBC,EAAWC,EAAeC,EAASC,GAChE,IACI,MAAMC,EAASpG,EAAKqG,iCAAiC,IACrDV,EAAaK,EAAWM,GACxBX,EAAaM,EAAeM,IAC5BZ,EAAaO,EAASM,IACtB,MAAMC,EAAOjE,EAAkB2D,EAAanG,EAAK0G,kBAAmB1G,EAAK2G,oBACnEC,EAAO/E,EACb7B,EAAK6G,wBAAwBT,EAAQJ,EAAUc,UAAWb,EAAca,UAAWZ,EAAQY,UAAWL,EAAMG,GAC5G,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAc,IAAPD,CACf,CAAM,QACE/G,EAAKqG,gCAAgC,GAC7C,CACA,CAEA,IAAIY,EAAwB,KAE5B,SAASC,IAIL,OAH8B,OAA1BD,GAAkCA,EAAsB5F,SAAWrB,EAAKd,OAAOmC,SAC/E4F,EAAwB,IAAIE,cAAcnH,EAAKd,OAAOmC,SAEnD4F,CACX,CAEA,SAASG,EAAoB5F,EAAKC,GAE9B,OADAD,KAAc,EACPJ,IAAkBuB,SAASnB,EAAM,EAAGA,EAAM,EAAIC,EACzD,CAIA,SAAS4F,EAAeC,GACpBtH,EAAKqH,eAAeC,EACxB,CAOA,SAASC,EAAevI,EAAKwI,GAEzB,OAAO7G,EADKX,EAAKyH,eAAe9F,EAAc3C,GAAMwI,GAExD,CAEA,SAASE,EAAYvC,EAAGG,GACpB,IACI,OAAOH,EAAEwC,MAAMC,KAAMtC,EAC7B,CAAM,MAAOuC,GACL7H,EAAK8H,qBAAqBnG,EAAckG,GAChD,CACA,CACA,SAASE,EAAkB9C,EAAMC,EAAMO,EAAMuC,GACzChI,EAAKiI,gEAAgEhD,EAAMC,EAAMvD,EAAc8D,GAAO9D,EAAcqG,GACxH,CAEA,MAAME,EAAuD,oBAAzB3D,qBAC9B,CAAEC,SAAUA,OAAUC,WAAYA,QAClC,IAAIF,sBAAqB/C,GAAOxB,EAAKmI,mBAAmB3G,IAAQ,K,MAItE,MAAM4G,EAEF,aAAOC,CAAO7G,GACVA,KAAc,EACd,MAAMI,EAAM0G,OAAOC,OAAOH,EAAQI,WAGlC,OAFA5G,EAAIkF,UAAYtF,EAChB0G,EAAoB1D,SAAS5C,EAAKA,EAAIkF,UAAWlF,GAC1CA,CACf,CAEI6G,kBAAAA,GACI,MAAMjH,EAAMoG,KAAKd,UAGjB,OAFAc,KAAKd,UAAY,EACjBoB,EAAoBzD,WAAWmD,MACxBpG,CACf,CAEIkH,IAAAA,GACI,MAAMlH,EAAMoG,KAAKa,qBACjBzI,EAAKmI,mBAAmB3G,EAChC,CASI,uBAAOmH,CAAiBC,GACpBjD,EAAaiD,EAAaC,IAC1B,MAAMjI,EAAMZ,EAAK8I,yBAAyBF,EAAY9B,WACtD,OAAOsB,EAAQC,OAAOzH,EAC9B,CASI,oBAAOmI,CAAcC,GACjBrD,EAAaqD,EAAUC,IACvB,MAAMrI,EAAMZ,EAAKkJ,sBAAsBF,EAASlC,WAChD,OAAOsB,EAAQC,OAAOzH,EAC9B,CASI,kBAAOuI,CAAYhK,GACf,MAAMsH,EAAOjE,EAAkBrD,EAASa,EAAK0G,kBAAmB1G,EAAK2G,oBAC/DC,EAAO/E,EACPjB,EAAMZ,EAAKoJ,oBAAoB3C,EAAMG,GAC3C,OAAOwB,EAAQC,OAAOzH,EAC9B,CAQIyI,SAAAA,GACI,IAAIC,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAKwJ,kBAAkBpD,EAAQwB,KAAKd,WACpC,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,CAUIG,MAAAA,CAAOtF,EAASuF,GACZ,MAAMlD,EAAOX,EAAkB1B,EAASpE,EAAK0G,mBACvCE,EAAO/E,EACb8D,EAAagE,EAAWC,IAExB,OAAe,IADH5J,EAAK6J,eAAejC,KAAKd,UAAWL,EAAMG,EAAM+C,EAAU7C,UAE9E,GAGA,MAAMgD,EAAyD,oBAAzBvF,qBAChC,CAAEC,SAAUA,OAAUC,WAAYA,QAClC,IAAIF,sBAAqB/C,GAAOxB,EAAK+J,qBAAqBvI,IAAQ,K,MAIxE,MAAMwI,EAEF,aAAO3B,CAAO7G,GACVA,KAAc,EACd,MAAMI,EAAM0G,OAAOC,OAAOyB,EAAUxB,WAGpC,OAFA5G,EAAIkF,UAAYtF,EAChBsI,EAAsBtF,SAAS5C,EAAKA,EAAIkF,UAAWlF,GAC5CA,CACf,CAEI6G,kBAAAA,GACI,MAAMjH,EAAMoG,KAAKd,UAGjB,OAFAc,KAAKd,UAAY,EACjBgD,EAAsBrF,WAAWmD,MAC1BpG,CACf,CAEIkH,IAAAA,GACI,MAAMlH,EAAMoG,KAAKa,qBACjBzI,EAAK+J,qBAAqBvI,EAClC,CAKIsC,QAAAA,GACI,IAAIwF,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAKiK,mBAAmB7D,EAAQwB,KAAKd,WACrC,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,CAMI,iBAAOW,CAAWlE,GACd,IACI,MAAMI,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkBwD,EAAWhG,EAAK0G,kBAAmB1G,EAAK2G,oBACjEC,EAAO/E,EACb7B,EAAKmK,qBAAqB/D,EAAQK,EAAMG,GACxC,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAOgD,EAAU3B,OAAOtB,EACpC,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,GAGA,MAAM+D,EAAiE,oBAAzB7F,qBACxC,CAAEC,SAAUA,OAAUC,WAAYA,QAClC,IAAIF,sBAAqB/C,GAAOxB,EAAKqK,6BAA6B7I,IAAQ,K,MAOhF,MAAM8I,EAEF,aAAOjC,CAAO7G,GACVA,KAAc,EACd,MAAMI,EAAM0G,OAAOC,OAAO+B,EAAkB9B,WAG5C,OAFA5G,EAAIkF,UAAYtF,EAChB4I,EAA8B5F,SAAS5C,EAAKA,EAAIkF,UAAWlF,GACpDA,CACf,CAEI6G,kBAAAA,GACI,MAAMjH,EAAMoG,KAAKd,UAGjB,OAFAc,KAAKd,UAAY,EACjBsD,EAA8B3F,WAAWmD,MAClCpG,CACf,CAEIkH,IAAAA,GACI,MAAMlH,EAAMoG,KAAKa,qBACjBzI,EAAKqK,6BAA6B7I,EAC1C,CAOI+I,UAAAA,GAEI,OAAO5J,EADKX,EAAKwK,6BAA6B5C,KAAKd,WAE3D,CAOI2D,YAAAA,GACI,MAAM7J,EAAMZ,EAAK0K,+BAA+B9C,KAAKd,WACrD,OAAe,IAARlG,OAAYR,EAAYkG,EAAU+B,OAAOzH,EACxD,CAKI+J,OAAAA,GACI,IACI,MAAMvE,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAK4K,0BAA0BxE,EAAQwB,KAAKd,WAC5C,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAO6D,GAAQxC,OAAOtB,EAClC,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CASIyE,aAAAA,GACI,MAAMlK,EAAMZ,EAAK+K,gCAAgCnD,KAAKd,WACtD,OAAe,IAARlG,OAAYR,EAAY4K,GAAW3C,OAAOzH,EACzD,CAOIqK,eAAAA,GACI,MAAMrK,EAAMZ,EAAKkL,kCAAkCtD,KAAKd,WACxD,OAAOP,GAAa8B,OAAOzH,EACnC,CAKIuK,aAAAA,GACI,IAAI7B,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAKoL,gCAAgChF,EAAQwB,KAAKd,WAClD,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,CAKI8B,UAAAA,GACI,MAAMzK,EAAMZ,EAAKsL,6BAA6B1D,KAAKd,WACnD,OAAON,GAAQ6B,OAAOzH,EAC9B,GAGA,MAAM2K,EAAqD,oBAAzBhH,qBAC5B,CAAEC,SAAUA,OAAUC,WAAYA,QAClC,IAAIF,sBAAqB/C,GAAOxB,EAAKwL,iBAAiBhK,IAAQ,K,MAGpE,MAAMiK,EAEF,aAAOpD,CAAO7G,GACVA,KAAc,EACd,MAAMI,EAAM0G,OAAOC,OAAOkD,EAAMjD,WAGhC,OAFA5G,EAAIkF,UAAYtF,EAChB+J,EAAkB/G,SAAS5C,EAAKA,EAAIkF,UAAWlF,GACxCA,CACf,CAEI6G,kBAAAA,GACI,MAAMjH,EAAMoG,KAAKd,UAGjB,OAFAc,KAAKd,UAAY,EACjByE,EAAkB9G,WAAWmD,MACtBpG,CACf,CAEIkH,IAAAA,GACI,MAAMlH,EAAMoG,KAAKa,qBACjBzI,EAAKwL,iBAAiBhK,EAC9B,CAIIsC,QAAAA,GACI,IAAIwF,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAK0L,eAAetF,EAAQwB,KAAKd,WACjC,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,CAKI,iBAAOW,CAAWyB,GACd,IACI,MAAMvF,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkBmJ,EAAO3L,EAAK0G,kBAAmB1G,EAAK2G,oBAC7DC,EAAO/E,EACb7B,EAAK4L,iBAAiBxF,EAAQK,EAAMG,GACpC,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAOyE,EAAMpD,OAAOtB,EAChC,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,GAGA,MAAMwF,EAAuD,oBAAzBtH,qBAC9B,CAAEC,SAAUA,OAAUC,WAAYA,QAClC,IAAIF,sBAAqB/C,GAAOxB,EAAK8L,mBAAmBtK,IAAQ,KAItE,MAAMqJ,GAEF,aAAOxC,CAAO7G,GACVA,KAAc,EACd,MAAMI,EAAM0G,OAAOC,OAAOsC,GAAQrC,WAGlC,OAFA5G,EAAIkF,UAAYtF,EAChBqK,EAAoBrH,SAAS5C,EAAKA,EAAIkF,UAAWlF,GAC1CA,CACf,CAEI6G,kBAAAA,GACI,MAAMjH,EAAMoG,KAAKd,UAGjB,OAFAc,KAAKd,UAAY,EACjB+E,EAAoBpH,WAAWmD,MACxBpG,CACf,CAEIkH,IAAAA,GACI,MAAMlH,EAAMoG,KAAKa,qBACjBzI,EAAK8L,mBAAmBtK,EAChC,CAUIuK,WAAAA,CAAYC,EAAa/F,GACrBN,EAAaqG,EAAahB,IAC1B,IAAIvE,EAAOuF,EAAYvD,qBACvB9C,EAAaM,EAAeM,IAC5B,IAAI0F,EAAOhG,EAAcwC,qBACzB,MAAM7H,EAAMZ,EAAKkM,YAAYzF,EAAMwF,GAEnC,OADArE,KAAKd,UAAYlG,IAAQ,EAClBgH,IACf,CAOIuE,UAAAA,GACI,IACI,MAAM/F,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAKoM,mBAAmBhG,EAAQwB,KAAKd,WACrC,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAOgE,GAAW3C,OAAOtB,EACrC,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CAOIgG,YAAAA,GACI,IACI,MAAMjG,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAKsM,qBAAqBlG,EAAQwB,KAAKd,WACvC,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAOT,GAAa8B,OAAOtB,EACvC,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,EAGA,MAAMkG,GAA4D,oBAAzBhI,qBACnC,CAAEC,SAAUA,OAAUC,WAAYA,QAClC,IAAIF,sBAAqB/C,GAAOxB,EAAKwM,wBAAwBhL,IAAQ,K,OAK3E,MAAMiL,EAEF,aAAOpE,CAAO7G,GACVA,KAAc,EACd,MAAMI,EAAM0G,OAAOC,OAAOkE,EAAajE,WAGvC,OAFA5G,EAAIkF,UAAYtF,EAChB+K,GAAyB/H,SAAS5C,EAAKA,EAAIkF,UAAWlF,GAC/CA,CACf,CAEI6G,kBAAAA,GACI,MAAMjH,EAAMoG,KAAKd,UAGjB,OAFAc,KAAKd,UAAY,EACjByF,GAAyB9H,WAAWmD,MAC7BpG,CACf,CAEIkH,IAAAA,GACI,MAAMlH,EAAMoG,KAAKa,qBACjBzI,EAAKwM,wBAAwBhL,EACrC,CAKIuK,WAAAA,CAAYW,GACR,IACI,MAAMtG,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkBkK,EAAY1M,EAAK0G,kBAAmB1G,EAAK2G,oBAClEC,EAAO/E,EACb7B,EAAK2M,iBAAiBvG,EAAQK,EAAMG,GACpC,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAGrB,OADAY,KAAKd,UAAYC,IAAO,EACjBa,IACnB,CAAU,QACE5H,EAAKqG,gCAAgC,GACjD,CACA,CASIuG,YAAAA,CAAaC,EAAYC,GACrB,IACI,MAAM1G,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkBqK,EAAY7M,EAAK0G,kBAAmB1G,EAAK2G,oBAClEC,EAAO/E,EACPoK,EAAOzJ,EAAkBsK,EAAY9M,EAAK0G,kBAAmB1G,EAAK2G,oBAClEoG,EAAOlL,EACb7B,EAAKgN,0BAA0B5G,EAAQwB,KAAKd,UAAWL,EAAMG,EAAMqF,EAAMc,GACzE,IAAIhG,EAAK5D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWoG,EAEjC,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CAKIvC,QAAAA,GACI,IAAIwF,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAKiN,sBAAsB7G,EAAQwB,KAAKd,WACxC,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,CAMI,iBAAOW,CAAWgD,GACd,IACI,MAAM9G,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkB0K,EAAGlN,EAAK0G,kBAAmB1G,EAAK2G,oBACzDC,EAAO/E,EACb7B,EAAKmN,wBAAwB/G,EAAQK,EAAMG,GAC3C,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAOyF,EAAapE,OAAOtB,EACvC,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,GAGA,MAAM+G,GAA0D,oBAAzB7I,qBACjC,CAAEC,SAAUA,OAAUC,WAAYA,QAClC,IAAIF,sBAAqB/C,GAAOxB,EAAKqN,sBAAsB7L,IAAQ,K,OAIzE,MAAM8L,EAEF,aAAOjF,CAAO7G,GACVA,KAAc,EACd,MAAMI,EAAM0G,OAAOC,OAAO+E,EAAW9E,WAGrC,OAFA5G,EAAIkF,UAAYtF,EAChB4L,GAAuB5I,SAAS5C,EAAKA,EAAIkF,UAAWlF,GAC7CA,CACf,CAEI6G,kBAAAA,GACI,MAAMjH,EAAMoG,KAAKd,UAGjB,OAFAc,KAAKd,UAAY,EACjBsG,GAAuB3I,WAAWmD,MAC3BpG,CACf,CAEIkH,IAAAA,GACI,MAAMlH,EAAMoG,KAAKa,qBACjBzI,EAAKqN,sBAAsB7L,EACnC,CAMIuK,WAAAA,GACI,MAAMnL,EAAMZ,EAAKuN,iBAEjB,OADA3F,KAAKd,UAAYlG,IAAQ,EAClBgH,IACf,CASI,0BAAO4F,CAAoBC,GACvB,MAAMhH,EAAOX,EAAkB2H,EAAMzN,EAAK0G,mBACpCE,EAAO/E,EACPjB,EAAMZ,EAAK0N,+BAA+BjH,EAAMG,GACtD,OAAO0G,EAAWjF,OAAOzH,EACjC,CASI,kBAAOuI,CAAYP,GACf,IACI,MAAMxC,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkBoG,EAAa5I,EAAK0G,kBAAmB1G,EAAK2G,oBACnEC,EAAO/E,EACb7B,EAAK2N,uBAAuBvH,EAAQK,EAAMG,GAC1C,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAOsG,EAAWjF,OAAOtB,EACrC,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CAQIgD,SAAAA,GACI,IAAIC,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAK4N,qBAAqBxH,EAAQwB,KAAKd,WACvC,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,CAOIsE,WAAAA,GACI,MAAMjN,EAAMZ,EAAK8N,uBAAuBlG,KAAKd,WAC7C,OAAOmC,GAAQZ,OAAOzH,EAC9B,CAOImN,UAAAA,GACI,MAAMnN,EAAMZ,EAAKgO,sBAAsBpG,KAAKd,WAC5C,OAAOmH,EAAQ5F,OAAOzH,EAC9B,CASIsN,IAAAA,CAAK9J,GACD,MAAMqC,EAAOX,EAAkB1B,EAASpE,EAAK0G,mBACvCE,EAAO/E,EACPjB,EAAMZ,EAAKmO,gBAAgBvG,KAAKd,UAAWL,EAAMG,GACvD,OAAOgD,GAAUvB,OAAOzH,EAChC,CAUI,mBAAOwN,CAAaC,GAChB,IACI,MAAMjI,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkB6L,EAAQrO,EAAK0G,kBAAmB1G,EAAK2G,oBAC9DC,EAAO/E,EACb7B,EAAKsO,wBAAwBlI,EAAQK,EAAMG,GAC3C,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAOuH,GAAqBlG,OAAOtB,EAC/C,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CAUImI,YAAAA,CAAaH,GACT,IACI,MAAMjI,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkB6L,EAAQrO,EAAK0G,kBAAmB1G,EAAK2G,oBAC9DC,EAAO/E,EACb7B,EAAKyO,wBAAwBrI,EAAQwB,KAAKd,UAAWL,EAAMG,GAC3D,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAOuH,GAAqBlG,OAAOtB,EAC/C,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CAWI,+BAAOqI,CAAyBC,EAAYN,GACxC,IACI,MAAMjI,EAASpG,EAAKqG,iCAAiC,IACrDV,EAAagJ,EAAYJ,IACzB,MAAM9H,EAAOjE,EAAkB6L,EAAQrO,EAAK0G,kBAAmB1G,EAAK2G,oBAC9DC,EAAO/E,EACb7B,EAAK4O,oCAAoCxI,EAAQuI,EAAW7H,UAAWL,EAAMG,GAC7E,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAOsG,EAAWjF,OAAOtB,EACrC,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,GAGA,MAAMwI,GAAoE,oBAAzBtK,qBAC3C,CAAEC,SAAUA,OAAUC,WAAYA,QAClC,IAAIF,sBAAqB/C,GAAOxB,EAAK8O,gCAAgCtN,IAAQ,K,OAInF,MAAMuN,EAEF,aAAO1G,CAAO7G,GACVA,KAAc,EACd,MAAMI,EAAM0G,OAAOC,OAAOwG,EAAqBvG,WAG/C,OAFA5G,EAAIkF,UAAYtF,EAChBqN,GAAiCrK,SAAS5C,EAAKA,EAAIkF,UAAWlF,GACvDA,CACf,CAEI6G,kBAAAA,GACI,MAAMjH,EAAMoG,KAAKd,UAGjB,OAFAc,KAAKd,UAAY,EACjB+H,GAAiCpK,WAAWmD,MACrCpG,CACf,CAEIkH,IAAAA,GACI,MAAMlH,EAAMoG,KAAKa,qBACjBzI,EAAK8O,gCAAgCtN,EAC7C,CAYI,wBAAOwN,CAAkBpG,EAAayF,GAClC,IACI,MAAMjI,EAASpG,EAAKqG,iCAAiC,IACrDV,EAAaiD,EAAaC,IAC1B,MAAMpC,EAAOjE,EAAkB6L,EAAQrO,EAAK0G,kBAAmB1G,EAAK2G,oBAC9DC,EAAO/E,EACb7B,EAAKyO,wBAAwBrI,EAAQwC,EAAY9B,UAAWL,EAAMG,GAClE,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAO+H,EAAqB1G,OAAOtB,EAC/C,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CAUI4I,mBAAAA,CAAoBZ,GAChB,IACI,MAAMjI,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkB6L,EAAQrO,EAAK0G,kBAAmB1G,EAAK2G,oBAC9DC,EAAO/E,EACb7B,EAAKkP,yCAAyC9I,EAAQwB,KAAKd,UAAWL,EAAMG,GAC5E,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAO6B,GAAWR,OAAOtB,EACrC,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CAOIvC,QAAAA,GACI,IAAIwF,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAKmP,8BAA8B/I,EAAQwB,KAAKd,WAChD,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,CASI,iBAAOW,CAAWyE,GACd,IACI,MAAMvI,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkBmM,EAAY3O,EAAK0G,kBAAmB1G,EAAK2G,oBAClEC,EAAO/E,EACb7B,EAAKoP,gCAAgChJ,EAAQK,EAAMG,GACnD,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAO+H,EAAqB1G,OAAOtB,EAC/C,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,GAGA,MAAMgJ,GAAuD,oBAAzB9K,qBAC9B,CAAEC,SAAUA,OAAUC,WAAYA,QAClC,IAAIF,sBAAqB/C,GAAOxB,EAAKsP,mBAAmB9N,IAAQ,K,OAItE,MAAM+N,EAEF,aAAOlH,CAAO7G,GACVA,KAAc,EACd,MAAMI,EAAM0G,OAAOC,OAAOgH,EAAQ/G,WAGlC,OAFA5G,EAAIkF,UAAYtF,EAChB6N,GAAoB7K,SAAS5C,EAAKA,EAAIkF,UAAWlF,GAC1CA,CACf,CAEI6G,kBAAAA,GACI,MAAMjH,EAAMoG,KAAKd,UAGjB,OAFAc,KAAKd,UAAY,EACjBuI,GAAoB5K,WAAWmD,MACxBpG,CACf,CAEIkH,IAAAA,GACI,MAAMlH,EAAMoG,KAAKa,qBACjBzI,EAAKsP,mBAAmB9N,EAChC,CASI,iBAAO0I,CAAWhE,GACd,IACI,MAAME,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkB0D,EAASlG,EAAK0G,kBAAmB1G,EAAK2G,oBAC/DC,EAAO/E,EACb7B,EAAKwP,mBAAmBpJ,EAAQK,EAAMG,GACtC,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAOuI,EAAQlH,OAAOtB,EAClC,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CAOIvC,QAAAA,GACI,IAAIwF,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAKyP,iBAAiBrJ,EAAQwB,KAAKd,WACnC,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,CASImG,WAAAA,CAAYC,GACR,MAAMlJ,EAAOjE,EAAkBmN,EAAe3P,EAAK0G,kBAAmB1G,EAAK2G,oBACrEC,EAAO/E,EAEb,OAAe,IADH7B,EAAK4P,oBAAoBhI,KAAKd,UAAWL,EAAMG,EAEnE,CAuBIiJ,YAAAA,GAEI,OAAOlP,EADKX,EAAK8P,qBAAqBlI,KAAKd,WAEnD,CAyCIiJ,iBAAAA,CAAkBJ,GACd,IACI,MAAMvJ,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkBmN,EAAe3P,EAAK0G,kBAAmB1G,EAAK2G,oBACrEC,EAAO/E,EACb7B,EAAKgQ,0BAA0B5J,EAAQwB,KAAKd,UAAWL,EAAMG,GAC7D,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAOrG,EAAWoG,EAC9B,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CAqBI4J,WAAAA,GACI,IACI,MAAM7J,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAKkQ,oBAAoB9J,EAAQwB,KAAKd,WACtC,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAOrG,EAAWoG,EAC9B,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CAgCI8J,gBAAAA,CAAiBC,GACb,IACI,MAAMhK,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkB4N,EAAapQ,EAAK0G,kBAAmB1G,EAAK2G,oBACnEC,EAAO/E,EACb7B,EAAKqQ,yBAAyBjK,EAAQwB,KAAKd,UAAWL,EAAMG,GAC5D,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAOrG,EAAWoG,EAC9B,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CAmDIiK,gBAAAA,CAAiBC,GACb,IACI,MAAMnK,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkB+N,EAAavQ,EAAK0G,kBAAmB1G,EAAK2G,oBACnEC,EAAO/E,EACb7B,EAAKwQ,yBAAyBpK,EAAQwB,KAAKd,UAAWL,EAAMG,GAC5D,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAOrG,EAAWoG,EAC9B,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CAOI,wBAAOoK,GACH,MAAM7P,EAAMZ,EAAK0Q,4BACjB,OAAOnB,EAAQlH,OAAOzH,EAC9B,CAOI+P,EAAAA,GACI,IAAIrH,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAK4Q,WAAWxK,EAAQwB,KAAKd,WAC7B,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,CAOIpK,OAAAA,GACI,IACI,MAAMiH,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAK6Q,gBAAgBzK,EAAQwB,KAAKd,WAClC,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAOiH,EAAQ5F,OAAOtB,EAClC,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CASIyK,OAAAA,CAAQC,GACJpL,EAAaoL,EAAOxB,GAEpB,OAAe,IADHvP,EAAKgR,gBAAgBpJ,KAAKd,UAAWiK,EAAMjK,UAE/D,CA0BImK,UAAAA,GAEI,OAAOtQ,EADKX,EAAKkR,mBAAmBtJ,KAAKd,WAEjD,GAGA,MAAMqK,GAA8D,oBAAzB5M,qBACrC,CAAEC,SAAUA,OAAUC,WAAYA,QAClC,IAAIF,sBAAqB/C,GAAOxB,EAAKoR,0BAA0B5P,IAAQ,K,OAG7E,MAEIiH,kBAAAA,GACI,MAAMjH,EAAMoG,KAAKd,UAGjB,OAFAc,KAAKd,UAAY,EACjBqK,GAA2B1M,WAAWmD,MAC/BpG,CACf,CAEIkH,IAAAA,GACI,MAAMlH,EAAMoG,KAAKa,qBACjBzI,EAAKoR,0BAA0B5P,EACvC,CA8BI,iCAAO6P,CAA2BzI,EAAa1C,EAASoL,EAAaC,EAAYvS,EAAKwS,EAASC,EAAiBC,EAAmBC,GAC/HhM,EAAaiD,EAAaC,IAC1B,MAAMpC,EAAOjE,EAAkB0D,EAASlG,EAAK0G,kBAAmB1G,EAAK2G,oBAC/DC,EAAO/E,EACb,IAAIoK,EAAO,EACNjJ,EAAWuO,KACZ5L,EAAa4L,EAAYK,IACzB3F,EAAOsF,EAAW9I,sBAEtB,IAAIoJ,EAAO7O,EAAWhE,GAAO,EAAIwD,EAAkBxD,EAAKgB,EAAK0G,kBAAmB1G,EAAK2G,oBACjFmL,EAAOjQ,EACX,IAAIkQ,EAAO,EACN/O,EAAWyO,KACZ9L,EAAa8L,EAAiBzG,IAC9B+G,EAAON,EAAgBhJ,sBAE3B,IAAIuJ,EAAO,EACNhP,EAAW0O,KACZ/L,EAAa+L,EAAmBnL,IAChCyL,EAAON,EAAkBjJ,sBAE7B,IAAIwJ,EAAO,EACNjP,EAAW2O,KACZhM,EAAagM,EAAeO,IAC5BD,EAAON,EAAclJ,sBAGzB,OAAO9H,EADKX,EAAKmS,0CAA0CvJ,EAAY9B,UAAWL,EAAMG,EAAM0K,EAAarF,EAAM4F,EAAMC,EAAM9O,EAAWwO,GAAW,EAAI7P,EAAc6P,GAAUO,EAAMC,EAAMC,GAEnM,CAeI,4BAAOG,CAAsBlM,EAASsL,GAClC,MAAM/K,EAAOjE,EAAkB0D,EAASlG,EAAK0G,kBAAmB1G,EAAK2G,oBAC/DC,EAAO/E,EAEb,OAAOlB,EADKX,EAAKqS,qCAAqC5L,EAAMG,EAAM5D,EAAWwO,GAAW,EAAI7P,EAAc6P,IAElH,CAaI,8BAAOc,CAAwB9O,GAC3B,IACI,MAAM4C,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkBgB,EAAMxD,EAAK0G,kBAAmB1G,EAAK2G,oBAC5DC,EAAO/E,EACb7B,EAAKuS,uCAAuCnM,EAAQK,EAAMG,GAC1D,IAAIG,EAAKG,IAAqBd,EAAS,EAAI,GACvCoM,EAAKrP,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAW6R,GAErB,OAAOC,OAAOC,QAAQ,GAAI3L,EACtC,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CAiCI,6BAAOsM,CAAuB/J,EAAa1C,EAAS0M,EAAWC,EAAQC,EAAiBC,EAAOvB,EAASxF,EAAa/F,EAAejH,EAAK2S,GACrIhM,EAAaiD,EAAaC,IAC1B,MAAMpC,EAAOjE,EAAkB0D,EAASlG,EAAK0G,kBAAmB1G,EAAK2G,oBAC/DC,EAAO/E,EACPoK,EAAOzJ,EAAkBoQ,EAAW5S,EAAK0G,kBAAmB1G,EAAK2G,oBACjEoG,EAAOlL,EACb,IAAIgQ,EAAO,EACN7O,EAAWgJ,KACZrG,EAAaqG,EAAahB,IAC1B6G,EAAO7F,EAAYvD,sBAEvB,IAAIsJ,EAAO,EACN/O,EAAWiD,KACZN,EAAaM,EAAeM,IAC5BwL,EAAO9L,EAAcwC,sBAEzB,IAAIuJ,EAAOhP,EAAWhE,GAAO,EAAIwD,EAAkBxD,EAAKgB,EAAK0G,kBAAmB1G,EAAK2G,oBACjFqM,EAAOnR,EACX,IAAIoQ,EAAO,EACNjP,EAAW2O,KACZhM,EAAagM,EAAeO,IAC5BD,EAAON,EAAclJ,sBAGzB,OAAO9H,EADKX,EAAKiT,sCAAsCrK,EAAY9B,UAAWL,EAAMG,EAAMqF,EAAMc,EAAMpL,EAAckR,GAASC,EAAiBC,EAAO/P,EAAWwO,GAAW,EAAI7P,EAAc6P,GAAUK,EAAME,EAAMC,EAAMgB,EAAMf,GAEvO,CAsCI,gCAAOiB,CAA0BtK,EAAa1C,EAAS0M,EAAWC,EAAQvB,EAAaC,EAAYvS,EAAKwS,EAASxF,EAAa/F,EAAewL,EAAiBC,EAAmBC,GAC7KhM,EAAaiD,EAAaC,IAC1B,MAAMpC,EAAOjE,EAAkB0D,EAASlG,EAAK0G,kBAAmB1G,EAAK2G,oBAC/DC,EAAO/E,EACPoK,EAAOzJ,EAAkBoQ,EAAW5S,EAAK0G,kBAAmB1G,EAAK2G,oBACjEoG,EAAOlL,EACb,IAAIgQ,EAAO,EACN7O,EAAWuO,KACZ5L,EAAa4L,EAAYK,IACzBC,EAAON,EAAW9I,sBAEtB,IAAIsJ,EAAO/O,EAAWhE,GAAO,EAAIwD,EAAkBxD,EAAKgB,EAAK0G,kBAAmB1G,EAAK2G,oBACjFwM,EAAOtR,EACX,IAAImQ,EAAO,EACNhP,EAAWgJ,KACZrG,EAAaqG,EAAahB,IAC1BgH,EAAOhG,EAAYvD,sBAEvB,IAAIwJ,EAAO,EACNjP,EAAWiD,KACZN,EAAaM,EAAeM,IAC5B0L,EAAOhM,EAAcwC,sBAEzB,IAAI2K,EAAO,EACNpQ,EAAWyO,KACZ9L,EAAa8L,EAAiBzG,IAC9BoI,EAAO3B,EAAgBhJ,sBAE3B,IAAI4K,EAAO,EACNrQ,EAAW0O,KACZ/L,EAAa+L,EAAmBnL,IAChC8M,EAAO3B,EAAkBjJ,sBAE7B,IAAI6K,EAAO,EACNtQ,EAAW2O,KACZhM,EAAagM,EAAeO,IAC5BoB,EAAO3B,EAAclJ,sBAGzB,OAAO9H,EADKX,EAAKuT,yCAAyC3K,EAAY9B,UAAWL,EAAMG,EAAMqF,EAAMc,EAAMpL,EAAckR,GAASvB,EAAaO,EAAME,EAAMoB,EAAMnQ,EAAWwO,GAAW,EAAI7P,EAAc6P,GAAUQ,EAAMC,EAAMmB,EAAMC,EAAMC,GAEjP,CA8BI,2BAAOE,CAAqB5K,EAAa1C,EAAS0M,EAAWC,EAAQ7T,EAAKwS,EAASxF,EAAa/F,EAAe0L,GAC3GhM,EAAaiD,EAAaC,IAC1B,MAAMpC,EAAOjE,EAAkB0D,EAASlG,EAAK0G,kBAAmB1G,EAAK2G,oBAC/DC,EAAO/E,EACPoK,EAAOzJ,EAAkBoQ,EAAW5S,EAAK0G,kBAAmB1G,EAAK2G,oBACjEoG,EAAOlL,EACb,IAAIgQ,EAAO7O,EAAWhE,GAAO,EAAIwD,EAAkBxD,EAAKgB,EAAK0G,kBAAmB1G,EAAK2G,oBACjFmL,EAAOjQ,EACX,IAAIkQ,EAAO,EACN/O,EAAWgJ,KACZrG,EAAaqG,EAAahB,IAC1B+G,EAAO/F,EAAYvD,sBAEvB,IAAIuJ,EAAO,EACNhP,EAAWiD,KACZN,EAAaM,EAAeM,IAC5ByL,EAAO/L,EAAcwC,sBAEzB,IAAIwJ,EAAO,EACNjP,EAAW2O,KACZhM,EAAagM,EAAeO,IAC5BD,EAAON,EAAclJ,sBAGzB,OAAO9H,EADKX,EAAKyT,oCAAoC7K,EAAY9B,UAAWL,EAAMG,EAAMqF,EAAMc,EAAMpL,EAAckR,GAAShB,EAAMC,EAAM9O,EAAWwO,GAAW,EAAI7P,EAAc6P,GAAUO,EAAMC,EAAMC,GAE7M,CAeI,0BAAOyB,CAAoBxN,EAAS0M,GAChC,IACI,MAAMxM,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkB0D,EAASlG,EAAK0G,kBAAmB1G,EAAK2G,oBAC/DC,EAAO/E,EACPoK,EAAOzJ,EAAkBoQ,EAAW5S,EAAK0G,kBAAmB1G,EAAK2G,oBACjEoG,EAAOlL,EACb7B,EAAK2T,mCAAmCvN,EAAQK,EAAMG,EAAMqF,EAAMc,GAClE,IAAIhG,EAAKG,IAAqBd,EAAS,EAAI,GACvCoM,EAAKrP,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAW6R,GAErB,OAAOC,OAAOC,QAAQ,GAAI3L,EACtC,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CA6BI,2BAAOuN,CAAqBhL,EAAaiL,EAAUC,EAAUxC,EAAaC,EAAYvS,EAAK+U,EAAkBC,EAAoBvC,EAAiBC,EAAmBC,GACjKhM,EAAaiD,EAAaC,IAC1BlD,EAAakO,EAAUjC,IACvB,IAAInL,EAAOoN,EAASpL,qBACpB9C,EAAamO,EAAUlC,IACvB,IAAI3F,EAAO6H,EAASrL,qBACpB,IAAIoJ,EAAO,EACN7O,EAAWuO,KACZ5L,EAAa4L,EAAYK,IACzBC,EAAON,EAAW9I,sBAEtB,IAAIsJ,EAAO/O,EAAWhE,GAAO,EAAIwD,EAAkBxD,EAAKgB,EAAK0G,kBAAmB1G,EAAK2G,oBACjFwM,EAAOtR,EACX,IAAImQ,EAAO,EACNhP,EAAW+Q,KACZpO,EAAaoO,EAAkB/I,IAC/BgH,EAAO+B,EAAiBtL,sBAE5B,IAAIwJ,EAAO,EACNjP,EAAWgR,KACZrO,EAAaqO,EAAoBzN,IACjC0L,EAAO+B,EAAmBvL,sBAE9B,IAAI2K,EAAO,EACNpQ,EAAWyO,KACZ9L,EAAa8L,EAAiBzG,IAC9BoI,EAAO3B,EAAgBhJ,sBAE3B,IAAI4K,EAAO,EACNrQ,EAAW0O,KACZ/L,EAAa+L,EAAmBnL,IAChC8M,EAAO3B,EAAkBjJ,sBAE7B,IAAI6K,EAAO,EACNtQ,EAAW2O,KACZhM,EAAagM,EAAeO,IAC5BoB,EAAO3B,EAAclJ,sBAGzB,OAAO9H,EADKX,EAAKiU,oCAAoCrL,EAAY9B,UAAWL,EAAMwF,EAAMqF,EAAaO,EAAME,EAAMoB,EAAMnB,EAAMC,EAAMmB,EAAMC,EAAMC,GAEvJ,CAqBI,4BAAOY,CAAsBtL,EAAauL,EAAcC,EAAepV,EAAKqV,EAAmBC,EAAqB3C,GAChHhM,EAAaiD,EAAaC,IAC1BlD,EAAayO,EAAexC,IAC5B,IAAInL,EAAO2N,EAAc3L,qBACrBwD,EAAOjJ,EAAWhE,GAAO,EAAIwD,EAAkBxD,EAAKgB,EAAK0G,kBAAmB1G,EAAK2G,oBACjFoG,EAAOlL,EACX,IAAIgQ,EAAO,EACN7O,EAAWqR,KACZ1O,EAAa0O,EAAmBrJ,IAChC6G,EAAOwC,EAAkB5L,sBAE7B,IAAIsJ,EAAO,EACN/O,EAAWsR,KACZ3O,EAAa2O,EAAqB/N,IAClCwL,EAAOuC,EAAoB7L,sBAE/B,IAAIuJ,EAAO,EACNhP,EAAW2O,KACZhM,EAAagM,EAAeO,IAC5BF,EAAOL,EAAclJ,sBAGzB,OAAO9H,EADKX,EAAKuU,qCAAqC3L,EAAY9B,UAAWqN,EAAc1N,EAAMwF,EAAMc,EAAM8E,EAAME,EAAMC,GAEjI,CAgCI,+BAAOwC,CAAyB5L,EAAa6L,EAAgBC,EAAWC,EAAeP,EAAe9C,EAAaC,EAAYvS,EAAK4V,EAAsBC,EAAwBpD,EAAiBC,EAAmBC,GAClNhM,EAAaiD,EAAaC,IAC1B,MAAMpC,EAAOjE,EAAkBkS,EAAW1U,EAAK0G,kBAAmB1G,EAAK2G,oBACjEC,EAAO/E,EACPoK,EAAOzJ,EAAkBmS,EAAe3U,EAAK0G,kBAAmB1G,EAAK2G,oBACrEoG,EAAOlL,EACb,IAAIgQ,EAAO,EACN7O,EAAWoR,KACZzO,EAAayO,EAAexC,IAC5BC,EAAOuC,EAAc3L,sBAEzB,IAAIsJ,EAAO,EACN/O,EAAWuO,KACZ5L,EAAa4L,EAAYK,IACzBG,EAAOR,EAAW9I,sBAEtB,IAAIuJ,EAAOhP,EAAWhE,GAAO,EAAIwD,EAAkBxD,EAAKgB,EAAK0G,kBAAmB1G,EAAK2G,oBACjFqM,EAAOnR,EACX,IAAIoQ,EAAO,EACNjP,EAAW4R,KACZjP,EAAaiP,EAAsB5J,IACnCiH,EAAO2C,EAAqBnM,sBAEhC,IAAI2K,EAAO,EACNpQ,EAAW6R,KACZlP,EAAakP,EAAwBtO,IACrC6M,EAAOyB,EAAuBpM,sBAElC,IAAI4K,EAAO,EACNrQ,EAAWyO,KACZ9L,EAAa8L,EAAiBzG,IAC9BqI,EAAO5B,EAAgBhJ,sBAE3B,IAAI6K,EAAO,EACNtQ,EAAW0O,KACZ/L,EAAa+L,EAAmBnL,IAChC+M,EAAO5B,EAAkBjJ,sBAE7B,IAAIqM,EAAO,EACN9R,EAAW2O,KACZhM,EAAagM,EAAeO,IAC5B4C,EAAOnD,EAAclJ,sBAGzB,OAAO9H,EADKX,EAAK+U,wCAAwCnM,EAAY9B,UAAW2N,EAAgBhO,EAAMG,EAAMqF,EAAMc,EAAM8E,EAAMP,EAAaS,EAAMC,EAAMgB,EAAMf,EAAMmB,EAAMC,EAAMC,EAAMwB,GAE7L,CAeI,wBAAOE,CAAkBpM,EAAa1C,EAASC,EAAa0M,EAAQrB,GAChE7L,EAAaiD,EAAaC,IAC1B,MAAMpC,EAAOjE,EAAkB0D,EAASlG,EAAK0G,kBAAmB1G,EAAK2G,oBAC/DC,EAAO/E,EACPoK,EAAOzJ,EAAkB2D,EAAanG,EAAK0G,kBAAmB1G,EAAK2G,oBACnEoG,EAAOlL,EAEb,OAAOlB,EADKX,EAAKiV,iCAAiCrM,EAAY9B,UAAWL,EAAMG,EAAMqF,EAAMc,EAAMpL,EAAckR,GAAS7P,EAAWwO,GAAW,EAAI7P,EAAc6P,IAExK,GAGA,MAAM0D,GAA0D,oBAAzB3Q,qBACjC,CAAEC,SAAUA,OAAUC,WAAYA,QAClC,IAAIF,sBAAqB/C,GAAOxB,EAAKmV,sBAAsB3T,IAAQ,K,OAIzE,MAAM4T,EAEF,aAAO/M,CAAO7G,GACVA,KAAc,EACd,MAAMI,EAAM0G,OAAOC,OAAO6M,EAAW5M,WAGrC,OAFA5G,EAAIkF,UAAYtF,EAChB0T,GAAuB1Q,SAAS5C,EAAKA,EAAIkF,UAAWlF,GAC7CA,CACf,CAEI6G,kBAAAA,GACI,MAAMjH,EAAMoG,KAAKd,UAGjB,OAFAc,KAAKd,UAAY,EACjBoO,GAAuBzQ,WAAWmD,MAC3BpG,CACf,CAEIkH,IAAAA,GACI,MAAMlH,EAAMoG,KAAKa,qBACjBzI,EAAKmV,sBAAsB3T,EACnC,CAWI6T,kBAAAA,GAEI,OAAe,IADHrV,EAAKsV,8BAA8B1N,KAAKd,UAE5D,CAWIyO,yBAAAA,GAEI,OAAe,IADHvV,EAAKwV,qCAAqC5N,KAAKd,UAEnE,CAWI2O,kBAAAA,GAEI,OAAe,IADHzV,EAAK0V,8BAA8B9N,KAAKd,UAE5D,CAWI6O,iBAAAA,GAEI,OAAe,IADH3V,EAAK4V,6BAA6BhO,KAAKd,UAE3D,CAWI+O,iBAAAA,GAEI,OAAe,IADH7V,EAAK8V,6BAA6BlO,KAAKd,UAE3D,CAWIiP,YAAAA,GAEI,OAAe,IADH/V,EAAKgW,wBAAwBpO,KAAKd,UAEtD,CAWImP,yBAAAA,GAEI,OAAe,IADHjW,EAAKkW,qCAAqCtO,KAAKd,UAEnE,CAWIqP,aAAAA,GAEI,OAAe,IADHnW,EAAKoW,yBAAyBxO,KAAKd,UAEvD,CAWIuP,uBAAAA,GAEI,OAAe,IADHrW,EAAKsW,mCAAmC1O,KAAKd,UAEjE,CAWIyP,+BAAAA,GAEI,OAAe,IADHvW,EAAKwW,2CAA2C5O,KAAKd,UAEzE,CAWI2P,sBAAAA,GAEI,OAAe,IADHzW,EAAK0W,kCAAkC9O,KAAKd,UAEhE,CAWI6P,+BAAAA,GAEI,OAAe,IADH3W,EAAK4W,2CAA2ChP,KAAKd,UAEzE,CAWI+P,kCAAAA,GAEI,OAAe,IADH7W,EAAK8W,8CAA8ClP,KAAKd,UAE5E,CAWIiQ,oBAAAA,GAEI,OAAe,IADH/W,EAAKgX,gCAAgCpP,KAAKd,UAE9D,CAOImQ,QAAAA,GACI,IAAI3N,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAKkX,oBAAoB9Q,EAAQwB,KAAKd,WACtC,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,CAOI4N,IAAAA,GACI,MAAMvW,EAAMZ,EAAKoX,gBAAgBxP,KAAKd,WACtC,OAAOsO,EAAW/M,OAAOzH,EACjC,CASI,gBAAOyW,CAAUC,GACb,IACI,MAAMlR,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOX,EAAkBwR,EAAOtX,EAAK0G,mBACrCE,EAAO/E,EACb7B,EAAKuX,qBAAqBnR,EAAQK,EAAMG,GACxC,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAOoO,EAAW/M,OAAOtB,EACrC,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CAQI,iBAAO6D,CAAWsN,GACd,IACI,MAAMpR,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkBgV,EAAQxX,EAAK0G,kBAAmB1G,EAAK2G,oBAC9DC,EAAO/E,EACb7B,EAAKyX,sBAAsBrR,EAAQK,EAAMG,GACzC,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAOoO,EAAW/M,OAAOtB,EACrC,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CAOIqR,OAAAA,GACI,IACI,MAAMtR,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAK2X,mBAAmBvR,EAAQwB,KAAKd,WACrC,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GACpCoM,EAAKrP,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAW6R,GAErB,IAAIoF,EAAKxQ,EAAoBL,EAAIC,GAAItF,QAErC,OADA1B,EAAKyJ,gBAAgB1C,EAAS,EAALC,EAAQ,GAC1B4Q,CACnB,CAAU,QACE5X,EAAKqG,gCAAgC,GACjD,CACA,CAOIvC,QAAAA,GACI,IAAIwF,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAK6X,oBAAoBzR,EAAQwB,KAAKd,WACtC,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,GAGA,MAAMuO,GAAgE,oBAAzBvT,qBACvC,CAAEC,SAAUA,OAAUC,WAAYA,QAClC,IAAIF,sBAAqB/C,GAAOxB,EAAK+X,4BAA4BvW,IAAQ,K,OAI/E,MAAMwW,EAEF,aAAO3P,CAAO7G,GACVA,KAAc,EACd,MAAMI,EAAM0G,OAAOC,OAAOyP,EAAiBxP,WAG3C,OAFA5G,EAAIkF,UAAYtF,EAChBsW,GAA6BtT,SAAS5C,EAAKA,EAAIkF,UAAWlF,GACnDA,CACf,CAEI6G,kBAAAA,GACI,MAAMjH,EAAMoG,KAAKd,UAGjB,OAFAc,KAAKd,UAAY,EACjBgR,GAA6BrT,WAAWmD,MACjCpG,CACf,CAEIkH,IAAAA,GACI,MAAMlH,EAAMoG,KAAKa,qBACjBzI,EAAK+X,4BAA4BvW,EACzC,CASI,iBAAO0I,CAAW+N,GACd,IACI,MAAM7R,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkByV,EAAQjY,EAAK0G,kBAAmB1G,EAAK2G,oBAC9DC,EAAO/E,EACb7B,EAAKkY,4BAA4B9R,EAAQK,EAAMG,GAC/C,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAOgR,EAAiB3P,OAAOtB,EAC3C,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CAOIvC,QAAAA,GACI,IAAIwF,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAKmY,0BAA0B/R,EAAQwB,KAAKd,WAC5C,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,CAUI6O,OAAAA,CAAQpP,GACJ,IACI,MAAM5C,EAASpG,EAAKqG,iCAAiC,IACrDV,EAAaqD,EAAUC,IACvBjJ,EAAKqY,yBAAyBjS,EAAQwB,KAAKd,UAAWkC,EAASlC,WAC/D,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAO4K,GAAgBvJ,OAAOtB,EAC1C,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CASIiS,OAAAA,CAAQtP,GACJrD,EAAaqD,EAAUC,IAEvB,OAAe,IADHjJ,EAAKuY,yBAAyB3Q,KAAKd,UAAWkC,EAASlC,UAE3E,GAGA,MAAM0R,GAA+D,oBAAzBjU,qBACtC,CAAEC,SAAUA,OAAUC,WAAYA,QAClC,IAAIF,sBAAqB/C,GAAOxB,EAAKyY,2BAA2BjX,IAAQ,K,OAI9E,MAAMkX,EAEF,aAAOrQ,CAAO7G,GACVA,KAAc,EACd,MAAMI,EAAM0G,OAAOC,OAAOmQ,EAAgBlQ,WAG1C,OAFA5G,EAAIkF,UAAYtF,EAChBgX,GAA4BhU,SAAS5C,EAAKA,EAAIkF,UAAWlF,GAClDA,CACf,CAEI6G,kBAAAA,GACI,MAAMjH,EAAMoG,KAAKd,UAGjB,OAFAc,KAAKd,UAAY,EACjB0R,GAA4B/T,WAAWmD,MAChCpG,CACf,CAEIkH,IAAAA,GACI,MAAMlH,EAAMoG,KAAKa,qBACjBzI,EAAKyY,2BAA2BjX,EACxC,CAMIqL,UAAAA,CAAW+D,EAAYR,GACnB,IACI,MAAMhK,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkBoO,EAAY5Q,EAAK0G,kBAAmB1G,EAAK2G,oBAClEC,EAAO/E,EACPoK,EAAOzJ,EAAkB4N,EAAapQ,EAAK0G,kBAAmB1G,EAAK2G,oBACnEoG,EAAOlL,EACb7B,EAAK2Y,2BAA2BvS,EAAQwB,KAAKd,UAAWL,EAAMG,EAAMqF,EAAMc,GAC1E,IAAIhG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAO4R,EAAMvQ,OAAOtB,EAChC,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CASI,iBAAO6D,CAAW+N,GACd,IACI,MAAM7R,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkByV,EAAQjY,EAAK0G,kBAAmB1G,EAAK2G,oBAC9DC,EAAO/E,EACb7B,EAAK6Y,2BAA2BzS,EAAQK,EAAMG,GAC9C,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAO0R,EAAgBrQ,OAAOtB,EAC1C,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CAOIvC,QAAAA,GACI,IAAIwF,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAK8Y,yBAAyB1S,EAAQwB,KAAKd,WAC3C,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,CAOIwP,YAAAA,GACI,MAAMnY,EAAMZ,EAAKgZ,6BAA6BpR,KAAKd,WACnD,OAAO2L,OAAOC,QAAQ,GAAI9R,EAClC,CAOIqY,KAAAA,GACI,IAAI3P,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAKkZ,sBAAsB9S,EAAQwB,KAAKd,WACxC,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,CAaI4P,kBAAAA,CAAmBvQ,EAAagI,EAAYR,GACxC,IAAIgJ,EACAC,EACJ,IACI,MAAMjT,EAASpG,EAAKqG,iCAAiC,IACrDV,EAAaiD,EAAaC,IAC1B,MAAMpC,EAAOjE,EAAkBoO,EAAY5Q,EAAK0G,kBAAmB1G,EAAK2G,oBAClEC,EAAO/E,EACPoK,EAAOzJ,EAAkB4N,EAAapQ,EAAK0G,kBAAmB1G,EAAK2G,oBACnEoG,EAAOlL,EACb7B,EAAKsZ,mCAAmClT,EAAQwB,KAAKd,UAAW8B,EAAY9B,UAAWL,EAAMG,EAAMqF,EAAMc,GACzG,IAAIhG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GACpCoM,EAAKrP,IAAkBiD,EAAS,EAAI,GACpCmT,EAAKpW,IAAkBiD,EAAS,EAAI,GACpC2L,EAAOhL,EACPoM,EAAOnM,EACX,GAAIuS,EAEA,MADAxH,EAAO,EAAGoB,EAAO,EACXxS,EAAW6R,GAIrB,OAFA4G,EAAcrH,EACdsH,EAAclG,EACP5R,EAAmBwQ,EAAMoB,EAC5C,CAAU,QACEnT,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgB2P,EAAaC,EAAa,EAC3D,CACA,GAGA,MAAMG,GAAyD,oBAAzBjV,qBAChC,CAAEC,SAAUA,OAAUC,WAAYA,QAClC,IAAIF,sBAAqB/C,GAAOxB,EAAKyZ,qBAAqBjY,IAAQ,K,OAIxE,MAAMkY,EAEF,aAAOrR,CAAO7G,GACVA,KAAc,EACd,MAAMI,EAAM0G,OAAOC,OAAOmR,EAAUlR,WAGpC,OAFA5G,EAAIkF,UAAYtF,EAChBgY,GAAsBhV,SAAS5C,EAAKA,EAAIkF,UAAWlF,GAC5CA,CACf,CAEI6G,kBAAAA,GACI,MAAMjH,EAAMoG,KAAKd,UAGjB,OAFAc,KAAKd,UAAY,EACjB0S,GAAsB/U,WAAWmD,MAC1BpG,CACf,CAEIkH,IAAAA,GACI,MAAMlH,EAAMoG,KAAKa,qBACjBzI,EAAKyZ,qBAAqBjY,EAClC,CAWI,WAAO0M,CAAKtF,EAAaxE,GACrBuB,EAAaiD,EAAaC,IAC1B,MAAMpC,EAAOX,EAAkB1B,EAASpE,EAAK0G,mBACvCE,EAAO/E,EACPjB,EAAMZ,EAAKmO,gBAAgBvF,EAAY9B,UAAWL,EAAMG,GAC9D,OAAO8S,EAAUrR,OAAOzH,EAChC,CAWI8I,MAAAA,CAAOvK,EAASiF,GACZuB,EAAaxG,EAAS8O,GACtB,MAAMxH,EAAOX,EAAkB1B,EAASpE,EAAK0G,mBACvCE,EAAO/E,EAEb,OAAe,IADH7B,EAAK2Z,iBAAiB/R,KAAKd,UAAW3H,EAAQ2H,UAAWL,EAAMG,EAEnF,CASI,kBAAOuC,CAAYQ,GACf,MAAMlD,EAAOjE,EAAkBmH,EAAW3J,EAAK0G,kBAAmB1G,EAAK2G,oBACjEC,EAAO/E,EACPjB,EAAMZ,EAAK4Z,sBAAsBnT,EAAMG,GAC7C,OAAO8S,EAAUrR,OAAOzH,EAChC,CAOIyI,SAAAA,GACI,IAAIC,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAK6Z,oBAAoBzT,EAAQwB,KAAKd,WACtC,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,GAGA,MAAMuQ,GAA2D,oBAAzBvV,qBAClC,CAAEC,SAAUA,OAAUC,WAAYA,QAClC,IAAIF,sBAAqB/C,GAAOxB,EAAK+Z,uBAAuBvY,IAAQ,K,OAO1E,MAAMwY,EAEF,aAAO3R,CAAO7G,GACVA,KAAc,EACd,MAAMI,EAAM0G,OAAOC,OAAOyR,EAAYxR,WAGtC,OAFA5G,EAAIkF,UAAYtF,EAChBsY,GAAwBtV,SAAS5C,EAAKA,EAAIkF,UAAWlF,GAC9CA,CACf,CAEI6G,kBAAAA,GACI,MAAMjH,EAAMoG,KAAKd,UAGjB,OAFAc,KAAKd,UAAY,EACjBgT,GAAwBrV,WAAWmD,MAC5BpG,CACf,CAEIkH,IAAAA,GACI,MAAMlH,EAAMoG,KAAKa,qBACjBzI,EAAK+Z,uBAAuBvY,EACpC,CASI,iBAAO0I,CAAW+P,GACd,IACI,MAAM7T,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkByX,EAAaja,EAAK0G,kBAAmB1G,EAAK2G,oBACnEC,EAAO/E,EACb7B,EAAKka,uBAAuB9T,EAAQK,EAAMG,GAC1C,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAOgT,EAAY3R,OAAOtB,EACtC,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CAQIvC,QAAAA,GACI,IAAIwF,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAKma,qBAAqB/T,EAAQwB,KAAKd,WACvC,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,CAWI6Q,aAAAA,GACI,IAAI9Q,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAKqa,0BAA0BjU,EAAQwB,KAAKd,WAC5C,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,CAOI+Q,eAAAA,GACI,IAAIhR,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAKua,4BAA4BnU,EAAQwB,KAAKd,WAC9C,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,GAGA,MAAMiR,GAA4D,oBAAzBjW,qBACnC,CAAEC,SAAUA,OAAUC,WAAYA,QAClC,IAAIF,sBAAqB/C,GAAOxB,EAAKya,wBAAwBjZ,IAAQ,K,OAI3E,MAAMkZ,EAEF,aAAOrS,CAAO7G,GACVA,KAAc,EACd,MAAMI,EAAM0G,OAAOC,OAAOmS,EAAalS,WAGvC,OAFA5G,EAAIkF,UAAYtF,EAChBgZ,GAAyBhW,SAAS5C,EAAKA,EAAIkF,UAAWlF,GAC/CA,CACf,CAEI6G,kBAAAA,GACI,MAAMjH,EAAMoG,KAAKd,UAGjB,OAFAc,KAAKd,UAAY,EACjB0T,GAAyB/V,WAAWmD,MAC7BpG,CACf,CAEIkH,IAAAA,GACI,MAAMlH,EAAMoG,KAAKa,qBACjBzI,EAAKya,wBAAwBjZ,EACrC,CAOI,yBAAOmZ,GACH,MAAM/Z,EAAMZ,EAAK4a,kCACjB,OAAOF,EAAarS,OAAOzH,EACnC,CAOI,gCAAOia,GACH,MAAMja,EAAMZ,EAAK8a,yCACjB,OAAOJ,EAAarS,OAAOzH,EACnC,CAOI,yBAAOma,GACH,MAAMna,EAAMZ,EAAKgb,kCACjB,OAAON,EAAarS,OAAOzH,EACnC,CAOI,wBAAOqa,GACH,MAAMra,EAAMZ,EAAKkb,iCACjB,OAAOR,EAAarS,OAAOzH,EACnC,CAOI,wBAAOua,GACH,MAAMva,EAAMZ,EAAKob,iCACjB,OAAOV,EAAarS,OAAOzH,EACnC,CAOI,mBAAOya,GACH,MAAMza,EAAMZ,EAAKsb,4BACjB,OAAOZ,EAAarS,OAAOzH,EACnC,CAOI,gCAAO2a,GACH,MAAM3a,EAAMZ,EAAKwb,yCACjB,OAAOd,EAAarS,OAAOzH,EACnC,CAOI,oBAAO6a,GACH,MAAM7a,EAAMZ,EAAK0b,6BACjB,OAAOhB,EAAarS,OAAOzH,EACnC,CAOI,8BAAO+a,GACH,MAAM/a,EAAMZ,EAAK4b,uCACjB,OAAOlB,EAAarS,OAAOzH,EACnC,CAOI,sCAAOib,GACH,MAAMjb,EAAMZ,EAAK8b,+CACjB,OAAOpB,EAAarS,OAAOzH,EACnC,CAOI,6BAAOmb,GACH,MAAMnb,EAAMZ,EAAKgc,sCACjB,OAAOtB,EAAarS,OAAOzH,EACnC,CAOI,sCAAOqb,GACH,MAAMrb,EAAMZ,EAAKkc,+CACjB,OAAOxB,EAAarS,OAAOzH,EACnC,CAOI,yCAAOub,GACH,MAAMvb,EAAMZ,EAAKoc,kDACjB,OAAO1B,EAAarS,OAAOzH,EACnC,CAOI,2BAAOyb,GACH,MAAMzb,EAAMZ,EAAKsc,oCACjB,OAAO5B,EAAarS,OAAOzH,EACnC,CAOI2b,oBAAAA,GAEI,OAAe,IADHvc,EAAKwc,kCAAkC5U,KAAKd,UAEhE,CAOI2V,2BAAAA,GAEI,OAAe,IADHzc,EAAK0c,yCAAyC9U,KAAKd,UAEvE,CAOI6V,oBAAAA,GAEI,OAAe,IADH3c,EAAK4c,kCAAkChV,KAAKd,UAEhE,CAOI+V,mBAAAA,GAEI,OAAe,IADH7c,EAAK8c,iCAAiClV,KAAKd,UAE/D,CAOIiW,mBAAAA,GAEI,OAAe,IADH/c,EAAKgd,iCAAiCpV,KAAKd,UAE/D,CAOImW,cAAAA,GAEI,OAAe,IADHjd,EAAKkd,4BAA4BtV,KAAKd,UAE1D,CAOIqW,2BAAAA,GAEI,OAAe,IADHnd,EAAKod,yCAAyCxV,KAAKd,UAEvE,CAOIuW,eAAAA,GAEI,OAAe,IADHrd,EAAKsd,6BAA6B1V,KAAKd,UAE3D,CAOIyW,yBAAAA,GAEI,OAAe,IADHvd,EAAKwd,uCAAuC5V,KAAKd,UAErE,CAOI2W,iCAAAA,GAEI,OAAe,IADHzd,EAAK0d,+CAA+C9V,KAAKd,UAE7E,CAOI6W,wBAAAA,GAEI,OAAe,IADH3d,EAAK4d,sCAAsChW,KAAKd,UAEpE,CAOI+W,iCAAAA,GAEI,OAAe,IADH7d,EAAK8d,+CAA+ClW,KAAKd,UAE7E,CAOIiX,oCAAAA,GAEI,OAAe,IADH/d,EAAKge,kDAAkDpW,KAAKd,UAEhF,CAOImX,sBAAAA,GAEI,OAAe,IADHje,EAAKke,oCAAoCtW,KAAKd,UAElE,CAOImQ,QAAAA,GACI,IAAI3N,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAKme,sBAAsB/X,EAAQwB,KAAKd,WACxC,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,CAOI4N,IAAAA,GACI,MAAMvW,EAAMZ,EAAKoe,kBAAkBxW,KAAKd,WACxC,OAAO4T,EAAarS,OAAOzH,EACnC,CASI,gBAAOyW,CAAUC,GACb,IACI,MAAMlR,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOX,EAAkBwR,EAAOtX,EAAK0G,mBACrCE,EAAO/E,EACb7B,EAAKqe,uBAAuBjY,EAAQK,EAAMG,GAC1C,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAO0T,EAAarS,OAAOtB,EACvC,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CASI,iBAAO6D,CAAWsN,GACd,IACI,MAAMpR,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkBgV,EAAQxX,EAAK0G,kBAAmB1G,EAAK2G,oBAC9DC,EAAO/E,EACb7B,EAAKse,wBAAwBlY,EAAQK,EAAMG,GAC3C,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAWqG,GAErB,OAAO0T,EAAarS,OAAOtB,EACvC,CAAU,QACE/G,EAAKqG,gCAAgC,GACjD,CACA,CAOIqR,OAAAA,GACI,IACI,MAAMtR,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAKue,qBAAqBnY,EAAQwB,KAAKd,WACvC,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GACpCoM,EAAKrP,IAAkBiD,EAAS,EAAI,GAExC,GADSjD,IAAkBiD,EAAS,EAAI,GAEpC,MAAMzF,EAAW6R,GAErB,IAAIoF,EAAKxQ,EAAoBL,EAAIC,GAAItF,QAErC,OADA1B,EAAKyJ,gBAAgB1C,EAAS,EAALC,EAAQ,GAC1B4Q,CACnB,CAAU,QACE5X,EAAKqG,gCAAgC,GACjD,CACA,CAOIvC,QAAAA,GACI,IAAIwF,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAKwe,sBAAsBpY,EAAQwB,KAAKd,WACxC,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,GAGA,MAAMkV,GAAuD,oBAAzBla,qBAC9B,CAAEC,SAAUA,OAAUC,WAAYA,QAClC,IAAIF,sBAAqB/C,GAAOxB,EAAK0e,mBAAmBld,IAAQ,K,OAGtE,MAAMmd,EAEF,aAAOtW,CAAO7G,GACVA,KAAc,EACd,MAAMI,EAAM0G,OAAOC,OAAOoW,EAAQnW,WAGlC,OAFA5G,EAAIkF,UAAYtF,EAChBid,GAAoBja,SAAS5C,EAAKA,EAAIkF,UAAWlF,GAC1CA,CACf,CAEI6G,kBAAAA,GACI,MAAMjH,EAAMoG,KAAKd,UAGjB,OAFAc,KAAKd,UAAY,EACjB2X,GAAoBha,WAAWmD,MACxBpG,CACf,CAEIkH,IAAAA,GACI,MAAMlH,EAAMoG,KAAKa,qBACjBzI,EAAK0e,mBAAmBld,EAChC,CASI,uBAAOmH,CAAiBC,GACpBjD,EAAaiD,EAAaC,IAC1B,MAAMjI,EAAMZ,EAAK8N,uBAAuBlF,EAAY9B,WACpD,OAAO6X,EAAQtW,OAAOzH,EAC9B,CASI,kBAAOuI,CAAYH,GACf,MAAMvC,EAAOjE,EAAkBwG,EAAUhJ,EAAK0G,kBAAmB1G,EAAK2G,oBAChEC,EAAO/E,EACPjB,EAAMZ,EAAK4e,oBAAoBnY,EAAMG,GAC3C,OAAO+X,EAAQtW,OAAOzH,EAC9B,CAOIyI,SAAAA,GACI,IAAIC,EACAC,EACJ,IACI,MAAMnD,EAASpG,EAAKqG,iCAAiC,IACrDrG,EAAK6e,kBAAkBzY,EAAQwB,KAAKd,WACpC,IAAIC,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GAGxC,OAFAkD,EAAcvC,EACdwC,EAAcvC,EACPzF,EAAmBwF,EAAIC,EAC1C,CAAU,QACEhH,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBH,EAAaC,EAAa,EAC3D,CACA,CAOIwE,UAAAA,GACI,MAAMnN,EAAMZ,EAAKkJ,sBAAsBtB,KAAKd,WAC5C,OAAOmH,EAAQ5F,OAAOzH,EAC9B,CASIwX,OAAAA,CAAQzJ,GACJ,IAAImQ,EACAC,EACJ,IACI,MAAM3Y,EAASpG,EAAKqG,iCAAiC,IAC/CI,EAAOjE,EAAkBmM,EAAY3O,EAAK0G,kBAAmB1G,EAAK2G,oBAClEC,EAAO/E,EACb7B,EAAKgf,gBAAgB5Y,EAAQwB,KAAKd,UAAWL,EAAMG,GACnD,IAAIG,EAAK5D,IAAkBiD,EAAS,EAAI,GACpCY,EAAK7D,IAAkBiD,EAAS,EAAI,GACpCoM,EAAKrP,IAAkBiD,EAAS,EAAI,GACpCmT,EAAKpW,IAAkBiD,EAAS,EAAI,GACpCyL,EAAO9K,EACP+K,EAAO9K,EACX,GAAIuS,EAEA,MADA1H,EAAO,EAAGC,EAAO,EACXnR,EAAW6R,GAIrB,OAFAsM,EAAcjN,EACdkN,EAAcjN,EACPvQ,EAAmBsQ,EAAMC,EAC5C,CAAU,QACE9R,EAAKqG,gCAAgC,IACrCrG,EAAKyJ,gBAAgBqV,EAAaC,EAAa,EAC3D,CACA,GAGAE,eAAeC,EAAWjgB,EAAQuS,GAC9B,GAAwB,mBAAb2N,UAA2BlgB,aAAkBkgB,SAAU,CAC9D,GAAgD,mBAArCC,YAAYC,qBACnB,IACI,aAAaD,YAAYC,qBAAqBpgB,EAAQuS,EAEtE,CAAc,MAAO3J,GACL,GAA0C,oBAAtC5I,EAAOqgB,QAAQ1a,IAAI,gBAInB,MAAMiD,EAHN0X,QAAQC,KAAK,oMAAqM3X,EAKtO,CAGQ,MAAMyP,QAAcrY,EAAOwgB,cAC3B,aAAaL,YAAYM,YAAYpI,EAAO9F,EAEpD,CAAW,CACH,MAAM5L,QAAiBwZ,YAAYM,YAAYzgB,EAAQuS,GAEvD,OAAI5L,aAAoBwZ,YAAYO,SACzB,CAAE/Z,WAAU3G,UAGZ2G,CAEnB,CACA,CAEA,SAASga,IACL,MAAMpO,EAAU,CAChBA,IAAc,CAAC,GAgcf,OA/bAA,EAAQqO,IAAIC,2BAA6B,SAAS7a,GAC9CtE,EAAWsE,EACnB,EACIuM,EAAQqO,IAAIE,2BAA6B,WAAa,OAAOrY,GAAY,WAErE,OAAO/F,EADK,IAAIqe,eAExB,GAAOC,UAAU,EACbzO,EAAQqO,IAAIK,wCAA0C,WAAa,OAAOxY,GAAY,SAAUzC,EAAMC,EAAMO,GACxGpF,EAAU4E,GAAMkb,iBAAiB5e,EAAmB2D,EAAMO,GAClE,GAAOwa,UAAU,EACbzO,EAAQqO,IAAIO,4BAA8B,WAAa,OAAO1Y,GAAY,SAAUzC,EAAMC,EAAMO,EAAMuC,EAAMqY,EAAMC,GAC9GjgB,EAAU4E,GAAMsb,KAAKhf,EAAmB2D,EAAMO,GAAOlE,EAAmByG,EAAMqY,GAAgB,IAATC,EAC7F,GAAOL,UAAU,EACbzO,EAAQqO,IAAIW,4BAA8B,WAAa,OAAO9Y,GAAY,SAAUzC,GAChF5E,EAAU4E,GAAMwb,MACxB,GAAOR,UAAU,EACbzO,EAAQqO,IAAIa,gCAAkC,WAAa,OAAOhZ,GAAY,SAAUzC,GAEpF,OAAOtD,EADKtB,EAAU4E,GAAM0b,SAEpC,GAAOV,UAAU,EACbzO,EAAQqO,IAAIe,8BAAgC,WAAa,OAAOlZ,GAAY,SAAUzC,GAElF,OADY5E,EAAU4E,GAAM4b,MAEpC,GAAOZ,UAAU,EACbzO,EAAQqO,IAAIiB,2BAA6B,WAErC,OAAOnf,EADK,IAAI2G,OAExB,EACIkJ,EAAQqO,IAAIkB,sBAAwB,SAAS9b,EAAMC,GAE/C,OAAOvD,EADKJ,EAAmB0D,EAAMC,GAE7C,EACIsM,EAAQqO,IAAImB,2BAA6B,WAAa,OAAOtZ,GAAY,SAAUzC,EAAMC,EAAMO,GAE3F,OADYwb,QAAQ5e,IAAIhC,EAAU4E,GAAO5E,EAAU6E,GAAO7E,EAAUoF,GAE5E,GAAOwa,UAAU,EACbzO,EAAQqO,IAAIqB,2BAA6B,WAAa,OAAOxZ,GAAY,WAErE,OAAO/F,EADK,IAAIwf,QAExB,GAAOlB,UAAU,EACbzO,EAAQqO,IAAIuB,4BAA8B,SAASnc,GAE/C,OAAOtD,EADKtB,EAAU4E,GAE9B,EACIuM,EAAQqO,IAAIwB,2BAA6B,WAAa,OAAO3Z,GAAY,WAErE,OAAO/F,EADK,IAAI2f,gBAExB,GAAOrB,UAAU,EACbzO,EAAQqO,IAAI0B,8BAAgC,SAAStc,GAEjD,OAAOtD,EADKtB,EAAU4E,GAAMuc,OAEpC,EACIhQ,EAAQqO,IAAI4B,8BAAgC,WAAa,OAAO/Z,GAAY,SAAUzC,EAAMC,EAAMO,EAAMuC,EAAMqY,GAC1GhgB,EAAU4E,GAAMyc,OAAOngB,EAAmB2D,EAAMO,GAAOlE,EAAmByG,EAAMqY,GACxF,GAAOJ,UAAU,EACbzO,EAAQqO,IAAI8B,2CAA6C,SAAS1c,GAC9D,IAAI2c,EACJ,IACIA,EAASvhB,EAAU4E,aAAiBka,QAChD,CAAU,MAAOhb,GACLyd,GAAS,CACrB,CAEQ,OADYA,CAEpB,EACIpQ,EAAQqO,IAAIgC,8BAAgC,SAAS5c,GAEjD,OADY5E,EAAU4E,GAAM4b,MAEpC,EACIrP,EAAQqO,IAAIiC,2BAA6B,SAAS7c,EAAMC,GACpD,MACM+G,EAAOzJ,EADDnC,EAAU6E,GAAMlG,IACQgB,EAAK0G,kBAAmB1G,EAAK2G,oBAC3DoG,EAAOlL,EACbsB,IAAkB8B,EAAO,EAAI,GAAK8H,EAClC5J,IAAkB8B,EAAO,EAAI,GAAKgH,CAC1C,EACIuF,EAAQqO,IAAIkC,+BAAiC,SAAS9c,GAElD,OAAOtD,EADKtB,EAAU4E,GAAMqa,QAEpC,EACI9N,EAAQqO,IAAImC,gCAAkC,WAE1C,OAAOrgB,EADKsgB,OAAOC,SAE3B,EACI1Q,EAAQqO,IAAIsC,2BAA6B,WAAa,OAAOza,GAAY,SAAUzC,EAAMC,GAErF,OAAOvD,EADKsf,QAAQrc,IAAIvE,EAAU4E,GAAO5E,EAAU6E,IAE3D,GAAO+a,UAAU,EACbzO,EAAQqO,IAAIuC,uBAAyB,SAASnd,GAE1C,MADwC,mBAArB5E,EAAU4E,EAErC,EACIuM,EAAQqO,IAAIwC,4BAA8B,WAAa,OAAO3a,GAAY,SAAUzC,EAAMC,GAEtF,OAAOvD,EADKtB,EAAU4E,GAAMlB,KAAK1D,EAAU6E,IAEnD,GAAO+a,UAAU,EACbzO,EAAQqO,IAAIyC,qBAAuB,SAASrd,GACxC,MAAM3B,EAAMjD,EAAU4E,GAEtB,MAD4B,iBAAT3B,GAA6B,OAARA,CAEhD,EACIkO,EAAQqO,IAAI0C,4BAA8B,SAAStd,GAE/C,OAAOtD,EADKtB,EAAU4E,GAAMud,KAEpC,EACIhR,EAAQqO,IAAI4C,4BAA8B,WAAa,OAAO/a,GAAY,SAAUzC,GAEhF,OAAOtD,EADKtB,EAAU4E,GAAMud,OAEpC,GAAOvC,UAAU,EACbzO,EAAQqO,IAAI6C,4BAA8B,SAASzd,GAE/C,OADY5E,EAAU4E,GAAM0d,IAEpC,EACInR,EAAQqO,IAAI+C,6BAA+B,SAAS3d,GAEhD,OAAOtD,EADKtB,EAAU4E,GAAM4d,MAEpC,EACIrR,EAAQqO,IAAIiD,6BAA+B,SAAS7d,GAChD5E,EAAU4E,GAAM8d,OACxB,EACIvR,EAAQqO,IAAImD,iCAAmC,WAAa,OAAOtb,GAAY,SAAUzC,GAErF,OAAOtD,EADKsC,KAAKC,UAAU7D,EAAU4E,IAE7C,GAAOgb,UAAU,EACbzO,EAAQqO,IAAIoD,sBAAwB,SAAShe,EAAMC,GAC/C,MAAMtD,EAAMvB,EAAU6E,GAChBtE,EAAsB,iBAATgB,EAAoBA,OAAMxB,EAC7C,IAAI6L,EAAOjJ,EAAWpC,GAAO,EAAI4B,EAAkB5B,EAAKZ,EAAK0G,kBAAmB1G,EAAK2G,oBACjFoG,EAAOlL,EACXsB,IAAkB8B,EAAO,EAAI,GAAK8H,EAClC5J,IAAkB8B,EAAO,EAAI,GAAKgH,CAC1C,EACIuF,EAAQqO,IAAIqD,2BAA6B,SAASje,EAAMC,GACpDqa,QAAQ4D,IAAI5hB,EAAmB0D,EAAMC,GAC7C,EACIsM,EAAQqO,IAAIuD,2BAA6B,SAASne,GAE9C,OAAOtD,EADK8Q,OAAOC,QAAQ,GAAIzN,GAEvC,EACIuM,EAAQqO,IAAIwD,4BAA8B,WAAa,OAAO3b,GAAY,SAAUzC,EAAMC,EAAMO,GAE5F,OAAO9D,EADKtB,EAAU4E,GAAMlB,KAAK1D,EAAU6E,GAAO7E,EAAUoF,IAEpE,GAAOwa,UAAU,EACbzO,EAAQqO,IAAIyD,sBAAwB,SAASre,GAEzC,OAAOtD,EADK4hB,GAAYlb,OAAOpD,GAEvC,EACIuM,EAAQqO,IAAI2D,4BAA8B,SAASve,GAE/C,OAAOtD,EADK8hB,EAAkBpb,OAAOpD,GAE7C,EACIuM,EAAQqO,IAAI6D,kBAAoB,SAASze,GAErC,OAAOtD,EADKkJ,GAAQxC,OAAOpD,GAEnC,EACIuM,EAAQqO,IAAI8D,kBAAoB,WAE5B,OAAOhiB,EADKiiB,EAAWC,uBAE/B,EACIrS,EAAQqO,IAAIiE,kBAAoB,WAE5B,OAAOniB,EADK3B,EAAKd,OAEzB,EACIsS,EAAQqO,IAAIkE,mCAAqC,SAAS9e,EAAMC,EAAMO,EAAMuC,GAExE,OAAOrG,EADK5C,EAAYsB,EAAU4E,GAAO5E,EAAU6E,GAAO7E,EAAUoF,GAAOuC,IAAS,GAE5F,EACIwJ,EAAQqO,IAAImE,qCAAuC,SAAS/e,GAExD,OAAOtD,EADK,IAAIzB,MAAM+E,IAAS,GAEvC,EACIuM,EAAQqO,IAAIoE,2BAA6B,SAAShf,EAAMC,EAAMO,GAC1DpF,EAAU4E,GAAMC,IAAS,GAAKvE,EAAW8E,EACjD,EACI+L,EAAQqO,IAAIqE,mBAAqB,SAASjf,GACtC,MAAMrD,EAAMjB,EAAWsE,GAAMM,SAC7B,GAAiB,GAAb3D,EAAIwD,MAEJ,OADAxD,EAAIkD,EAAI,GACD,EAGX,OADY,CAEpB,EACI0M,EAAQqO,IAAIsE,mCAAqC,WAAa,OAAOzc,GAAY,SAAUzC,GAEvF,OAAOtD,EADKtB,EAAU4E,GAAMwa,cAEpC,GAAOQ,UAAU,EACbzO,EAAQqO,IAAIuE,2BAA6B,SAASnf,GAE9C,OAAOtD,EADK,IAAIL,WAAWjB,EAAU4E,IAE7C,EACIuM,EAAQqO,IAAIwE,8BAAgC,SAASpf,GAEjD,OADY5E,EAAU4E,GAAMxE,MAEpC,EACI+Q,EAAQqO,IAAIyE,2BAA6B,SAASrf,EAAMC,GACpD,IACI,IAAIqf,EAAS,CAACzf,EAAGG,EAAMF,EAAGG,GAU1B,MAAMtE,EAAM,IAAIxB,SATNolB,CAACvf,EAAMC,KACb,MAAMJ,EAAIyf,EAAOzf,EACjByf,EAAOzf,EAAI,EACX,IACI,OAAOiD,EAAkBjD,EAAGyf,EAAOxf,EAAGE,EAAMC,EAChE,CAAkB,QACEqf,EAAOzf,EAAIA,CAC/B,KAGY,OAAOnD,EAAcf,EACjC,CAAU,QACE2jB,EAAOzf,EAAIyf,EAAOxf,EAAI,CAClC,CACA,EACIyM,EAAQqO,IAAI4E,2BAA6B,WAErC,OAAO9iB,EADK,IAAIzB,MAExB,EACIsR,EAAQqO,IAAI6E,4BAA8B,SAASzf,EAAMC,GAErD,OADY7E,EAAU4E,GAAM1E,KAAKF,EAAU6E,GAEnD,EACIsM,EAAQqO,IAAI8E,sBAAwB,SAAS1f,GAEzC,OAAOtD,EADKsD,EAEpB,EACIuM,EAAQqO,IAAI+E,2BAA6B,WAErC,OAAOjjB,EADK,IAAIT,MAExB,EACIsQ,EAAQqO,IAAIgF,6BAA+B,SAAS5f,EAAMC,GACtD,MACM+G,EAAOzJ,EADDnC,EAAU6E,GAAMb,MACQrE,EAAK0G,kBAAmB1G,EAAK2G,oBAC3DoG,EAAOlL,EACbsB,IAAkB8B,EAAO,EAAI,GAAK8H,EAClC5J,IAAkB8B,EAAO,EAAI,GAAKgH,CAC1C,EACIuF,EAAQqO,IAAIiF,6BAA+B,SAAS7f,EAAMC,GACtD,IAAI6f,EACAC,EACJ,IACID,EAAc9f,EACd+f,EAAc9f,EACdqa,QAAQ0F,MAAM1jB,EAAmB0D,EAAMC,GACnD,CAAU,QACElF,EAAKyJ,gBAAgBsb,EAAaC,EAAa,EAC3D,CACA,EACIxT,EAAQqO,IAAIqF,8BAAgC,SAASjgB,GAEjD,OAAOtD,EADKtB,EAAU4E,GAAM5D,OAEpC,EACImQ,EAAQqO,IAAIsF,kDAAoD,SAASlgB,EAAMC,EAAMO,GAEjF,OAAO9D,EADK,IAAIL,WAAWjB,EAAU4E,GAAOC,IAAS,EAAGO,IAAS,GAEzE,EACI+L,EAAQqO,IAAIuF,sCAAwC,WAAa,OAAO1d,GAAY,SAAUzC,EAAMC,GAChG7E,EAAU4E,GAAMogB,eAAe1kB,EAAWuE,GAClD,GAAO+a,UAAU,EACbzO,EAAQqO,IAAIyF,gCAAkC,SAASrgB,EAAMC,EAAMO,GAE/D,OAAO9D,EADKtB,EAAU4E,GAAMtC,SAASuC,IAAS,EAAGO,IAAS,GAElE,EACI+L,EAAQqO,IAAI0F,uCAAyC,WAAa,OAAO7d,GAAY,SAAUzC,EAAMC,GACjG7E,EAAU4E,GAAMugB,gBAAgBnlB,EAAU6E,GAClD,GAAO+a,UAAU,EACbzO,EAAQqO,IAAI4F,2BAA6B,SAASxgB,EAAMC,EAAMO,GAC1DpF,EAAU4E,GAAM5C,IAAIhC,EAAU6E,GAAOO,IAAS,EACtD,EACI+L,EAAQqO,IAAI6F,8BAAgC,SAASzgB,GAEjD,OAAOtD,EADKtB,EAAU4E,GAAM0gB,OAEpC,EACInU,EAAQqO,IAAI+F,+BAAiC,SAAS3gB,GAElD,OAAOtD,EADKtB,EAAU4E,GAAM4gB,QAEpC,EACIrU,EAAQqO,IAAIiG,gCAAkC,SAAS7gB,GAEnD,OAAOtD,EADKtB,EAAU4E,GAAM8gB,SAEpC,EACIvU,EAAQqO,IAAImG,4BAA8B,SAAS/gB,GAE/C,OAAOtD,EADKtB,EAAU4E,GAAMghB,KAEpC,EACIzU,EAAQqO,IAAIqG,qBAAuB,SAASjhB,GAExC,MADwC,iBAArB5E,EAAU4E,EAErC,EACIuM,EAAQqO,IAAIsG,+BAAiC,WAAa,OAAOze,GAAY,WAEzE,OAAO/F,EADK1C,OAAOmnB,QAE3B,GAAOnG,UAAU,EACbzO,EAAQqO,IAAIwG,gCAAkC,SAASphB,GAEnD,OAAOtD,EADKtB,EAAU4E,GAAMqhB,SAEpC,EACI9U,EAAQqO,IAAI0G,qCAAuC,SAASthB,GAExD,OAAOtD,EADK,IAAIL,WAAW2D,IAAS,GAE5C,EACIuM,EAAQqO,IAAI2G,8BAAgC,SAASvhB,GAEjD,OADY5E,EAAU4E,GAAMxE,MAEpC,EACI+Q,EAAQqO,IAAI4G,2BAA6B,SAASxhB,EAAMC,GAEpD,OAAOvD,EADKtB,EAAU4E,GAAMC,IAAS,GAE7C,EACIsM,EAAQqO,IAAI6G,4BAA8B,WAAa,OAAOhf,GAAY,WAEtE,OAAO/F,EADKglB,KAAKA,KAEzB,GAAO1G,UAAU,EACbzO,EAAQqO,IAAI+G,8BAAgC,WAAa,OAAOlf,GAAY,WAExE,OAAO/F,EADKklB,OAAOA,OAE3B,GAAO5G,UAAU,EACbzO,EAAQqO,IAAIiH,kCAAoC,WAAa,OAAOpf,GAAY,WAE5E,OAAO/F,EADKolB,WAAWA,WAE/B,GAAO9G,UAAU,EACbzO,EAAQqO,IAAImH,8BAAgC,WAAa,OAAOtf,GAAY,WAExE,OAAO/F,EADKslB,OAAOA,OAE3B,GAAOhH,UAAU,EACbzO,EAAQqO,IAAIqH,wBAA0B,SAASjiB,GAE3C,YADgC7E,IAApBC,EAAU4E,EAE9B,EACIuM,EAAQqO,IAAIsH,iCAAmC,SAASliB,EAAMC,GAE1D,OAAOvD,EADK,IAAIylB,SAAS7lB,EAAmB0D,EAAMC,IAE1D,EACIsM,EAAQqO,IAAIwH,2BAA6B,WAAa,OAAO3f,GAAY,SAAUzC,EAAMC,GAErF,OADY+b,QAAQqG,IAAIjnB,EAAU4E,GAAO5E,EAAU6E,GAE3D,GAAO+a,UAAU,EACbzO,EAAQqO,IAAI0H,6BAA+B,SAAStiB,GAEhD,OAAOtD,EADK6lB,MAAMnnB,EAAU4E,IAEpC,EACIuM,EAAQqO,IAAI4H,6BAA+B,SAASxiB,EAAMC,GAEtD,OAAOvD,EADKtB,EAAU4E,GAAMuiB,MAAMnnB,EAAU6E,IAEpD,EACIsM,EAAQqO,IAAI6H,wBAA0B,SAASziB,EAAMC,GACjD,MACM+G,EAAOzJ,EADDa,EAAYhD,EAAU6E,IACElF,EAAK0G,kBAAmB1G,EAAK2G,oBAC3DoG,EAAOlL,EACbsB,IAAkB8B,EAAO,EAAI,GAAK8H,EAClC5J,IAAkB8B,EAAO,EAAI,GAAKgH,CAC1C,EACIuF,EAAQqO,IAAI8H,iBAAmB,SAAS1iB,EAAMC,GAC1C,MAAM,IAAIhE,MAAMK,EAAmB0D,EAAMC,GACjD,EACIsM,EAAQqO,IAAI+H,mBAAqB,SAAS3iB,GACtC,MAAMtE,EAAWsE,EACzB,EACIuM,EAAQqO,IAAIgI,4BAA8B,SAAS5iB,EAAMC,EAAMO,GAE3D,OAAO9D,EADKtB,EAAU4E,GAAM6iB,KAAKznB,EAAU6E,GAAO7E,EAAUoF,IAEpE,EACI+L,EAAQqO,IAAIkI,4BAA8B,SAAS9iB,EAAMC,GAErD,OAAOvD,EADKtB,EAAU4E,GAAM6iB,KAAKznB,EAAU6E,IAEnD,EACIsM,EAAQqO,IAAImI,sCAAwC,SAAS/iB,GACzDgjB,eAAe5nB,EAAU4E,GACjC,EACIuM,EAAQqO,IAAIqI,sCAAwC,SAASjjB,GAEzD,OAAOtD,EADKtB,EAAU4E,GAAMgjB,eAEpC,EACIzW,EAAQqO,IAAIsI,+BAAiC,SAASljB,GAElD,OAAOtD,EADKvC,QAAQC,QAAQgB,EAAU4E,IAE9C,EACIuM,EAAQqO,IAAIuI,iCAAmC,WAE3C,OAAOzmB,EADK0mB,QAAQC,UAE5B,EACI9W,EAAQqO,IAAI0I,2BAA6B,SAAStjB,GAE9C,OAAOtD,EADK,IAAIyB,WAAW/C,EAAU4E,IAE7C,EACIuM,EAAQqO,IAAI2I,iCAAmC,SAASvjB,EAAMC,EAAMO,GAEhE,OAAO9D,EADK0mB,QAAQC,UAAUjoB,EAAU4E,GAAOC,EAAMO,GAE7D,EACI+L,EAAQqO,IAAI4I,6BAA+B,SAASxjB,GAEhD,OADY5E,EAAU4E,GAAMga,KAEpC,EACIzN,EAAQqO,IAAI6I,6BAA+B,SAASzjB,GAEhD,OAAOtD,EADKtB,EAAU4E,GAAM4d,MAEpC,EACIrR,EAAQqO,IAAI8I,iCAAmC,SAAS1jB,GACpD,MAOMgH,EAAOzJ,EAPD,+BAAiComB,mBAAoB,6OAO7B5oB,EAAK0G,kBAAmB1G,EAAK2G,oBAC3DoG,EAAOlL,EACbsB,IAAkB8B,EAAO,EAAI,GAAK8H,EAClC5J,IAAkB8B,EAAO,EAAI,GAAKgH,CAC1C,EACIuF,EAAQqO,IAAIgJ,2BAA6B,WAAa,OAAOnhB,GAAY,SAAUzC,EAAMC,GAErF,OAAOvD,EADK,IAAIpC,OAAOgC,EAAmB0D,EAAMC,IAExD,GAAO+a,UAAU,EACbzO,EAAQqO,IAAIiJ,oCAAsC,SAAS7jB,EAAMC,GAC7D7E,EAAU4E,GAAM8jB,UAAY1oB,EAAU6E,EAC9C,EACIsM,EAAQqO,IAAImJ,0BAA4B,SAAS/jB,EAAMC,EAAMO,GAEzD,OAAO9D,EADKzB,MAAM+oB,GAAG5oB,EAAU4E,GAAO5E,EAAU6E,GAAO7E,EAAUoF,IAEzE,EACI+L,EAAQqO,IAAIqJ,mCAAqC,WAAa,OAAOxhB,GAAY,SAAUzC,EAAMC,GAC7F7E,EAAU4E,GAAMlF,YAAYM,EAAU6E,GAC9C,GAAO+a,UAAU,EACbzO,EAAQqO,IAAIsJ,4BAA8B,SAASlkB,GAE/C,OAAOtD,EADKtB,EAAU4E,GAAMmkB,KAEpC,EACI5X,EAAQqO,IAAIwJ,yCAA2C,WAAa,OAAO3hB,GAAY,SAAUzC,EAAMC,EAAMO,GAEzG,OAAO9D,EADK,IAAI2nB,QAAQ/nB,EAAmB0D,EAAMC,GAAO7E,EAAUoF,IAE1E,GAAOwa,UAAU,EACbzO,EAAQqO,IAAI0J,oCAAsC,WAAa,OAAO7hB,GAAY,SAAUzC,EAAMC,GAC9F,MAAMtE,EAAMP,EAAU6E,GAAMskB,aAC5B,IAAIvd,EAAOjJ,EAAWpC,GAAO,EAAI4B,EAAkB5B,EAAKZ,EAAK0G,kBAAmB1G,EAAK2G,oBACjFoG,EAAOlL,EACXsB,IAAkB8B,EAAO,EAAI,GAAK8H,EAClC5J,IAAkB8B,EAAO,EAAI,GAAKgH,CAC1C,GAAOgU,UAAU,EACbzO,EAAQqO,IAAI4J,+BAAiC,SAASxkB,EAAMC,EAAMO,GAE9D,OAAO9D,EADKqD,EAAeC,EAAMC,EAAM,IAAKM,GAEpD,EACIgM,EAAQqO,IAAI6J,+BAAiC,SAASzkB,EAAMC,EAAMO,GAE9D,OAAO9D,EADKqD,EAAeC,EAAMC,EAAM,IAAKM,GAEpD,EAEWgM,CACX,CAEA,SAASmY,EAAkBnY,EAASoY,GAChCpY,EAAQqO,IAAI3gB,OAAS0qB,GAAgB,IAAIxK,YAAYyK,OAAO,CAACC,QAAQ,GAAGC,QAAQ,MAAMC,QAAO,GACjG,CAEA,SAASC,EAAoBrkB,EAAU3G,GAQnC,OAPAe,EAAO4F,EAASskB,QAChBtG,EAAWC,uBAAyB5kB,EACpCgI,EAAwB,KACxB/D,EAAqB,KACrB/B,EAAqB,KAErBnB,EAAKmqB,mBACEnqB,CACX,CAEA,SAASoqB,EAASnrB,EAAQ2qB,GACtB,QAAaxpB,IAATJ,EAAoB,OAAOA,EAE/B,MAAMwR,EAAUoO,IAEhB+J,EAAkBnY,EAASoY,GAErB3qB,aAAkBmgB,YAAYiL,SAChCprB,EAAS,IAAImgB,YAAYiL,OAAOprB,IAKpC,OAAOgrB,EAFU,IAAI7K,YAAYO,SAAS1gB,EAAQuS,GAEbvS,EACzC,CAEAggB,eAAe2E,EAAW0G,EAAOV,GAC7B,QAAaxpB,IAATJ,EAAoB,OAAOA,EAG/B,MAAMwR,EAAUoO,KAEK,iBAAV0K,GAA0C,mBAAZhB,SAA0BgB,aAAiBhB,SAA4B,mBAARiB,KAAsBD,aAAiBC,OAC3ID,EAAQ9C,MAAM8C,IAGlBX,EAAkBnY,EAASoY,GAE3B,MAAM,SAAEhkB,EAAQ,OAAE3G,SAAiBigB,QAAiBoL,EAAO9Y,GAE3D,OAAOyY,EAAoBrkB,EAAU3G,EACzC,CAEA,IAAIirB,EAAuB5hB,OAAOkiB,OAAO,CACrCC,UAAW,KACXriB,QAAS6F,EACTjE,UAAW1D,EACXgE,kBAAmBmZ,EACnBhY,MAAOmN,EACP/N,QAASA,GACT4B,aAAcyF,GACd5E,WAAYzE,GACZkG,qBAAsBR,GACtBgB,QAAS/I,GACTkkB,eAAgBC,GAChBvV,WAAYpK,GACZgN,iBAAkB4S,GAClBlS,gBAAiB9G,GACjB8H,UAAW9P,GACXoQ,YAAauJ,GACb7I,aAAcnU,GACdoY,QAAS1V,GACT4hB,QAASjH,EACTwG,SAAUA,EACV3iB,eAAgBF,EAChBF,eAAgBA,EAChBR,wBAAyBd,IAG7B,MAAM+kB,GAAY,wBC1nIb,MACDrjB,eAAgBsjB,GAAkB,QAClC3iB,GAAO,UACP4B,GAAS,kBACTM,GAAiB,MACjBmB,GAAK,aACLgB,GAAY,QACZue,GAAO,WACP1d,GAAU,qBACVyB,GAAoB,QACpBQ,GAAO,WACP6F,GAAU,iBACV4C,GAAgB,gBAChBU,GAAe,eACfgS,GAAc,UACdhR,GAAS,YACTM,GAAW,QACX2E,GAAO,aACPjE,GAAY,wBACZ7T,SD0mIoBoY,OAAOgM,EAAM,CAAC,KACtB,IAAI,WAACC,EAAU,WAAEC,EAAU,eAAEC,GAAkBH,EAE3CI,EAAaP,GAiBjB,OAfkB,MAAdK,IACAE,EAAaF,EAAa,YAAYtnB,KAAKwnB,GAAY,IAGzC,MAAdH,IACAG,EAAaH,EAAWG,IAGN,MAAlBD,QACMA,EAAexH,EAAYyH,SAG3BzH,EAAWyH,GAGdnB,CAAO,EC7nIpBoB,CAAK,CACXJ,WAAYA,IACD,IAAIX,IAAI,eAIvBtL,eAAexX,EAAe8jB,GACX,MAAXA,IACAA,EAAUC,UAAUC,qBAGxBlM,QAAQmM,KAAM,YAAWH,mBAEnBR,GAAmB,IAAIR,IAAI,aAA+BgB,EACpE,C","sources":["webpack://aleo-website/wasm.js","webpack://aleo-website/../js/index.js"],"sourcesContent":["function spawnWorker(url, module, memory, address) {\n        return new Promise((resolve) => {\n            const worker = new Worker(url, {\n                type: \"module\",\n            });\n\n            worker.addEventListener(\"message\", (event) => {\n                // This is needed in Node to wait one extra tick, so that way\n                // the Worker can fully initialize before we return.\n                setTimeout(() => {\n                    resolve(worker);\n\n                    // When running in Node, this allows the process to exit\n                    // even though the Worker is still running.\n                    if (worker.unref) {\n                        worker.unref();\n                    }\n                }, 0);\n            }, {\n                capture: true,\n                once: true,\n            });\n\n            worker.postMessage({\n                module,\n                memory,\n                address,\n            });\n        });\n    }\n\nlet wasm;\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); }\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().slice(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_3.get(state.dtor)(state.a, state.b);\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_3.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\nfunction __wbg_adapter_34(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h224fb318107fd829(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* Verify an execution with a single function and a single transition. Executions with multiple\n* transitions or functions will fail to verify. Also, this does not verify that the state root of\n* the execution is included in the Aleo Network ledger.\n*\n* @param {Execution} execution The function execution to verify\n* @param {VerifyingKey} verifying_key The verifying key for the function\n* @param {Program} program The program that the function execution belongs to\n* @param {String} function_id The name of the function that was executed\n* @returns {boolean} True if the execution is valid, false otherwise\n* @param {Execution} execution\n* @param {VerifyingKey} verifying_key\n* @param {Program} program\n* @param {string} function_id\n* @returns {boolean}\n*/\nfunction verifyFunctionExecution(execution, verifying_key, program, function_id) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(execution, Execution);\n        _assertClass(verifying_key, VerifyingKey);\n        _assertClass(program, Program);\n        const ptr0 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.verifyFunctionExecution(retptr, execution.__wbg_ptr, verifying_key.__wbg_ptr, program.__wbg_ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return r0 !== 0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nlet cachedBigInt64Memory0 = null;\n\nfunction getBigInt64Memory0() {\n    if (cachedBigInt64Memory0 === null || cachedBigInt64Memory0.buffer !== wasm.memory.buffer) {\n        cachedBigInt64Memory0 = new BigInt64Array(wasm.memory.buffer);\n    }\n    return cachedBigInt64Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {number} receiver\n*/\nfunction runRayonThread(receiver) {\n    wasm.runRayonThread(receiver);\n}\n\n/**\n* @param {URL} url\n* @param {number} num_threads\n* @returns {Promise<void>}\n*/\nfunction initThreadPool(url, num_threads) {\n    const ret = wasm.initThreadPool(addHeapObject(url), num_threads);\n    return takeObject(ret);\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_252(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h397293d196e1e8eb(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\nconst AddressFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_address_free(ptr >>> 0));\n/**\n* Public address of an Aleo account\n*/\nclass Address {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Address.prototype);\n        obj.__wbg_ptr = ptr;\n        AddressFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AddressFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n    * Derive an Aleo address from a private key\n    *\n    * @param {PrivateKey} private_key The private key to derive the address from\n    * @returns {Address} Address corresponding to the private key\n    * @param {PrivateKey} private_key\n    * @returns {Address}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.address_from_private_key(private_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Derive an Aleo address from a view key\n    *\n    * @param {ViewKey} view_key The view key to derive the address from\n    * @returns {Address} Address corresponding to the view key\n    * @param {ViewKey} view_key\n    * @returns {Address}\n    */\n    static from_view_key(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.address_from_view_key(view_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Create an aleo address object from a string representation of an address\n    *\n    * @param {string} address String representation of an addressm\n    * @returns {Address} Address\n    * @param {string} address\n    * @returns {Address}\n    */\n    static from_string(address) {\n        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.address_from_string(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Get a string representation of an Aleo address object\n    *\n    * @param {Address} Address\n    * @returns {string} String representation of the address\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Verify a signature for a message signed by the address\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {boolean} Boolean representing whether or not the signature is valid\n    * @param {Uint8Array} message\n    * @param {Signature} signature\n    * @returns {boolean}\n    */\n    verify(message, signature) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Signature);\n        const ret = wasm.address_verify(this.__wbg_ptr, ptr0, len0, signature.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst ExecutionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_execution_free(ptr >>> 0));\n/**\n* Execution of an Aleo program.\n*/\nclass Execution {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Execution.prototype);\n        obj.__wbg_ptr = ptr;\n        ExecutionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ExecutionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_execution_free(ptr);\n    }\n    /**\n    * Returns the string representation of the execution.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.execution_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates an execution object from a string representation of an execution.\n    * @param {string} execution\n    * @returns {Execution}\n    */\n    static fromString(execution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(execution, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.execution_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Execution.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ExecutionResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_executionresponse_free(ptr >>> 0));\n/**\n* Webassembly Representation of an Aleo function execution response\n*\n* This object is returned by the execution of an Aleo function off-chain. It provides methods for\n* retrieving the outputs of the function execution.\n*/\nclass ExecutionResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ExecutionResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        ExecutionResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ExecutionResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_executionresponse_free(ptr);\n    }\n    /**\n    * Get the outputs of the executed function\n    *\n    * @returns {Array} Array of strings representing the outputs of the function\n    * @returns {Array<any>}\n    */\n    getOutputs() {\n        const ret = wasm.executionresponse_getOutputs(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns the execution object if present, null if otherwise.\n    *\n    * @returns {Execution | undefined} The execution object if present, null if otherwise\n    * @returns {Execution | undefined}\n    */\n    getExecution() {\n        const ret = wasm.executionresponse_getExecution(this.__wbg_ptr);\n        return ret === 0 ? undefined : Execution.__wrap(ret);\n    }\n    /**\n    * Returns the program keys if present\n    * @returns {KeyPair}\n    */\n    getKeys() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.executionresponse_getKeys(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the proving_key if the proving key was cached in the Execution response.\n    * Note the proving key is removed from the response object after the first call to this\n    * function. Subsequent calls will return null.\n    *\n    * @returns {ProvingKey | undefined} The proving key\n    * @returns {ProvingKey | undefined}\n    */\n    getProvingKey() {\n        const ret = wasm.executionresponse_getProvingKey(this.__wbg_ptr);\n        return ret === 0 ? undefined : ProvingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying_key associated with the program\n    *\n    * @returns {VerifyingKey} The verifying key\n    * @returns {VerifyingKey}\n    */\n    getVerifyingKey() {\n        const ret = wasm.executionresponse_getVerifyingKey(this.__wbg_ptr);\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the function identifier\n    * @returns {string}\n    */\n    getFunctionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.executionresponse_getFunctionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the program\n    * @returns {Program}\n    */\n    getProgram() {\n        const ret = wasm.executionresponse_getProgram(this.__wbg_ptr);\n        return Program.__wrap(ret);\n    }\n}\n\nconst FieldFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_field_free(ptr >>> 0));\n/**\n*/\nclass Field {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Field.prototype);\n        obj.__wbg_ptr = ptr;\n        FieldFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FieldFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_field_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.field_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} field\n    * @returns {Field}\n    */\n    static fromString(field) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(field, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.field_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Field.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst KeyPairFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keypair_free(ptr >>> 0));\n/**\n* Key pair object containing both the function proving and verifying keys\n*/\nclass KeyPair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeyPair.prototype);\n        obj.__wbg_ptr = ptr;\n        KeyPairFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeyPairFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keypair_free(ptr);\n    }\n    /**\n    * Create new key pair from proving and verifying keys\n    *\n    * @param {ProvingKey} proving_key Proving key corresponding to a function in an Aleo program\n    * @param {VerifyingKey} verifying_key Verifying key corresponding to a function in an Aleo program\n    * @returns {KeyPair} Key pair object containing both the function proving and verifying keys\n    * @param {ProvingKey} proving_key\n    * @param {VerifyingKey} verifying_key\n    */\n    constructor(proving_key, verifying_key) {\n        _assertClass(proving_key, ProvingKey);\n        var ptr0 = proving_key.__destroy_into_raw();\n        _assertClass(verifying_key, VerifyingKey);\n        var ptr1 = verifying_key.__destroy_into_raw();\n        const ret = wasm.keypair_new(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        return this;\n    }\n    /**\n    * Get the proving key. This method will remove the proving key from the key pair\n    *\n    * @returns {ProvingKey | Error}\n    * @returns {ProvingKey}\n    */\n    provingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_provingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the verifying key. This method will remove the verifying key from the key pair\n    *\n    * @returns {VerifyingKey | Error}\n    * @returns {VerifyingKey}\n    */\n    verifyingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_verifyingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst OfflineQueryFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_offlinequery_free(ptr >>> 0));\n/**\n* An offline query object used to insert the global state root and state paths needed to create\n* a valid inclusion proof offline.\n*/\nclass OfflineQuery {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OfflineQuery.prototype);\n        obj.__wbg_ptr = ptr;\n        OfflineQueryFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OfflineQueryFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_offlinequery_free(ptr);\n    }\n    /**\n    * Creates a new offline query object. The state root is required to be passed in as a string\n    * @param {string} state_root\n    */\n    constructor(state_root) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(state_root, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.offlinequery_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Add a new state path to the offline query object.\n    *\n    * @param {string} commitment: The commitment corresponding to a record inpout\n    * @param {string} state_path: The state path corresponding to the commitment\n    * @param {string} commitment\n    * @param {string} state_path\n    */\n    addStatePath(commitment, state_path) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(commitment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(state_path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.offlinequery_addStatePath(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a json string representation of the offline query object\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.offlinequery_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create an offline query object from a json string representation\n    * @param {string} s\n    * @returns {OfflineQuery}\n    */\n    static fromString(s) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.offlinequery_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OfflineQuery.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst PrivateKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_privatekey_free(ptr >>> 0));\n/**\n* Private key of an Aleo account\n*/\nclass PrivateKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKey.prototype);\n        obj.__wbg_ptr = ptr;\n        PrivateKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PrivateKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * Generate a new private key using a cryptographically secure random number generator\n    *\n    * @returns {PrivateKey}\n    */\n    constructor() {\n        const ret = wasm.privatekey_new();\n        this.__wbg_ptr = ret >>> 0;\n        return this;\n    }\n    /**\n    * Get a private key from a series of unchecked bytes\n    *\n    * @param {Uint8Array} seed Unchecked 32 byte long Uint8Array acting as the seed for the private key\n    * @returns {PrivateKey}\n    * @param {Uint8Array} seed\n    * @returns {PrivateKey}\n    */\n    static from_seed_unchecked(seed) {\n        const ptr0 = passArray8ToWasm0(seed, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_from_seed_unchecked(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a string representation of a private key\n    *\n    * @param {string} seed String representation of a private key\n    * @returns {PrivateKey}\n    * @param {string} private_key\n    * @returns {PrivateKey}\n    */\n    static from_string(private_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(private_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_string(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the private key. This function should be used very carefully\n    * as it exposes the private key plaintext\n    *\n    * @returns {string} String representation of a private key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the view key corresponding to the private key\n    *\n    * @returns {ViewKey}\n    * @returns {ViewKey}\n    */\n    to_view_key() {\n        const ret = wasm.privatekey_to_view_key(this.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get the address corresponding to the private key\n    *\n    * @returns {Address}\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.privatekey_to_address(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Sign a message with the private key\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {Signature} Signature generated by signing the message with the address\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    sign(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(this.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a new randomly generated private key ciphertext using a secret. The secret is sensitive\n    * and will be needed to decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext | Error} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static newEncrypted(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_newEncrypted(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt an existing private key with a secret. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext | Error} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    toCiphertext(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get private key from a private key ciphertext and secret originally used to encrypt it\n    *\n    * @param {PrivateKeyCiphertext} ciphertext Ciphertext representation of the private key\n    * @param {string} secret Secret originally used to encrypt the private key\n    * @returns {PrivateKey | Error} Private key\n    * @param {PrivateKeyCiphertext} ciphertext\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    static fromPrivateKeyCiphertext(ciphertext, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(ciphertext, PrivateKeyCiphertext);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_fromPrivateKeyCiphertext(retptr, ciphertext.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst PrivateKeyCiphertextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_privatekeyciphertext_free(ptr >>> 0));\n/**\n* Private Key in ciphertext form\n*/\nclass PrivateKeyCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKeyCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n        PrivateKeyCiphertextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PrivateKeyCiphertextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekeyciphertext_free(ptr);\n    }\n    /**\n    * Encrypt a private key using a secret string. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {PrivateKey} private_key Private key to encrypt\n    * @param {string} secret Secret to encrypt the private key with\n    * @returns {PrivateKeyCiphertext | Error} Private key ciphertext\n    * @param {PrivateKey} private_key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static encryptPrivateKey(private_key, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, private_key.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypts a private ciphertext using a secret string. This must be the same secret used to\n    * encrypt the private key\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKey | Error} Private key\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    decryptToPrivateKey(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_decryptToPrivateKey(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the ciphertext string\n    *\n    * @returns {string} Ciphertext string\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekeyciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates a PrivateKeyCiphertext from a string\n    *\n    * @param {string} ciphertext Ciphertext string\n    * @returns {PrivateKeyCiphertext | Error} Private key ciphertext\n    * @param {string} ciphertext\n    * @returns {PrivateKeyCiphertext}\n    */\n    static fromString(ciphertext) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ProgramFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_program_free(ptr >>> 0));\n/**\n* Webassembly Representation of an Aleo program\n*/\nclass Program {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Program.prototype);\n        obj.__wbg_ptr = ptr;\n        ProgramFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProgramFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_program_free(ptr);\n    }\n    /**\n    * Create a program from a program string\n    *\n    * @param {string} program Aleo program source code\n    * @returns {Program | Error} Program object\n    * @param {string} program\n    * @returns {Program}\n    */\n    static fromString(program) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the program\n    *\n    * @returns {string} String containing the program source code\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Determine if a function is present in the program\n    *\n    * @param {string} functionName Name of the function to check for\n    * @returns {boolean} True if the program is valid, false otherwise\n    * @param {string} function_name\n    * @returns {boolean}\n    */\n    hasFunction(function_name) {\n        const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.program_hasFunction(this.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get javascript array of functions names in the program\n    *\n    * @returns {Array} Array of all function names present in the program\n    *\n    * @example\n    * const expected_functions = [\n    *   \"mint\",\n    *   \"transfer_private\",\n    *   \"transfer_private_to_public\",\n    *   \"transfer_public\",\n    *   \"transfer_public_to_private\",\n    *   \"join\",\n    *   \"split\",\n    *   \"fee\"\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_functions = credits_program.getFunctions();\n    * console.log(credits_functions === expected_functions); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getFunctions() {\n        const ret = wasm.program_getFunctions(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get a javascript object representation of the function inputs and types. This can be used\n    * to generate a web form to capture user inputs for an execution of a function.\n    *\n    * @param {string} function_name Name of the function to get inputs for\n    * @returns {Array | Error} Array of function inputs\n    *\n    * @example\n    * const expected_inputs = [\n    *     {\n    *       type:\"record\",\n    *       visibility:\"private\",\n    *       record:\"credits\",\n    *       members:[\n    *         {\n    *           name:\"microcredits\",\n    *           type:\"u64\",\n    *           visibility:\"private\"\n    *         }\n    *       ],\n    *       register:\"r0\"\n    *     },\n    *     {\n    *       type:\"address\",\n    *       visibility:\"private\",\n    *       register:\"r1\"\n    *     },\n    *     {\n    *       type:\"u64\",\n    *       visibility:\"private\",\n    *       register:\"r2\"\n    *     }\n    * ];\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const transfer_function_inputs = credits_program.getFunctionInputs(\"transfer_private\");\n    * console.log(transfer_function_inputs === expected_inputs); // Output should be \"true\"\n    * @param {string} function_name\n    * @returns {Array<any>}\n    */\n    getFunctionInputs(function_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getFunctionInputs(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a the list of a program's mappings and the names/types of their keys and values.\n    *\n    * @returns {Array | Error} - An array of objects representing the mappings in the program\n    * @example\n    * const expected_mappings = [\n    *    {\n    *       name: \"account\",\n    *       key_name: \"owner\",\n    *       key_type: \"address\",\n    *       value_name: \"microcredits\",\n    *       value_type: \"u64\"\n    *    }\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_mappings = credits_program.getMappings();\n    * console.log(credits_mappings === expected_mappings); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getMappings() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_getMappings(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program record and its types\n    *\n    * @param {string} record_name Name of the record to get members for\n    * @returns {Object | Error} Object containing the record name, type, and members\n    *\n    * @example\n    *\n    * const expected_record = {\n    *     type: \"record\",\n    *     record: \"Credits\",\n    *     members: [\n    *       {\n    *         name: \"owner\",\n    *         type: \"address\",\n    *         visibility: \"private\"\n    *       },\n    *       {\n    *         name: \"microcredits\",\n    *         type: \"u64\",\n    *         visibility: \"private\"\n    *       }\n    *     ];\n    *  };\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_record = credits_program.getRecordMembers(\"Credits\");\n    * console.log(credits_record === expected_record); // Output should be \"true\"\n    * @param {string} record_name\n    * @returns {object}\n    */\n    getRecordMembers(record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getRecordMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program struct and its types\n    *\n    * @param {string} struct_name Name of the struct to get members for\n    * @returns {Array | Error} Array containing the struct members\n    *\n    * @example\n    *\n    * const STRUCT_PROGRAM = \"program token_issue.aleo;\n    *\n    * struct token_metadata:\n    *     network as u32;\n    *     version as u32;\n    *\n    * struct token:\n    *     token_id as u32;\n    *     metadata as token_metadata;\n    *\n    * function no_op:\n    *    input r0 as u64;\n    *    output r0 as u64;\"\n    *\n    * const expected_struct_members = [\n    *    {\n    *      name: \"token_id\",\n    *      type: \"u32\",\n    *    },\n    *    {\n    *      name: \"metadata\",\n    *      type: \"struct\",\n    *      struct_id: \"token_metadata\",\n    *      members: [\n    *       {\n    *         name: \"network\",\n    *         type: \"u32\",\n    *       }\n    *       {\n    *         name: \"version\",\n    *         type: \"u32\",\n    *       }\n    *     ]\n    *   }\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(STRUCT_PROGRAM);\n    * const struct_members = program.getStructMembers(\"token\");\n    * console.log(struct_members === expected_struct_members); // Output should be \"true\"\n    * @param {string} struct_name\n    * @returns {Array<any>}\n    */\n    getStructMembers(struct_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(struct_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getStructMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the credits.aleo program\n    *\n    * @returns {Program} The credits.aleo program\n    * @returns {Program}\n    */\n    static getCreditsProgram() {\n        const ret = wasm.program_getCreditsProgram();\n        return Program.__wrap(ret);\n    }\n    /**\n    * Get the id of the program\n    *\n    * @returns {string} The id of the program\n    * @returns {string}\n    */\n    id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_id(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get a unique address of the program\n    *\n    * @returns {Address} The address of the program\n    * @returns {Address}\n    */\n    address() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_address(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Address.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Determine equality with another program\n    *\n    * @param {Program} other The other program to compare\n    * @returns {boolean} True if the programs are equal, false otherwise\n    * @param {Program} other\n    * @returns {boolean}\n    */\n    isEqual(other) {\n        _assertClass(other, Program);\n        const ret = wasm.program_isEqual(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get program_imports\n    *\n    * @returns {Array} The program imports\n    *\n    * @example\n    *\n    * const DOUBLE_TEST = \"import multiply_test.aleo;\n    *\n    * program double_test.aleo;\n    *\n    * function double_it:\n    *     input r0 as u32.private;\n    *     call multiply_test.aleo/multiply 2u32 r0 into r1;\n    *     output r1 as u32.private;\";\n    *\n    * const expected_imports = [\n    *    \"multiply_test.aleo\"\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(DOUBLE_TEST_PROGRAM);\n    * const imports = program.getImports();\n    * console.log(imports === expected_imports); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getImports() {\n        const ret = wasm.program_getImports(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst ProgramManagerFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_programmanager_free(ptr >>> 0));\n/**\n*/\nclass ProgramManager {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProgramManagerFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_programmanager_free(ptr);\n    }\n    /**\n    * Deploy an Aleo program\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being deployed\n    * @param imports A javascript object holding the source code of any imported programs in the\n    * form \\{\"program_name1\": \"program_source_code\", \"program_name2\": \"program_source_code\", ..\\}.\n    * Note that all imported programs must be deployed on chain before the main program in order\n    * for the deployment to succeed\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the program deployment in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildDeploymentTransaction(private_key, program, fee_credits, fee_record, url, imports, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        let ptr1 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr1 = fee_record.__destroy_into_raw();\n        }\n        var ptr2 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr3 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr4 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildDeploymentTransaction(private_key.__wbg_ptr, ptr0, len0, fee_credits, ptr1, ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the fee for a program deployment\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The source code of the program being deployed\n    * @param imports (optional) Provide a list of imports to use for the deployment fee estimation\n    * in the form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @returns {u64 | Error}\n    * @param {string} program\n    * @param {object | undefined} [imports]\n    * @returns {Promise<bigint>}\n    */\n    static estimateDeploymentFee(program, imports) {\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_estimateDeploymentFee(ptr0, len0, isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the component of the deployment cost which comes from the fee for the program name.\n    * Note that this cost does not represent the entire cost of deployment. It is additional to\n    * the cost of the size (in bytes) of the deployment.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param name The name of the program to be deployed\n    * @returns {u64 | Error}\n    * @param {string} name\n    * @returns {bigint}\n    */\n    static estimateProgramNameCost(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateProgramNameCost(retptr, ptr0, len0);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Execute an arbitrary function locally\n    *\n    * @param {PrivateKey} private_key The private key of the sender\n    * @param {string} program The source code of the program being executed\n    * @param {string} function The name of the function to execute\n    * @param {Array} inputs A javascript array of inputs to the function\n    * @param {boolean} prove_execution If true, the execution will be proven and an execution object\n    * containing the proof and the encrypted inputs and outputs needed to verify the proof offline\n    * will be returned.\n    * @param {boolean} cache Cache the proving and verifying keys in the Execution response.\n    * If this is set to 'true' the keys synthesized will be stored in the Execution Response\n    * and the `ProvingKey` and `VerifyingKey` can be retrieved from the response via the `.getKeys()`\n    * method.\n    * @param {Object | undefined} imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param {ProvingKey | undefined} proving_key (optional) Provide a verifying key to use for the function execution\n    * @param {VerifyingKey | undefined} verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {boolean} prove_execution\n    * @param {boolean} cache\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [proving_key]\n    * @param {VerifyingKey | undefined} [verifying_key]\n    * @param {string | undefined} [url]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<ExecutionResponse>}\n    */\n    static executeFunctionOffline(private_key, program, _function, inputs, prove_execution, cache, imports, proving_key, verifying_key, url, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr2 = proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr3 = verifying_key.__destroy_into_raw();\n        }\n        var ptr4 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_executeFunctionOffline(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), prove_execution, cache, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr2, ptr3, ptr4, len4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Execute Aleo function and create an Aleo execution transaction\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being executed\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * If this is set to 'true' the keys synthesized (or passed in as optional parameters via the\n    * `proving_key` and `verifying_key` arguments) will be stored in the ProgramManager's memory\n    * and used for subsequent transactions. If this is set to 'false' the proving and verifying\n    * keys will be deallocated from memory after the transaction is executed.\n    * @param imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the function execution\n    * @param verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [proving_key]\n    * @param {VerifyingKey | undefined} [verifying_key]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildExecutionTransaction(private_key, program, _function, inputs, fee_credits, fee_record, url, imports, proving_key, verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        var ptr3 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr4 = proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr5 = verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr8 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildExecutionTransaction(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), fee_credits, ptr2, ptr3, len3, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr4, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate Fee for Aleo function execution. Note if \"cache\" is set to true, the proving and\n    * verifying keys will be stored in the ProgramManager's memory and used for subsequent\n    * program executions.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program to estimate the execution fee for\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the fee estimation in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the fee estimation\n    * @param verifying_key (optional) Provide a verifying key to use for the fee estimation\n    * @returns {u64 | Error} Fee in microcredits\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {string | undefined} [url]\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [proving_key]\n    * @param {VerifyingKey | undefined} [verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<bigint>}\n    */\n    static estimateExecutionFee(private_key, program, _function, inputs, url, imports, proving_key, verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr3 = proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr4 = verifying_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_estimateExecutionFee(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the finalize fee component for executing a function. This fee is additional to the\n    * size of the execution of the program in bytes. If the function does not have a finalize\n    * step, then the finalize fee is 0.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The program containing the function to estimate the finalize fee for\n    * @param function The function to estimate the finalize fee for\n    * @returns {u64 | Error} Fee in microcredits\n    * @param {string} program\n    * @param {string} _function\n    * @returns {bigint}\n    */\n    static estimateFinalizeFee(program, _function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateFinalizeFee(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Join two records together to create a new record with an amount of credits equal to the sum\n    * of the credits of the two original records\n    *\n    * @param private_key The private key of the sender\n    * @param record_1 The first record to combine\n    * @param record_2 The second record to combine\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param join_proving_key (optional) Provide a proving key to use for the join function\n    * @param join_verifying_key (optional) Provide a verifying key to use for the join function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {RecordPlaintext} record_1\n    * @param {RecordPlaintext} record_2\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {ProvingKey | undefined} [join_proving_key]\n    * @param {VerifyingKey | undefined} [join_verifying_key]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildJoinTransaction(private_key, record_1, record_2, fee_credits, fee_record, url, join_proving_key, join_verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(record_1, RecordPlaintext);\n        var ptr0 = record_1.__destroy_into_raw();\n        _assertClass(record_2, RecordPlaintext);\n        var ptr1 = record_2.__destroy_into_raw();\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        var ptr3 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(join_proving_key)) {\n            _assertClass(join_proving_key, ProvingKey);\n            ptr4 = join_proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(join_verifying_key)) {\n            _assertClass(join_verifying_key, VerifyingKey);\n            ptr5 = join_verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr8 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildJoinTransaction(private_key.__wbg_ptr, ptr0, ptr1, fee_credits, ptr2, ptr3, len3, ptr4, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Split an Aleo credits record into two separate records. This function does not require a fee.\n    *\n    * @param private_key The private key of the sender\n    * @param split_amount The amount of the credit split. This amount will be subtracted from the\n    * value of the record and two new records will be created with the split amount and the remainder\n    * @param amount_record The record to split\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param split_proving_key (optional) Provide a proving key to use for the split function\n    * @param split_verifying_key (optional) Provide a verifying key to use for the split function\n    * @returns {Transaction | Error} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {number} split_amount\n    * @param {RecordPlaintext} amount_record\n    * @param {string | undefined} [url]\n    * @param {ProvingKey | undefined} [split_proving_key]\n    * @param {VerifyingKey | undefined} [split_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildSplitTransaction(private_key, split_amount, amount_record, url, split_proving_key, split_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(amount_record, RecordPlaintext);\n        var ptr0 = amount_record.__destroy_into_raw();\n        var ptr1 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(split_proving_key)) {\n            _assertClass(split_proving_key, ProvingKey);\n            ptr2 = split_proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(split_verifying_key)) {\n            _assertClass(split_verifying_key, VerifyingKey);\n            ptr3 = split_verifying_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr4 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildSplitTransaction(private_key.__wbg_ptr, split_amount, ptr0, ptr1, len1, ptr2, ptr3, ptr4);\n        return takeObject(ret);\n    }\n    /**\n    * Send credits from one Aleo account to another\n    *\n    * @param private_key The private key of the sender\n    * @param amount_credits The amount of credits to send\n    * @param recipient The recipient of the transaction\n    * @param transfer_type The type of the transfer (options: \"private\", \"public\", \"private_to_public\", \"public_to_private\")\n    * @param amount_record The record to fund the amount from\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param transfer_verifying_key (optional) Provide a verifying key to use for the transfer\n    * function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {number} amount_credits\n    * @param {string} recipient\n    * @param {string} transfer_type\n    * @param {RecordPlaintext | undefined} amount_record\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {ProvingKey | undefined} [transfer_proving_key]\n    * @param {VerifyingKey | undefined} [transfer_verifying_key]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildTransferTransaction(private_key, amount_credits, recipient, transfer_type, amount_record, fee_credits, fee_record, url, transfer_proving_key, transfer_verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(transfer_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(amount_record)) {\n            _assertClass(amount_record, RecordPlaintext);\n            ptr2 = amount_record.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr3 = fee_record.__destroy_into_raw();\n        }\n        var ptr4 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(transfer_proving_key)) {\n            _assertClass(transfer_proving_key, ProvingKey);\n            ptr5 = transfer_proving_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(transfer_verifying_key)) {\n            _assertClass(transfer_verifying_key, VerifyingKey);\n            ptr6 = transfer_verifying_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr7 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr8 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr9 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr9 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildTransferTransaction(private_key.__wbg_ptr, amount_credits, ptr0, len0, ptr1, len1, ptr2, fee_credits, ptr3, ptr4, len4, ptr5, ptr6, ptr7, ptr8, ptr9);\n        return takeObject(ret);\n    }\n    /**\n    * Synthesize proving and verifying keys for a program\n    *\n    * @param program {string} The program source code of the program to synthesize keys for\n    * @param function_id {string} The function to synthesize keys for\n    * @param inputs {Array} The inputs to the function\n    * @param imports {Object | undefined} The imports for the program\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} function_id\n    * @param {Array<any>} inputs\n    * @param {object | undefined} [imports]\n    * @returns {Promise<KeyPair>}\n    */\n    static synthesizeKeyPair(private_key, program, function_id, inputs, imports) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_synthesizeKeyPair(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n}\n\nconst ProvingKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_provingkey_free(ptr >>> 0));\n/**\n* Proving key for a function within an Aleo program\n*/\nclass ProvingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ProvingKey.prototype);\n        obj.__wbg_ptr = ptr;\n        ProvingKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProvingKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_provingkey_free(ptr);\n    }\n    /**\n    * Verify if the proving key is for the bond_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"bond_public_proving_key.bin\");\n    * provingKey.isBondPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the bond_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isBondPublicProver() {\n        const ret = wasm.provingkey_isBondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the claim_unbond function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"claim_unbond_proving_key.bin\");\n    * provingKey.isClaimUnbondProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the claim_unbond function, false if otherwise\n    * @returns {boolean}\n    */\n    isClaimUnbondPublicProver() {\n        const ret = wasm.provingkey_isClaimUnbondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the fee_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"fee_private_proving_key.bin\");\n    * provingKey.isFeePrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the fee_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isFeePrivateProver() {\n        const ret = wasm.provingkey_isFeePrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the fee_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"fee_public_proving_key.bin\");\n    * provingKey.isFeePublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the fee_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isFeePublicProver() {\n        const ret = wasm.provingkey_isFeePublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the inclusion function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"inclusion_proving_key.bin\");\n    * provingKey.isInclusionProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the inclusion function, false if otherwise\n    * @returns {boolean}\n    */\n    isInclusionProver() {\n        const ret = wasm.provingkey_isInclusionProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the join function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"join_proving_key.bin\");\n    * provingKey.isJoinProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the join function, false if otherwise\n    * @returns {boolean}\n    */\n    isJoinProver() {\n        const ret = wasm.provingkey_isJoinProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the set_validator_state function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"set_validator_set_proving_key.bin\");\n    * provingKey.isSetValidatorStateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the set_validator_state function, false if otherwise\n    * @returns {boolean}\n    */\n    isSetValidatorStateProver() {\n        const ret = wasm.provingkey_isSetValidatorStateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the split function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"split_proving_key.bin\");\n    * provingKey.isSplitProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the split function, false if otherwise\n    * @returns {boolean}\n    */\n    isSplitProver() {\n        const ret = wasm.provingkey_isSplitProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_private_proving_key.bin\");\n    * provingKey.isTransferPrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPrivateProver() {\n        const ret = wasm.provingkey_isTransferPrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_private_to_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_private_to_public_proving_key.bin\");\n    * provingKey.isTransferPrivateToPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_private_to_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPrivateToPublicProver() {\n        const ret = wasm.provingkey_isTransferPrivateToPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_public_proving_key.bin\");\n    * provingKey.isTransferPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPublicProver() {\n        const ret = wasm.provingkey_isTransferPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_public_to_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_public_to_private_proving_key.bin\");\n    * provingKey.isTransferPublicToPrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_public_to_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPublicToPrivateProver() {\n        const ret = wasm.provingkey_isTransferPublicToPrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the unbond_delegator_as_validator function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"unbond_delegator_as_validator_proving_key.bin\");\n    * provingKey.isUnbondDelegatorAsValidatorProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the unbond_delegator_as_validator function, false if otherwise\n    * @returns {boolean}\n    */\n    isUnbondDelegatorAsValidatorProver() {\n        const ret = wasm.provingkey_isUnbondDelegatorAsValidatorProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the unbond_delegator_as_delegator function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"unbond_delegator_as_delegator_proving_key.bin\");\n    * provingKey.isUnbondDelegatorAsDelegatorProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the unbond_delegator_as_delegator function, false if otherwise\n    * @returns {boolean}\n    */\n    isUnbondPublicProver() {\n        const ret = wasm.provingkey_isUnbondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Return the checksum of the proving key\n    *\n    * @returns {string} Checksum of the proving key\n    * @returns {string}\n    */\n    checksum() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_checksum(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a copy of the proving key\n    *\n    * @returns {ProvingKey} A copy of the proving key\n    * @returns {ProvingKey}\n    */\n    copy() {\n        const ret = wasm.provingkey_copy(this.__wbg_ptr);\n        return ProvingKey.__wrap(ret);\n    }\n    /**\n    * Construct a new proving key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte array representation of a proving key\n    * @returns {ProvingKey | Error}\n    * @param {Uint8Array} bytes\n    * @returns {ProvingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a proving key from string\n    *\n    * @param {string | Error} String representation of the proving key\n    * @param {string} string\n    * @returns {ProvingKey}\n    */\n    static fromString(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the byte representation of a proving key\n    *\n    * @returns {Uint8Array | Error} Byte array representation of a proving key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the proving key\n    *\n    * @returns {string} String representation of the proving key\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RecordCiphertextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_recordciphertext_free(ptr >>> 0));\n/**\n* Encrypted Aleo record\n*/\nclass RecordCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n        RecordCiphertextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RecordCiphertextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordciphertext_free(ptr);\n    }\n    /**\n    * Create a record ciphertext from a string\n    *\n    * @param {string} record String representation of a record ciphertext\n    * @returns {RecordCiphertext | Error} Record ciphertext\n    * @param {string} record\n    * @returns {RecordCiphertext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the string reprensentation of the record ciphertext\n    *\n    * @returns {string} String representation of the record ciphertext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Decrypt the record ciphertext into plaintext using the view key. The record will only\n    * decrypt if the record was encrypted by the account corresponding to the view key\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {RecordPlaintext | Error} Record plaintext object\n    * @param {ViewKey} view_key\n    * @returns {RecordPlaintext}\n    */\n    decrypt(view_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(view_key, ViewKey);\n            wasm.recordciphertext_decrypt(retptr, this.__wbg_ptr, view_key.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Determines if the account corresponding to the view key is the owner of the record\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {boolean}\n    * @param {ViewKey} view_key\n    * @returns {boolean}\n    */\n    isOwner(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.recordciphertext_isOwner(this.__wbg_ptr, view_key.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst RecordPlaintextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_recordplaintext_free(ptr >>> 0));\n/**\n* Plaintext representation of an Aleo record\n*/\nclass RecordPlaintext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordPlaintext.prototype);\n        obj.__wbg_ptr = ptr;\n        RecordPlaintextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RecordPlaintextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordplaintext_free(ptr);\n    }\n    /**\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {Field}\n    */\n    commitment(program_id, record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_commitment(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Field.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return a record plaintext from a string.\n    *\n    * @param {string} record String representation of a plaintext representation of an Aleo record\n    * @returns {RecordPlaintext | Error} Record plaintext\n    * @param {string} record\n    * @returns {RecordPlaintext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the record plaintext string\n    *\n    * @returns {string} String representation of the record plaintext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the amount of microcredits in the record\n    *\n    * @returns {u64} Amount of microcredits in the record\n    * @returns {bigint}\n    */\n    microcredits() {\n        const ret = wasm.recordplaintext_microcredits(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Returns the nonce of the record. This can be used to uniquely identify a record.\n    *\n    * @returns {string} Nonce of the record\n    * @returns {string}\n    */\n    nonce() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_nonce(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Attempt to get the serial number of a record to determine whether or not is has been spent\n    *\n    * @param {PrivateKey} private_key Private key of the account that owns the record\n    * @param {string} program_id Program ID of the program that the record is associated with\n    * @param {string} record_name Name of the record\n    * @returns {string | Error} Serial number of the record\n    * @param {PrivateKey} private_key\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {string}\n    */\n    serialNumberString(private_key, program_id, record_name) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_serialNumberString(retptr, this.__wbg_ptr, private_key.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr3 = r0;\n            var len3 = r1;\n            if (r3) {\n                ptr3 = 0; len3 = 0;\n                throw takeObject(r2);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n}\n\nconst SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr >>> 0));\n/**\n* Cryptographic signature of a message signed by an Aleo account\n*/\nclass Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr);\n    }\n    /**\n    * Sign a message with a private key\n    *\n    * @param {PrivateKey} private_key The private key to sign the message with\n    * @param {Uint8Array} message Byte representation of the message to sign\n    * @returns {Signature} Signature of the message\n    * @param {PrivateKey} private_key\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    static sign(private_key, message) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(private_key.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Verify a signature of a message with an address\n    *\n    * @param {Address} address The address to verify the signature with\n    * @param {Uint8Array} message Byte representation of the message to verify\n    * @returns {boolean} True if the signature is valid, false otherwise\n    * @param {Address} address\n    * @param {Uint8Array} message\n    * @returns {boolean}\n    */\n    verify(address, message) {\n        _assertClass(address, Address);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_verify(this.__wbg_ptr, address.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get a signature from a string representation of a signature\n    *\n    * @param {string} signature String representation of a signature\n    * @returns {Signature} Signature\n    * @param {string} signature\n    * @returns {Signature}\n    */\n    static from_string(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_from_string(ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a signature\n    *\n    * @returns {string} String representation of a signature\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst TransactionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_transaction_free(ptr >>> 0));\n/**\n* Webassembly Representation of an Aleo transaction\n*\n* This object is created when generating an on-chain function deployment or execution and is the\n* object that should be submitted to the Aleo Network in order to deploy or execute a function.\n*/\nclass Transaction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Transaction.prototype);\n        obj.__wbg_ptr = ptr;\n        TransactionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TransactionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n    * Create a transaction from a string\n    *\n    * @param {string} transaction String representation of a transaction\n    * @returns {Transaction | Error}\n    * @param {string} transaction\n    * @returns {Transaction}\n    */\n    static fromString(transaction) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(transaction, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transaction_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the transaction as a string. If you want to submit this transaction to the Aleo Network\n    * this function will create the string that should be submitted in the `POST` data.\n    *\n    * @returns {string} String representation of the transaction\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the id of the transaction. This is the merkle root of the transaction's inclusion proof.\n    *\n    * This value can be used to query the status of the transaction on the Aleo Network to see\n    * if it was successful. If successful, the transaction will be included in a block and this\n    * value can be used to lookup the transaction data on-chain.\n    *\n    * @returns {string} Transaction id\n    * @returns {string}\n    */\n    transactionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the type of the transaction (will return \"deploy\" or \"execute\")\n    *\n    * @returns {string} Transaction type\n    * @returns {string}\n    */\n    transactionType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionType(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst VerifyingKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_verifyingkey_free(ptr >>> 0));\n/**\n* Verifying key for a function within an Aleo program\n*/\nclass VerifyingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerifyingKey.prototype);\n        obj.__wbg_ptr = ptr;\n        VerifyingKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VerifyingKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verifyingkey_free(ptr);\n    }\n    /**\n    * Returns the verifying key for the bond_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_public function\n    * @returns {VerifyingKey}\n    */\n    static bondPublicVerifier() {\n        const ret = wasm.verifyingkey_bondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the claim_delegator function\n    *\n    * @returns {VerifyingKey} Verifying key for the claim_unbond_public function\n    * @returns {VerifyingKey}\n    */\n    static claimUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_claimUnbondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the fee_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the fee_private function\n    * @returns {VerifyingKey}\n    */\n    static feePrivateVerifier() {\n        const ret = wasm.verifyingkey_feePrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the fee_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the fee_public function\n    * @returns {VerifyingKey}\n    */\n    static feePublicVerifier() {\n        const ret = wasm.verifyingkey_feePublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the inclusion function\n    *\n    * @returns {VerifyingKey} Verifying key for the inclusion function\n    * @returns {VerifyingKey}\n    */\n    static inclusionVerifier() {\n        const ret = wasm.verifyingkey_inclusionVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the join function\n    *\n    * @returns {VerifyingKey} Verifying key for the join function\n    * @returns {VerifyingKey}\n    */\n    static joinVerifier() {\n        const ret = wasm.verifyingkey_joinVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the set_validator_state function\n    *\n    * @returns {VerifyingKey} Verifying key for the set_validator_state function\n    * @returns {VerifyingKey}\n    */\n    static setValidatorStateVerifier() {\n        const ret = wasm.verifyingkey_setValidatorStateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the split function\n    *\n    * @returns {VerifyingKey} Verifying key for the split function\n    * @returns {VerifyingKey}\n    */\n    static splitVerifier() {\n        const ret = wasm.verifyingkey_splitVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_private function\n    * @returns {VerifyingKey}\n    */\n    static transferPrivateVerifier() {\n        const ret = wasm.verifyingkey_transferPrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_private_to_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_private_to_public function\n    * @returns {VerifyingKey}\n    */\n    static transferPrivateToPublicVerifier() {\n        const ret = wasm.verifyingkey_transferPrivateToPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_public function\n    * @returns {VerifyingKey}\n    */\n    static transferPublicVerifier() {\n        const ret = wasm.verifyingkey_transferPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_public_to_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_public_to_private function\n    * @returns {VerifyingKey}\n    */\n    static transferPublicToPrivateVerifier() {\n        const ret = wasm.verifyingkey_transferPublicToPrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the unbond_delegator_as_delegator function\n    *\n    * @returns {VerifyingKey} Verifying key for the unbond_delegator_as_delegator function\n    * @returns {VerifyingKey}\n    */\n    static unbondDelegatorAsValidatorVerifier() {\n        const ret = wasm.verifyingkey_unbondDelegatorAsValidatorVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the unbond_delegator_as_delegator function\n    *\n    * @returns {VerifyingKey} Verifying key for the unbond_delegator_as_delegator function\n    * @returns {VerifyingKey}\n    */\n    static unbondPublicVerifier() {\n        const ret = wasm.verifyingkey_unbondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the bond_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_public function\n    * @returns {boolean}\n    */\n    isBondPublicVerifier() {\n        const ret = wasm.verifyingkey_isBondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the claim_delegator function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isClaimUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_isClaimUnbondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the fee_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isFeePrivateVerifier() {\n        const ret = wasm.verifyingkey_isFeePrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the fee_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isFeePublicVerifier() {\n        const ret = wasm.verifyingkey_isFeePublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the inclusion function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isInclusionVerifier() {\n        const ret = wasm.verifyingkey_isInclusionVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the join function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isJoinVerifier() {\n        const ret = wasm.verifyingkey_isJoinVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the set_validator_state function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isSetValidatorStateVerifier() {\n        const ret = wasm.verifyingkey_isSetValidatorStateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the split function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isSplitVerifier() {\n        const ret = wasm.verifyingkey_isSplitVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPrivateVerifier() {\n        const ret = wasm.verifyingkey_isTransferPrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_private_to_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPrivateToPublicVerifier() {\n        const ret = wasm.verifyingkey_isTransferPrivateToPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPublicVerifier() {\n        const ret = wasm.verifyingkey_isTransferPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_public_to_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPublicToPrivateVerifier() {\n        const ret = wasm.verifyingkey_isTransferPublicToPrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the unbond_delegator_as_delegator function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isUnbondDelegatorAsValidatorVerifier() {\n        const ret = wasm.verifyingkey_isUnbondDelegatorAsValidatorVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the unbond_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_isUnbondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get the checksum of the verifying key\n    *\n    * @returns {string} Checksum of the verifying key\n    * @returns {string}\n    */\n    checksum() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_checksum(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a copy of the verifying key\n    *\n    * @returns {VerifyingKey} A copy of the verifying key\n    * @returns {VerifyingKey}\n    */\n    copy() {\n        const ret = wasm.verifyingkey_copy(this.__wbg_ptr);\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Construct a new verifying key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte representation of a verifying key\n    * @returns {VerifyingKey | Error}\n    * @param {Uint8Array} bytes\n    * @returns {VerifyingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a verifying key from string\n    *\n    * @param {String} string String representation of a verifying key\n    * @returns {VerifyingKey | Error}\n    * @param {string} string\n    * @returns {VerifyingKey}\n    */\n    static fromString(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a byte array from a verifying key\n    *\n    * @returns {Uint8Array | Error} Byte representation of a verifying key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the verifying key\n    *\n    * @returns {String} String representation of the verifying key\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst ViewKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_viewkey_free(ptr >>> 0));\n/**\n*/\nclass ViewKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ViewKey.prototype);\n        obj.__wbg_ptr = ptr;\n        ViewKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ViewKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_viewkey_free(ptr);\n    }\n    /**\n    * Create a new view key from a private key\n    *\n    * @param {PrivateKey} private_key Private key\n    * @returns {ViewKey} View key\n    * @param {PrivateKey} private_key\n    * @returns {ViewKey}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.privatekey_to_view_key(private_key.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Create a new view key from a string representation of a view key\n    *\n    * @param {string} view_key String representation of a view key\n    * @returns {ViewKey} View key\n    * @param {string} view_key\n    * @returns {ViewKey}\n    */\n    static from_string(view_key) {\n        const ptr0 = passStringToWasm0(view_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.viewkey_from_string(ptr0, len0);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a view key\n    *\n    * @returns {string} String representation of a view key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.viewkey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the address corresponding to a view key\n    *\n    * @returns {Address} Address\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.address_from_view_key(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Decrypt a record ciphertext with a view key\n    *\n    * @param {string} ciphertext String representation of a record ciphertext\n    * @returns {string} String representation of a record plaintext\n    * @param {string} ciphertext\n    * @returns {string}\n    */\n    decrypt(ciphertext) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.viewkey_decrypt(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_new_71801a555ad9f2aa = function() { return handleError(function () {\n        const ret = new XMLHttpRequest();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_overrideMimeType_ee9c51919ceb418b = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).overrideMimeType(getStringFromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_open_c9eb0cf2c9d95679 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4, arg5) {\n        getObject(arg0).open(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4), arg5 !== 0);\n    }, arguments) };\n    imports.wbg.__wbg_send_80d29985093c1ec5 = function() { return handleError(function (arg0) {\n        getObject(arg0).send();\n    }, arguments) };\n    imports.wbg.__wbg_response_7c2e2759084f7279 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).response;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_status_d485fb5a478426fb = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_new_72fb9a18b5ae2624 = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_1f9b04f170055d33 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_new_ab6fd82b10560829 = function() { return handleError(function () {\n        const ret = new Headers();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_0d76b0581eca6298 = function() { return handleError(function () {\n        const ret = new AbortController();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_signal_a61f78a3478fd9bc = function(arg0) {\n        const ret = getObject(arg0).signal;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_append_7bfcb4937d1d5e29 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_Response_849eb93e75734b6e = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Response;\n        } catch (_) {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_status_61a01141acd3cf74 = function(arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    };\n    imports.wbg.__wbg_url_5f6dc4009ac5f99d = function(arg0, arg1) {\n        const ret = getObject(arg1).url;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_headers_9620bfada380764a = function(arg0) {\n        const ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_iterator_2cee6dadfd956dfa = function() {\n        const ret = Symbol.iterator;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_get_e3c254076557e348 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbg_call_27c0f87801dedf93 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_next_40fc327bfc8770e6 = function(arg0) {\n        const ret = getObject(arg0).next;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_196c84450b364254 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).next();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_done_298b57d23c0fc80c = function(arg0) {\n        const ret = getObject(arg0).done;\n        return ret;\n    };\n    imports.wbg.__wbg_value_d93c65011f51a456 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_abort_2aa7521d5690750e = function(arg0) {\n        getObject(arg0).abort();\n    };\n    imports.wbg.__wbg_stringify_8887fe74e1c50d81 = function() { return handleError(function (arg0) {\n        const ret = JSON.stringify(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_log_0159ca40cddf5b15 = function(arg0, arg1) {\n        console.log(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_bigint_from_u64 = function(arg0) {\n        const ret = BigInt.asUintN(64, arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_b3ca7c6051f9bec1 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_transaction_new = function(arg0) {\n        const ret = Transaction.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_executionresponse_new = function(arg0) {\n        const ret = ExecutionResponse.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_keypair_new = function(arg0) {\n        const ret = KeyPair.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_module = function() {\n        const ret = __wbg_init.__wbindgen_wasm_module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_spawnWorker_f6acaddb2e29dc4a = function(arg0, arg1, arg2, arg3) {\n        const ret = spawnWorker(getObject(arg0), getObject(arg1), getObject(arg2), arg3 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_66ae46612e7f0234 = function(arg0) {\n        const ret = new Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_d4638f722068f043 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_arrayBuffer_29931d52c7206b02 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).arrayBuffer();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_63b92bc8671ed464 = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_c20a40f15020d68a = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_new_81740750da40724f = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_252(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return addHeapObject(ret);\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbg_new_16b304a2cfa7ff4a = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_push_a5b05aedc7234f9f = function(arg0, arg1) {\n        const ret = getObject(arg0).push(getObject(arg1));\n        return ret;\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_abda76e883ba8a5f = function() {\n        const ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_658279fe44541cf6 = function(arg0, arg1) {\n        const ret = getObject(arg1).stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_error_f851667af71bcfc6 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_buffer_12d079cc21e14bdb = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_randomFillSync_5c9c955aa56b6049 = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).randomFillSync(takeObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_subarray_a1f73cd4b5b42fe1 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_3aa56aa6edec874c = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_set_a47bac70306a19a7 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_crypto_1d1f22824a6a080c = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_process_4a72847cc503995b = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_f686565e586dd935 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_104a2ff8d6ea03a2 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbg_require_cca90b1a94a0255b = function() { return handleError(function () {\n        const ret = module.require;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_msCrypto_eb05e62b530a1508 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_e9b4878cebadb3d3 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_cd7af8117672b8b8 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_get_bd8e338fbd5f5cc8 = function(arg0, arg1) {\n        const ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_ce0dbfc45cf2f5be = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_c6fb939a7f436783 = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_d1e6af4856ba331b = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_207b558942527489 = function() { return handleError(function () {\n        const ret = global.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_e258087cd0daa0ea = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_has_0af94d20077affa2 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.has(getObject(arg0), getObject(arg1));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_fetch_bc7c8e27076a5c84 = function(arg0) {\n        const ret = fetch(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_fetch_921fad6ef9e883dd = function(arg0, arg1) {\n        const ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function(arg0) {\n        throw takeObject(arg0);\n    };\n    imports.wbg.__wbg_then_a73caa9a87991566 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_0c86a60e8fcfe9f6 = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_queueMicrotask_481971b0d87f3dd4 = function(arg0) {\n        queueMicrotask(getObject(arg0));\n    };\n    imports.wbg.__wbg_queueMicrotask_3cbae2ec6b6cd3d6 = function(arg0) {\n        const ret = getObject(arg0).queueMicrotask;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_resolve_b0083a7967828ec8 = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_5d743fc9058ba01a = function() {\n        const ret = Atomics.waitAsync;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_8cccba86b0f574cb = function(arg0) {\n        const ret = new Int32Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_46d5c36955b71a79 = function(arg0, arg1, arg2) {\n        const ret = Atomics.waitAsync(getObject(arg0), arg1, arg2);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_async_19c0400d97cc72fe = function(arg0) {\n        const ret = getObject(arg0).async;\n        return ret;\n    };\n    imports.wbg.__wbg_value_571d60108110e917 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_link_fc1eedd35dc7e0a6 = function(arg0) {\n        const ret = \"data:application/javascript,\" + encodeURIComponent(`onmessage = function (ev) {\n            let [ia, index, value] = ev.data;\n            ia = new Int32Array(ia.buffer);\n            let result = Atomics.wait(ia, index, value);\n            postMessage(result);\n        };\n        `);\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_new_d1187ae36d662ef9 = function() { return handleError(function (arg0, arg1) {\n        const ret = new Worker(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setonmessage_503809e5bb51bd33 = function(arg0, arg1) {\n        getObject(arg0).onmessage = getObject(arg1);\n    };\n    imports.wbg.__wbg_of_6a70eed8d41f469c = function(arg0, arg1, arg2) {\n        const ret = Array.of(getObject(arg0), getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_postMessage_7380d10e8b8269df = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).postMessage(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_data_3ce7c145ca4fbcdc = function(arg0) {\n        const ret = getObject(arg0).data;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithstrandinit_3fd6fba4083ff2d0 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_responseText_c67ed2d48db10769 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg1).responseText;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    }, arguments) };\n    imports.wbg.__wbindgen_closure_wrapper5752 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 541, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper5777 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 541, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n    imports.wbg.memory = maybe_memory || new WebAssembly.Memory({initial:25,maximum:65536,shared:true});\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedBigInt64Memory0 = null;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nvar exports = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Address: Address,\n    Execution: Execution,\n    ExecutionResponse: ExecutionResponse,\n    Field: Field,\n    KeyPair: KeyPair,\n    OfflineQuery: OfflineQuery,\n    PrivateKey: PrivateKey,\n    PrivateKeyCiphertext: PrivateKeyCiphertext,\n    Program: Program,\n    ProgramManager: ProgramManager,\n    ProvingKey: ProvingKey,\n    RecordCiphertext: RecordCiphertext,\n    RecordPlaintext: RecordPlaintext,\n    Signature: Signature,\n    Transaction: Transaction,\n    VerifyingKey: VerifyingKey,\n    ViewKey: ViewKey,\n    default: __wbg_init,\n    initSync: initSync,\n    initThreadPool: initThreadPool,\n    runRayonThread: runRayonThread,\n    verifyFunctionExecution: verifyFunctionExecution\n});\n\nconst wasm_path = \"assets/aleo_wasm.wasm\";\n\n            \n            var Cargo = async (opt = {}) => {\n                let {importHook, serverPath, initializeHook} = opt;\n\n                let final_path = wasm_path;\n\n                if (serverPath != null) {\n                    final_path = serverPath + /[^\\/\\\\]*$/.exec(final_path)[0];\n                }\n\n                if (importHook != null) {\n                    final_path = importHook(final_path);\n                }\n\n                if (initializeHook != null) {\n                    await initializeHook(__wbg_init, final_path);\n\n                } else {\n                    await __wbg_init(final_path);\n                }\n\n                return exports;\n            };\n\nexport { Cargo as default };\n//# sourceMappingURL=wasm.js.map\n","import wasm from \"../dist/wasm.js\";\n\nconst {\n    initThreadPool: wasmInitThreadPool,\n    Address,\n    Execution,\n    ExecutionResponse,\n    Field,\n    OfflineQuery,\n    Private,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    ProgramManager,\n    Signature,\n    Transaction,\n    ViewKey,\n    VerifyingKey,\n    verifyFunctionExecution,\n} = await wasm({\n    importHook: () => {\n        return new URL(\"assets/aleo_wasm.wasm\", import.meta.url);\n    },\n});\n\nasync function initThreadPool(threads) {\n    if (threads == null) {\n        threads = navigator.hardwareConcurrency;\n    }\n\n    console.info(`Spawning ${threads} threads`);\n\n    await wasmInitThreadPool(new URL(\"worker.js\", import.meta.url), threads);\n}\n\nexport {\n    initThreadPool,\n    Address,\n    Execution,\n    ExecutionResponse,\n    Field,\n    OfflineQuery,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    ProgramManager,\n    Signature,\n    Transaction,\n    ViewKey,\n    VerifyingKey,\n    verifyFunctionExecution,\n};\n"],"names":["spawnWorker","url","module","memory","address","Promise","resolve","worker","Worker","type","addEventListener","event","setTimeout","unref","capture","once","postMessage","wasm","heap","Array","fill","undefined","getObject","idx","push","heap_next","length","dropObject","takeObject","ret","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","Error","cachedUint8Memory0","getUint8Memory0","buffer","Uint8Array","getStringFromWasm0","ptr","len","slice","addHeapObject","obj","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encode","encodeString","arg","view","buf","set","read","written","passStringToWasm0","malloc","realloc","subarray","mem","offset","code","charCodeAt","isLikeNone","x","cachedInt32Memory0","getInt32Memory0","Int32Array","debugString","val","description","name","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","message","stack","CLOSURE_DTORS","FinalizationRegistry","register","unregister","state","__wbindgen_export_3","get","dtor","a","b","makeMutClosure","arg0","arg1","f","cnt","real","args","original","__wbg_adapter_34","arg2","_dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h224fb318107fd829","_assertClass","instance","klass","passArray8ToWasm0","verifyFunctionExecution$1","execution","verifying_key","program","function_id","retptr","__wbindgen_add_to_stack_pointer","Execution$1","VerifyingKey$1","Program$1","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","verifyFunctionExecution","__wbg_ptr","r0","r1","cachedBigInt64Memory0","getBigInt64Memory0","BigInt64Array","getArrayU8FromWasm0","runRayonThread","receiver","initThreadPool$1","num_threads","initThreadPool","handleError","apply","this","e","__wbindgen_exn_store","__wbg_adapter_252","arg3","wasm_bindgen__convert__closures__invoke2_mut__h397293d196e1e8eb","AddressFinalization","__wbg_address_free","Address","__wrap","Object","create","prototype","__destroy_into_raw","free","from_private_key","private_key","PrivateKey$1","address_from_private_key","from_view_key","view_key","ViewKey$1","address_from_view_key","from_string","address_from_string","to_string","deferred1_0","deferred1_1","address_to_string","__wbindgen_free","verify","signature","Signature$1","address_verify","ExecutionFinalization","__wbg_execution_free","Execution","execution_toString","fromString","execution_fromString","ExecutionResponseFinalization","__wbg_executionresponse_free","ExecutionResponse","getOutputs","executionresponse_getOutputs","getExecution","executionresponse_getExecution","getKeys","executionresponse_getKeys","KeyPair","getProvingKey","executionresponse_getProvingKey","ProvingKey$1","getVerifyingKey","executionresponse_getVerifyingKey","getFunctionId","executionresponse_getFunctionId","getProgram","executionresponse_getProgram","FieldFinalization","__wbg_field_free","Field","field_toString","field","field_fromString","KeyPairFinalization","__wbg_keypair_free","constructor","proving_key","ptr1","keypair_new","provingKey","keypair_provingKey","verifyingKey","keypair_verifyingKey","OfflineQueryFinalization","__wbg_offlinequery_free","OfflineQuery","state_root","offlinequery_new","addStatePath","commitment","state_path","len1","offlinequery_addStatePath","offlinequery_toString","s","offlinequery_fromString","PrivateKeyFinalization","__wbg_privatekey_free","PrivateKey","privatekey_new","from_seed_unchecked","seed","privatekey_from_seed_unchecked","privatekey_from_string","privatekey_to_string","to_view_key","privatekey_to_view_key","to_address","privatekey_to_address","Address$1","sign","privatekey_sign","newEncrypted","secret","privatekey_newEncrypted","PrivateKeyCiphertext$1","toCiphertext","privatekey_toCiphertext","fromPrivateKeyCiphertext","ciphertext","privatekey_fromPrivateKeyCiphertext","PrivateKeyCiphertextFinalization","__wbg_privatekeyciphertext_free","PrivateKeyCiphertext","encryptPrivateKey","decryptToPrivateKey","privatekeyciphertext_decryptToPrivateKey","privatekeyciphertext_toString","privatekeyciphertext_fromString","ProgramFinalization","__wbg_program_free","Program","program_fromString","program_toString","hasFunction","function_name","program_hasFunction","getFunctions","program_getFunctions","getFunctionInputs","program_getFunctionInputs","getMappings","program_getMappings","getRecordMembers","record_name","program_getRecordMembers","getStructMembers","struct_name","program_getStructMembers","getCreditsProgram","program_getCreditsProgram","id","program_id","program_address","isEqual","other","program_isEqual","getImports","program_getImports","ProgramManagerFinalization","__wbg_programmanager_free","buildDeploymentTransaction","fee_credits","fee_record","imports","fee_proving_key","fee_verifying_key","offline_query","RecordPlaintext$1","ptr2","len2","ptr3","ptr4","ptr5","OfflineQuery$1","programmanager_buildDeploymentTransaction","estimateDeploymentFee","programmanager_estimateDeploymentFee","estimateProgramNameCost","programmanager_estimateProgramNameCost","r2","BigInt","asUintN","executeFunctionOffline","_function","inputs","prove_execution","cache","len4","programmanager_executeFunctionOffline","buildExecutionTransaction","len3","ptr6","ptr7","ptr8","programmanager_buildExecutionTransaction","estimateExecutionFee","programmanager_estimateExecutionFee","estimateFinalizeFee","programmanager_estimateFinalizeFee","buildJoinTransaction","record_1","record_2","join_proving_key","join_verifying_key","programmanager_buildJoinTransaction","buildSplitTransaction","split_amount","amount_record","split_proving_key","split_verifying_key","programmanager_buildSplitTransaction","buildTransferTransaction","amount_credits","recipient","transfer_type","transfer_proving_key","transfer_verifying_key","ptr9","programmanager_buildTransferTransaction","synthesizeKeyPair","programmanager_synthesizeKeyPair","ProvingKeyFinalization","__wbg_provingkey_free","ProvingKey","isBondPublicProver","provingkey_isBondPublicProver","isClaimUnbondPublicProver","provingkey_isClaimUnbondPublicProver","isFeePrivateProver","provingkey_isFeePrivateProver","isFeePublicProver","provingkey_isFeePublicProver","isInclusionProver","provingkey_isInclusionProver","isJoinProver","provingkey_isJoinProver","isSetValidatorStateProver","provingkey_isSetValidatorStateProver","isSplitProver","provingkey_isSplitProver","isTransferPrivateProver","provingkey_isTransferPrivateProver","isTransferPrivateToPublicProver","provingkey_isTransferPrivateToPublicProver","isTransferPublicProver","provingkey_isTransferPublicProver","isTransferPublicToPrivateProver","provingkey_isTransferPublicToPrivateProver","isUnbondDelegatorAsValidatorProver","provingkey_isUnbondDelegatorAsValidatorProver","isUnbondPublicProver","provingkey_isUnbondPublicProver","checksum","provingkey_checksum","copy","provingkey_copy","fromBytes","bytes","provingkey_fromBytes","string","provingkey_fromString","toBytes","provingkey_toBytes","v1","provingkey_toString","RecordCiphertextFinalization","__wbg_recordciphertext_free","RecordCiphertext","record","recordciphertext_fromString","recordciphertext_toString","decrypt","recordciphertext_decrypt","isOwner","recordciphertext_isOwner","RecordPlaintextFinalization","__wbg_recordplaintext_free","RecordPlaintext","recordplaintext_commitment","Field$1","recordplaintext_fromString","recordplaintext_toString","microcredits","recordplaintext_microcredits","nonce","recordplaintext_nonce","serialNumberString","deferred4_0","deferred4_1","recordplaintext_serialNumberString","r3","SignatureFinalization","__wbg_signature_free","Signature","signature_verify","signature_from_string","signature_to_string","TransactionFinalization","__wbg_transaction_free","Transaction","transaction","transaction_fromString","transaction_toString","transactionId","transaction_transactionId","transactionType","transaction_transactionType","VerifyingKeyFinalization","__wbg_verifyingkey_free","VerifyingKey","bondPublicVerifier","verifyingkey_bondPublicVerifier","claimUnbondPublicVerifier","verifyingkey_claimUnbondPublicVerifier","feePrivateVerifier","verifyingkey_feePrivateVerifier","feePublicVerifier","verifyingkey_feePublicVerifier","inclusionVerifier","verifyingkey_inclusionVerifier","joinVerifier","verifyingkey_joinVerifier","setValidatorStateVerifier","verifyingkey_setValidatorStateVerifier","splitVerifier","verifyingkey_splitVerifier","transferPrivateVerifier","verifyingkey_transferPrivateVerifier","transferPrivateToPublicVerifier","verifyingkey_transferPrivateToPublicVerifier","transferPublicVerifier","verifyingkey_transferPublicVerifier","transferPublicToPrivateVerifier","verifyingkey_transferPublicToPrivateVerifier","unbondDelegatorAsValidatorVerifier","verifyingkey_unbondDelegatorAsValidatorVerifier","unbondPublicVerifier","verifyingkey_unbondPublicVerifier","isBondPublicVerifier","verifyingkey_isBondPublicVerifier","isClaimUnbondPublicVerifier","verifyingkey_isClaimUnbondPublicVerifier","isFeePrivateVerifier","verifyingkey_isFeePrivateVerifier","isFeePublicVerifier","verifyingkey_isFeePublicVerifier","isInclusionVerifier","verifyingkey_isInclusionVerifier","isJoinVerifier","verifyingkey_isJoinVerifier","isSetValidatorStateVerifier","verifyingkey_isSetValidatorStateVerifier","isSplitVerifier","verifyingkey_isSplitVerifier","isTransferPrivateVerifier","verifyingkey_isTransferPrivateVerifier","isTransferPrivateToPublicVerifier","verifyingkey_isTransferPrivateToPublicVerifier","isTransferPublicVerifier","verifyingkey_isTransferPublicVerifier","isTransferPublicToPrivateVerifier","verifyingkey_isTransferPublicToPrivateVerifier","isUnbondDelegatorAsValidatorVerifier","verifyingkey_isUnbondDelegatorAsValidatorVerifier","isUnbondPublicVerifier","verifyingkey_isUnbondPublicVerifier","verifyingkey_checksum","verifyingkey_copy","verifyingkey_fromBytes","verifyingkey_fromString","verifyingkey_toBytes","verifyingkey_toString","ViewKeyFinalization","__wbg_viewkey_free","ViewKey","viewkey_from_string","viewkey_to_string","deferred3_0","deferred3_1","viewkey_decrypt","async","__wbg_load","Response","WebAssembly","instantiateStreaming","headers","console","warn","arrayBuffer","instantiate","Instance","__wbg_get_imports","wbg","__wbindgen_object_drop_ref","__wbg_new_71801a555ad9f2aa","XMLHttpRequest","arguments","__wbg_overrideMimeType_ee9c51919ceb418b","overrideMimeType","__wbg_open_c9eb0cf2c9d95679","arg4","arg5","open","__wbg_send_80d29985093c1ec5","send","__wbg_response_7c2e2759084f7279","response","__wbg_status_d485fb5a478426fb","status","__wbg_new_72fb9a18b5ae2624","__wbindgen_string_new","__wbg_set_1f9b04f170055d33","Reflect","__wbg_new_ab6fd82b10560829","Headers","__wbindgen_object_clone_ref","__wbg_new_0d76b0581eca6298","AbortController","__wbg_signal_a61f78a3478fd9bc","signal","__wbg_append_7bfcb4937d1d5e29","append","__wbg_instanceof_Response_849eb93e75734b6e","result","__wbg_status_61a01141acd3cf74","__wbg_url_5f6dc4009ac5f99d","__wbg_headers_9620bfada380764a","__wbg_iterator_2cee6dadfd956dfa","Symbol","iterator","__wbg_get_e3c254076557e348","__wbindgen_is_function","__wbg_call_27c0f87801dedf93","__wbindgen_is_object","__wbg_next_40fc327bfc8770e6","next","__wbg_next_196c84450b364254","__wbg_done_298b57d23c0fc80c","done","__wbg_value_d93c65011f51a456","value","__wbg_abort_2aa7521d5690750e","abort","__wbg_stringify_8887fe74e1c50d81","__wbindgen_string_get","__wbg_log_0159ca40cddf5b15","log","__wbindgen_bigint_from_u64","__wbg_call_b3ca7c6051f9bec1","__wbg_transaction_new","Transaction$1","__wbg_executionresponse_new","ExecutionResponse$1","__wbg_keypair_new","__wbindgen_module","__wbg_init","__wbindgen_wasm_module","__wbindgen_memory","__wbg_spawnWorker_f6acaddb2e29dc4a","__wbg_newwithlength_66ae46612e7f0234","__wbg_set_d4638f722068f043","__wbindgen_cb_drop","__wbg_arrayBuffer_29931d52c7206b02","__wbg_new_63b92bc8671ed464","__wbg_length_c20a40f15020d68a","__wbg_new_81740750da40724f","state0","cb0","__wbg_new_16b304a2cfa7ff4a","__wbg_push_a5b05aedc7234f9f","__wbindgen_number_new","__wbg_new_abda76e883ba8a5f","__wbg_stack_658279fe44541cf6","__wbg_error_f851667af71bcfc6","deferred0_0","deferred0_1","error","__wbg_buffer_12d079cc21e14bdb","__wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb","__wbg_randomFillSync_5c9c955aa56b6049","randomFillSync","__wbg_subarray_a1f73cd4b5b42fe1","__wbg_getRandomValues_3aa56aa6edec874c","getRandomValues","__wbg_set_a47bac70306a19a7","__wbg_crypto_1d1f22824a6a080c","crypto","__wbg_process_4a72847cc503995b","process","__wbg_versions_f686565e586dd935","versions","__wbg_node_104a2ff8d6ea03a2","node","__wbindgen_is_string","__wbg_require_cca90b1a94a0255b","require","__wbg_msCrypto_eb05e62b530a1508","msCrypto","__wbg_newwithlength_e9b4878cebadb3d3","__wbg_length_cd7af8117672b8b8","__wbg_get_bd8e338fbd5f5cc8","__wbg_self_ce0dbfc45cf2f5be","self","__wbg_window_c6fb939a7f436783","window","__wbg_globalThis_d1e6af4856ba331b","globalThis","__wbg_global_207b558942527489","global","__wbindgen_is_undefined","__wbg_newnoargs_e258087cd0daa0ea","Function","__wbg_has_0af94d20077affa2","has","__wbg_fetch_bc7c8e27076a5c84","fetch","__wbg_fetch_921fad6ef9e883dd","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","__wbg_then_a73caa9a87991566","then","__wbg_then_0c86a60e8fcfe9f6","__wbg_queueMicrotask_481971b0d87f3dd4","queueMicrotask","__wbg_queueMicrotask_3cbae2ec6b6cd3d6","__wbg_resolve_b0083a7967828ec8","__wbg_waitAsync_5d743fc9058ba01a","Atomics","waitAsync","__wbg_new_8cccba86b0f574cb","__wbg_waitAsync_46d5c36955b71a79","__wbg_async_19c0400d97cc72fe","__wbg_value_571d60108110e917","__wbindgen_link_fc1eedd35dc7e0a6","encodeURIComponent","__wbg_new_d1187ae36d662ef9","__wbg_setonmessage_503809e5bb51bd33","onmessage","__wbg_of_6a70eed8d41f469c","of","__wbg_postMessage_7380d10e8b8269df","__wbg_data_3ce7c145ca4fbcdc","data","__wbg_newwithstrandinit_3fd6fba4083ff2d0","Request","__wbg_responseText_c67ed2d48db10769","responseText","__wbindgen_closure_wrapper5752","__wbindgen_closure_wrapper5777","__wbg_init_memory","maybe_memory","Memory","initial","maximum","shared","__wbg_finalize_init","exports","__wbindgen_start","initSync","Module","input","URL","freeze","__proto__","ProgramManager","ProgramManager$1","RecordCiphertext$1","default","wasm_path","wasmInitThreadPool","Private","opt","importHook","serverPath","initializeHook","final_path","Cargo","threads","navigator","hardwareConcurrency","info"],"sourceRoot":""}