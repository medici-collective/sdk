{"version":3,"file":"933.bundle.js","mappings":"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","sources":["webpack://aleo-website/wasm.js","webpack://aleo-website/../js/index.js"],"sourcesContent":["function spawnWorker(url, module, memory, address) {\n        return new Promise((resolve) => {\n            const worker = new Worker(url, {\n                type: \"module\",\n            });\n\n            worker.addEventListener(\"message\", (event) => {\n                // When running in Node, this allows the process to exit\n                // even though the Worker is still running.\n                if (worker.unref) {\n                    worker.unref();\n                }\n\n                resolve(worker);\n            }, {\n                capture: true,\n                once: true,\n            });\n\n            worker.postMessage({\n                module,\n                memory,\n                address,\n            });\n        });\n    }\n\nlet wasm;\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); }\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().slice(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_3.get(state.dtor)(a, state.b);\n\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_34(arg0, arg1, arg2) {\n    wasm.wasm_bindgen__convert__closures__invoke1_mut__h47e001539b710464(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachedBigInt64Memory0 = null;\n\nfunction getBigInt64Memory0() {\n    if (cachedBigInt64Memory0 === null || cachedBigInt64Memory0.buffer !== wasm.memory.buffer) {\n        cachedBigInt64Memory0 = new BigInt64Array(wasm.memory.buffer);\n    }\n    return cachedBigInt64Memory0;\n}\n/**\n* Verify an execution with a single function and a single transition. Executions with multiple\n* transitions or functions will fail to verify. Also, this does not verify that the state root of\n* the execution is included in the Aleo Network ledger.\n*\n* @param {Execution} execution The function execution to verify\n* @param {VerifyingKey} verifying_key The verifying key for the function\n* @param {Program} program The program that the function execution belongs to\n* @param {String} function_id The name of the function that was executed\n* @returns {boolean} True if the execution is valid, false otherwise\n* @param {Execution} execution\n* @param {VerifyingKey} verifying_key\n* @param {Program} program\n* @param {string} function_id\n* @returns {boolean}\n*/\nfunction verifyFunctionExecution(execution, verifying_key, program, function_id) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(execution, Execution);\n        _assertClass(verifying_key, VerifyingKey);\n        _assertClass(program, Program);\n        const ptr0 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.verifyFunctionExecution(retptr, execution.__wbg_ptr, verifying_key.__wbg_ptr, program.__wbg_ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return r0 !== 0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {number} receiver\n*/\nfunction runRayonThread(receiver) {\n    wasm.runRayonThread(receiver);\n}\n\n/**\n* @param {URL} url\n* @param {number} num_threads\n* @returns {Promise<void>}\n*/\nfunction initThreadPool(url, num_threads) {\n    const ret = wasm.initThreadPool(addHeapObject(url), num_threads);\n    return takeObject(ret);\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_194(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h02e038df64ba0b9e(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\n/**\n* Public address of an Aleo account\n*/\nclass Address {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Address.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n    * Derive an Aleo address from a private key\n    *\n    * @param {PrivateKey} private_key The private key to derive the address from\n    * @returns {Address} Address corresponding to the private key\n    * @param {PrivateKey} private_key\n    * @returns {Address}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.address_from_private_key(private_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Derive an Aleo address from a view key\n    *\n    * @param {ViewKey} view_key The view key to derive the address from\n    * @returns {Address} Address corresponding to the view key\n    * @param {ViewKey} view_key\n    * @returns {Address}\n    */\n    static from_view_key(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.address_from_view_key(view_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Create an aleo address object from a string representation of an address\n    *\n    * @param {string} address String representation of an addressm\n    * @returns {Address} Address\n    * @param {string} address\n    * @returns {Address}\n    */\n    static from_string(address) {\n        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.address_from_string(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Get a string representation of an Aleo address object\n    *\n    * @param {Address} Address\n    * @returns {string} String representation of the address\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Verify a signature for a message signed by the address\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {boolean} Boolean representing whether or not the signature is valid\n    * @param {Uint8Array} message\n    * @param {Signature} signature\n    * @returns {boolean}\n    */\n    verify(message, signature) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Signature);\n        const ret = wasm.address_verify(this.__wbg_ptr, ptr0, len0, signature.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n* A program that can be executed on the Aleo blockchain.\n*/\nclass Execution {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Execution.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_execution_free(ptr);\n    }\n    /**\n    * Returns the string representation of the execution.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.execution_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates an execution object from a string representation of an execution.\n    * @param {string} execution\n    * @returns {Execution}\n    */\n    static fromString(execution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(execution, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.execution_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Execution.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo function execution response\n*\n* This object is returned by the execution of an Aleo function off-chain. It provides methods for\n* retrieving the outputs of the function execution.\n*/\nclass ExecutionResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ExecutionResponse.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_executionresponse_free(ptr);\n    }\n    /**\n    * Get the outputs of the executed function\n    *\n    * @returns {Array} Array of strings representing the outputs of the function\n    * @returns {Array<any>}\n    */\n    getOutputs() {\n        const ret = wasm.executionresponse_getOutputs(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns the execution object if present, null if otherwise. Please note that this function\n    * removes the WebAssembly object from the response object and will return null if called a\n    * second time.\n    *\n    * @returns {Execution} The execution object if present, null if otherwise\n    * @returns {Execution | undefined}\n    */\n    getExecution() {\n        const ret = wasm.executionresponse_getExecution(this.__wbg_ptr);\n        return ret === 0 ? undefined : Execution.__wrap(ret);\n    }\n    /**\n    * Returns the program keys if present\n    * @param {string} program_id\n    * @param {string} function_name\n    * @returns {KeyPair}\n    */\n    getKeys(program_id, function_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.executionresponse_getKeys(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass KeyPair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeyPair.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keypair_free(ptr);\n    }\n    /**\n    * Create new key pair from proving and verifying keys\n    *\n    * @param {ProvingKey} proving_key Proving key corresponding to a function in an Aleo program\n    * @param {VerifyingKey} verifying_key Verifying key corresponding to a function in an Aleo program\n    * @returns {KeyPair} Key pair object containing both the function proving and verifying keys\n    * @param {ProvingKey} proving_key\n    * @param {VerifyingKey} verifying_key\n    */\n    constructor(proving_key, verifying_key) {\n        _assertClass(proving_key, ProvingKey);\n        var ptr0 = proving_key.__destroy_into_raw();\n        _assertClass(verifying_key, VerifyingKey);\n        var ptr1 = verifying_key.__destroy_into_raw();\n        const ret = wasm.keypair_new(ptr0, ptr1);\n        return KeyPair.__wrap(ret);\n    }\n    /**\n    * Get the proving key. This method will remove the proving key from the key pair\n    *\n    * @returns {ProvingKey | Error}\n    * @returns {ProvingKey}\n    */\n    provingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_provingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the verifying key. This method will remove the verifying key from the key pair\n    *\n    * @returns {VerifyingKey | Error}\n    * @returns {VerifyingKey}\n    */\n    verifyingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_verifyingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Private key of an Aleo account\n*/\nclass PrivateKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * Generate a new private key using a cryptographically secure random number generator\n    *\n    * @returns {PrivateKey}\n    */\n    constructor() {\n        const ret = wasm.privatekey_new();\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a series of unchecked bytes\n    *\n    * @param {Uint8Array} seed Unchecked 32 byte long Uint8Array acting as the seed for the private key\n    * @returns {PrivateKey}\n    * @param {Uint8Array} seed\n    * @returns {PrivateKey}\n    */\n    static from_seed_unchecked(seed) {\n        const ptr0 = passArray8ToWasm0(seed, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_from_seed_unchecked(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a string representation of a private key\n    *\n    * @param {string} seed String representation of a private key\n    * @returns {PrivateKey}\n    * @param {string} private_key\n    * @returns {PrivateKey}\n    */\n    static from_string(private_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(private_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_string(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the private key. This function should be used very carefully\n    * as it exposes the private key plaintext\n    *\n    * @returns {string} String representation of a private key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the view key corresponding to the private key\n    *\n    * @returns {ViewKey}\n    * @returns {ViewKey}\n    */\n    to_view_key() {\n        const ret = wasm.privatekey_to_view_key(this.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get the address corresponding to the private key\n    *\n    * @returns {Address}\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.address_from_private_key(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Sign a message with the private key\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {Signature} Signature generated by signing the message with the address\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    sign(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(this.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a new randomly generated private key ciphertext using a secret. The secret is sensitive\n    * and will be needed to decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext | Error} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static newEncrypted(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_newEncrypted(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt an existing private key with a secret. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext | Error} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    toCiphertext(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get private key from a private key ciphertext and secret originally used to encrypt it\n    *\n    * @param {PrivateKeyCiphertext} ciphertext Ciphertext representation of the private key\n    * @param {string} secret Secret originally used to encrypt the private key\n    * @returns {PrivateKey | Error} Private key\n    * @param {PrivateKeyCiphertext} ciphertext\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    static fromPrivateKeyCiphertext(ciphertext, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(ciphertext, PrivateKeyCiphertext);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_fromPrivateKeyCiphertext(retptr, ciphertext.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Private Key in ciphertext form\n*/\nclass PrivateKeyCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKeyCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekeyciphertext_free(ptr);\n    }\n    /**\n    * Encrypt a private key using a secret string. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {PrivateKey} private_key Private key to encrypt\n    * @param {string} secret Secret to encrypt the private key with\n    * @returns {PrivateKeyCiphertext | Error} Private key ciphertext\n    * @param {PrivateKey} private_key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static encryptPrivateKey(private_key, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, private_key.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypts a private ciphertext using a secret string. This must be the same secret used to\n    * encrypt the private key\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKey | Error} Private key\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    decryptToPrivateKey(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_decryptToPrivateKey(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the ciphertext string\n    *\n    * @returns {string} Ciphertext string\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekeyciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates a PrivateKeyCiphertext from a string\n    *\n    * @param {string} ciphertext Ciphertext string\n    * @returns {PrivateKeyCiphertext | Error} Private key ciphertext\n    * @param {string} ciphertext\n    * @returns {PrivateKeyCiphertext}\n    */\n    static fromString(ciphertext) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo program\n*\n* This object is required to create an Execution or Deployment transaction. It includes several\n* convenience methods for enumerating available functions and each functions' inputs in a\n* javascript object for usage in creation of web forms for input capture.\n*/\nclass Program {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Program.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_program_free(ptr);\n    }\n    /**\n    * Create a program from a program string\n    *\n    * @param {string} program Aleo program source code\n    * @returns {Program | Error} Program object\n    * @param {string} program\n    * @returns {Program}\n    */\n    static fromString(program) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the program\n    *\n    * @returns {string} String containing the program source code\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Determine if a function is present in the program\n    *\n    * @param {string} functionName Name of the function to check for\n    * @returns {boolean} True if the program is valid, false otherwise\n    * @param {string} function_name\n    * @returns {boolean}\n    */\n    hasFunction(function_name) {\n        const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.program_hasFunction(this.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get javascript array of functions names in the program\n    *\n    * @returns {Array} Array of all function names present in the program\n    *\n    * @example\n    * const expected_functions = [\n    *   \"mint\",\n    *   \"transfer_private\",\n    *   \"transfer_private_to_public\",\n    *   \"transfer_public\",\n    *   \"transfer_public_to_private\",\n    *   \"join\",\n    *   \"split\",\n    *   \"fee\"\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_functions = credits_program.getFunctions();\n    * console.log(credits_functions === expected_functions); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getFunctions() {\n        const ret = wasm.program_getFunctions(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get a javascript object representation of the function inputs and types. This can be used\n    * to generate a web form to capture user inputs for an execution of a function.\n    *\n    * @param {string} function_name Name of the function to get inputs for\n    * @returns {Array | Error} Array of function inputs\n    *\n    * @example\n    * const expected_inputs = [\n    *     {\n    *       type:\"record\",\n    *       visibility:\"private\",\n    *       record:\"credits\",\n    *       members:[\n    *         {\n    *           name:\"microcredits\",\n    *           type:\"u64\",\n    *           visibility:\"private\"\n    *         }\n    *       ],\n    *       register:\"r0\"\n    *     },\n    *     {\n    *       type:\"address\",\n    *       visibility:\"private\",\n    *       register:\"r1\"\n    *     },\n    *     {\n    *       type:\"u64\",\n    *       visibility:\"private\",\n    *       register:\"r2\"\n    *     }\n    * ];\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const transfer_function_inputs = credits_program.getFunctionInputs(\"transfer_private\");\n    * console.log(transfer_function_inputs === expected_inputs); // Output should be \"true\"\n    * @param {string} function_name\n    * @returns {Array<any>}\n    */\n    getFunctionInputs(function_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getFunctionInputs(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a the list of a program's mappings and the names/types of their keys and values.\n    *\n    * @returns {Array | Error} - An array of objects representing the mappings in the program\n    * @example\n    * const expected_mappings = [\n    *    {\n    *       name: \"account\",\n    *       key_name: \"owner\",\n    *       key_type: \"address\",\n    *       value_name: \"microcredits\",\n    *       value_type: \"u64\"\n    *    }\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_mappings = credits_program.getMappings();\n    * console.log(credits_mappings === expected_mappings); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getMappings() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_getMappings(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program record and its types\n    *\n    * @param {string} record_name Name of the record to get members for\n    * @returns {Object | Error} Object containing the record name, type, and members\n    *\n    * @example\n    *\n    * const expected_record = {\n    *     type: \"record\",\n    *     record: \"Credits\",\n    *     members: [\n    *       {\n    *         name: \"owner\",\n    *         type: \"address\",\n    *         visibility: \"private\"\n    *       },\n    *       {\n    *         name: \"microcredits\",\n    *         type: \"u64\",\n    *         visibility: \"private\"\n    *       }\n    *     ];\n    *  };\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_record = credits_program.getRecordMembers(\"Credits\");\n    * console.log(credits_record === expected_record); // Output should be \"true\"\n    * @param {string} record_name\n    * @returns {object}\n    */\n    getRecordMembers(record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getRecordMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program struct and its types\n    *\n    * @param {string} struct_name Name of the struct to get members for\n    * @returns {Array | Error} Array containing the struct members\n    *\n    * @example\n    *\n    * const STRUCT_PROGRAM = \"program token_issue.aleo;\n    *\n    * struct token_metadata:\n    *     network as u32;\n    *     version as u32;\n    *\n    * struct token:\n    *     token_id as u32;\n    *     metadata as token_metadata;\n    *\n    * function no_op:\n    *    input r0 as u64;\n    *    output r0 as u64;\"\n    *\n    * const expected_struct_members = [\n    *    {\n    *      name: \"token_id\",\n    *      type: \"u32\",\n    *    },\n    *    {\n    *      name: \"metadata\",\n    *      type: \"struct\",\n    *      struct_id: \"token_metadata\",\n    *      members: [\n    *       {\n    *         name: \"network\",\n    *         type: \"u32\",\n    *       }\n    *       {\n    *         name: \"version\",\n    *         type: \"u32\",\n    *       }\n    *     ]\n    *   }\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(STRUCT_PROGRAM);\n    * const struct_members = program.getStructMembers(\"token\");\n    * console.log(struct_members === expected_struct_members); // Output should be \"true\"\n    * @param {string} struct_name\n    * @returns {Array<any>}\n    */\n    getStructMembers(struct_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(struct_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getStructMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the credits.aleo program\n    *\n    * @returns {Program} The credits.aleo program\n    * @returns {Program}\n    */\n    static getCreditsProgram() {\n        const ret = wasm.program_getCreditsProgram();\n        return Program.__wrap(ret);\n    }\n    /**\n    * Get the id of the program\n    *\n    * @returns {string} The id of the program\n    * @returns {string}\n    */\n    id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_id(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Determine equality with another program\n    *\n    * @param {Program} other The other program to compare\n    * @returns {boolean} True if the programs are equal, false otherwise\n    * @param {Program} other\n    * @returns {boolean}\n    */\n    isEqual(other) {\n        _assertClass(other, Program);\n        const ret = wasm.program_isEqual(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get program_imports\n    *\n    * @returns {Array} The program imports\n    *\n    * @example\n    *\n    * const DOUBLE_TEST = \"import multiply_test.aleo;\n    *\n    * program double_test.aleo;\n    *\n    * function double_it:\n    *     input r0 as u32.private;\n    *     call multiply_test.aleo/multiply 2u32 r0 into r1;\n    *     output r1 as u32.private;\";\n    *\n    * const expected_imports = [\n    *    \"multiply_test.aleo\"\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(DOUBLE_TEST_PROGRAM);\n    * const imports = program.getImports();\n    * console.log(imports === expected_imports); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getImports() {\n        const ret = wasm.program_getImports(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n/**\n*/\nclass ProgramManager {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_programmanager_free(ptr);\n    }\n    /**\n    * Deploy an Aleo program\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being deployed\n    * @param imports A javascript object holding the source code of any imported programs in the\n    * form \\{\"program_name1\": \"program_source_code\", \"program_name2\": \"program_source_code\", ..\\}.\n    * Note that all imported programs must be deployed on chain before the main program in order\n    * for the deployment to succeed\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the program deployment in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} fee_record\n    * @param {string} url\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    static buildDeploymentTransaction(private_key, program, fee_credits, fee_record, url, imports, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        let ptr1 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr1 = fee_record.__destroy_into_raw();\n        }\n        const ptr2 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr3 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr4 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildDeploymentTransaction(private_key.__wbg_ptr, ptr0, len0, fee_credits, ptr1, ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the fee for a program deployment\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The source code of the program being deployed\n    * @param imports (optional) Provide a list of imports to use for the deployment fee estimation\n    * in the form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @returns {u64 | Error}\n    * @param {string} program\n    * @param {object | undefined} imports\n    * @returns {Promise<bigint>}\n    */\n    static estimateDeploymentFee(program, imports) {\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_estimateDeploymentFee(ptr0, len0, isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the component of the deployment cost which comes from the fee for the program name.\n    * Note that this cost does not represent the entire cost of deployment. It is additional to\n    * the cost of the size (in bytes) of the deployment.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param name The name of the program to be deployed\n    * @returns {u64 | Error}\n    * @param {string} name\n    * @returns {bigint}\n    */\n    static estimateProgramNameCost(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateProgramNameCost(retptr, ptr0, len0);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Execute an arbitrary function locally\n    *\n    * @param {PrivateKey} private_key The private key of the sender\n    * @param {string} program The source code of the program being executed\n    * @param {string} function The name of the function to execute\n    * @param {Array} inputs A javascript array of inputs to the function\n    * @param {boolean} prove_execution If true, the execution will be proven and an execution object\n    * containing the proof and the encrypted inputs and outputs needed to verify the proof offline\n    * will be returned.\n    * @param {boolean} cache Cache the proving and verifying keys in the Execution response.\n    * If this is set to 'true' the keys synthesized will be stored in the Execution Response\n    * and the `ProvingKey` and `VerifyingKey` can be retrieved from the response via the `.getKeys()`\n    * method.\n    * @param {Object | undefined} imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param {ProvingKey | undefined} proving_key (optional) Provide a verifying key to use for the function execution\n    * @param {VerifyingKey | undefined} verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {boolean} prove_execution\n    * @param {boolean} cache\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @returns {Promise<ExecutionResponse>}\n    */\n    static executeFunctionOffline(private_key, program, _function, inputs, prove_execution, cache, imports, proving_key, verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr2 = proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr3 = verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_executeFunctionOffline(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), prove_execution, cache, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr2, ptr3);\n        return takeObject(ret);\n    }\n    /**\n    * Execute Aleo function and create an Aleo execution transaction\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being executed\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * If this is set to 'true' the keys synthesized (or passed in as optional parameters via the\n    * `proving_key` and `verifying_key` arguments) will be stored in the ProgramManager's memory\n    * and used for subsequent transactions. If this is set to 'false' the proving and verifying\n    * keys will be deallocated from memory after the transaction is executed.\n    * @param imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the function execution\n    * @param verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} fee_record\n    * @param {string} url\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    static buildExecutionTransaction(private_key, program, _function, inputs, fee_credits, fee_record, url, imports, proving_key, verifying_key, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        const ptr3 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr4 = proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr5 = verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildExecutionTransaction(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), fee_credits, ptr2, ptr3, len3, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr4, ptr5, ptr6, ptr7);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate Fee for Aleo function execution. Note if \"cache\" is set to true, the proving and\n    * verifying keys will be stored in the ProgramManager's memory and used for subsequent\n    * program executions.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program to estimate the execution fee for\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the fee estimation in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the fee estimation\n    * @param verifying_key (optional) Provide a verifying key to use for the fee estimation\n    * @returns {u64 | Error} Fee in microcredits\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {string} url\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @returns {Promise<bigint>}\n    */\n    static estimateExecutionFee(private_key, program, _function, inputs, url, imports, proving_key, verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr3 = proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr4 = verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_estimateExecutionFee(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the finalize fee component for executing a function. This fee is additional to the\n    * size of the execution of the program in bytes. If the function does not have a finalize\n    * step, then the finalize fee is 0.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The program containing the function to estimate the finalize fee for\n    * @param function The function to estimate the finalize fee for\n    * @returns {u64 | Error} Fee in microcredits\n    * @param {string} program\n    * @param {string} _function\n    * @returns {bigint}\n    */\n    static estimateFinalizeFee(program, _function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateFinalizeFee(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Join two records together to create a new record with an amount of credits equal to the sum\n    * of the credits of the two original records\n    *\n    * @param private_key The private key of the sender\n    * @param record_1 The first record to combine\n    * @param record_2 The second record to combine\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param join_proving_key (optional) Provide a proving key to use for the join function\n    * @param join_verifying_key (optional) Provide a verifying key to use for the join function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {RecordPlaintext} record_1\n    * @param {RecordPlaintext} record_2\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} fee_record\n    * @param {string} url\n    * @param {ProvingKey | undefined} join_proving_key\n    * @param {VerifyingKey | undefined} join_verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    static buildJoinTransaction(private_key, record_1, record_2, fee_credits, fee_record, url, join_proving_key, join_verifying_key, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(record_1, RecordPlaintext);\n        var ptr0 = record_1.__destroy_into_raw();\n        _assertClass(record_2, RecordPlaintext);\n        var ptr1 = record_2.__destroy_into_raw();\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        const ptr3 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(join_proving_key)) {\n            _assertClass(join_proving_key, ProvingKey);\n            ptr4 = join_proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(join_verifying_key)) {\n            _assertClass(join_verifying_key, VerifyingKey);\n            ptr5 = join_verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildJoinTransaction(private_key.__wbg_ptr, ptr0, ptr1, fee_credits, ptr2, ptr3, len3, ptr4, ptr5, ptr6, ptr7);\n        return takeObject(ret);\n    }\n    /**\n    * Split an Aleo credits record into two separate records. This function does not require a fee.\n    *\n    * @param private_key The private key of the sender\n    * @param split_amount The amount of the credit split. This amount will be subtracted from the\n    * value of the record and two new records will be created with the split amount and the remainder\n    * @param amount_record The record to split\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param split_proving_key (optional) Provide a proving key to use for the split function\n    * @param split_verifying_key (optional) Provide a verifying key to use for the split function\n    * @returns {Transaction | Error} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {number} split_amount\n    * @param {RecordPlaintext} amount_record\n    * @param {string} url\n    * @param {ProvingKey | undefined} split_proving_key\n    * @param {VerifyingKey | undefined} split_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    static buildSplitTransaction(private_key, split_amount, amount_record, url, split_proving_key, split_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(amount_record, RecordPlaintext);\n        var ptr0 = amount_record.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(split_proving_key)) {\n            _assertClass(split_proving_key, ProvingKey);\n            ptr2 = split_proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(split_verifying_key)) {\n            _assertClass(split_verifying_key, VerifyingKey);\n            ptr3 = split_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildSplitTransaction(private_key.__wbg_ptr, split_amount, ptr0, ptr1, len1, ptr2, ptr3);\n        return takeObject(ret);\n    }\n    /**\n    * Send credits from one Aleo account to another\n    *\n    * @param private_key The private key of the sender\n    * @param amount_credits The amount of credits to send\n    * @param recipient The recipient of the transaction\n    * @param transfer_type The type of the transfer (options: \"private\", \"public\", \"private_to_public\", \"public_to_private\")\n    * @param amount_record The record to fund the amount from\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param transfer_verifying_key (optional) Provide a verifying key to use for the transfer\n    * function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {number} amount_credits\n    * @param {string} recipient\n    * @param {string} transfer_type\n    * @param {RecordPlaintext | undefined} amount_record\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} fee_record\n    * @param {string} url\n    * @param {ProvingKey | undefined} transfer_proving_key\n    * @param {VerifyingKey | undefined} transfer_verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    static buildTransferTransaction(private_key, amount_credits, recipient, transfer_type, amount_record, fee_credits, fee_record, url, transfer_proving_key, transfer_verifying_key, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(transfer_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(amount_record)) {\n            _assertClass(amount_record, RecordPlaintext);\n            ptr2 = amount_record.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr3 = fee_record.__destroy_into_raw();\n        }\n        const ptr4 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(transfer_proving_key)) {\n            _assertClass(transfer_proving_key, ProvingKey);\n            ptr5 = transfer_proving_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(transfer_verifying_key)) {\n            _assertClass(transfer_verifying_key, VerifyingKey);\n            ptr6 = transfer_verifying_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr7 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr8 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildTransferTransaction(private_key.__wbg_ptr, amount_credits, ptr0, len0, ptr1, len1, ptr2, fee_credits, ptr3, ptr4, len4, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Synthesize proving and verifying keys for a program\n    *\n    * @param program {string} The program source code of the program to synthesize keys for\n    * @param function_id {string} The function to synthesize keys for\n    * @param inputs {Array} The inputs to the function\n    * @param imports {Object | undefined} The imports for the program\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} function_id\n    * @param {Array<any>} inputs\n    * @param {object | undefined} imports\n    * @returns {Promise<KeyPair>}\n    */\n    static synthesizeKeyPair(private_key, program, function_id, inputs, imports) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_synthesizeKeyPair(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n}\n/**\n* Proving key for a function within an Aleo program\n*/\nclass ProvingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ProvingKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_provingkey_free(ptr);\n    }\n    /**\n    * Construct a new proving key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte array representation of a proving key\n    * @returns {ProvingKey | Error}\n    * @param {Uint8Array} bytes\n    * @returns {ProvingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the byte representation of a proving key\n    *\n    * @returns {Uint8Array | Error} Byte array representation of a proving key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a copy of the proving key\n    *\n    * @returns {ProvingKey} A copy of the proving key\n    * @returns {ProvingKey}\n    */\n    copy() {\n        const ret = wasm.provingkey_copy(this.__wbg_ptr);\n        return ProvingKey.__wrap(ret);\n    }\n}\n/**\n* Encrypted Aleo record\n*/\nclass RecordCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordciphertext_free(ptr);\n    }\n    /**\n    * Create a record ciphertext from a string\n    *\n    * @param {string} record String representation of a record ciphertext\n    * @returns {RecordCiphertext | Error} Record ciphertext\n    * @param {string} record\n    * @returns {RecordCiphertext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the string reprensentation of the record ciphertext\n    *\n    * @returns {string} String representation of the record ciphertext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Decrypt the record ciphertext into plaintext using the view key. The record will only\n    * decrypt if the record was encrypted by the account corresponding to the view key\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {RecordPlaintext | Error} Record plaintext object\n    * @param {ViewKey} view_key\n    * @returns {RecordPlaintext}\n    */\n    decrypt(view_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(view_key, ViewKey);\n            wasm.recordciphertext_decrypt(retptr, this.__wbg_ptr, view_key.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Determines if the account corresponding to the view key is the owner of the record\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {boolean}\n    * @param {ViewKey} view_key\n    * @returns {boolean}\n    */\n    isOwner(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.recordciphertext_isOwner(this.__wbg_ptr, view_key.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n* Plaintext representation of an Aleo record\n*/\nclass RecordPlaintext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordPlaintext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordplaintext_free(ptr);\n    }\n    /**\n    * Return a record plaintext from a string.\n    *\n    * @param {string} record String representation of a plaintext representation of an Aleo record\n    * @returns {RecordPlaintext | Error} Record plaintext\n    * @param {string} record\n    * @returns {RecordPlaintext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the record plaintext string\n    *\n    * @returns {string} String representation of the record plaintext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the amount of microcredits in the record\n    *\n    * @returns {u64} Amount of microcredits in the record\n    * @returns {bigint}\n    */\n    microcredits() {\n        const ret = wasm.recordplaintext_microcredits(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Returns the nonce of the record. This can be used to uniquely identify a record.\n    *\n    * @returns {string} Nonce of the record\n    * @returns {string}\n    */\n    nonce() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_nonce(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Attempt to get the serial number of a record to determine whether or not is has been spent\n    *\n    * @param {PrivateKey} private_key Private key of the account that owns the record\n    * @param {string} program_id Program ID of the program that the record is associated with\n    * @param {string} record_name Name of the record\n    * @returns {string | Error} Serial number of the record\n    * @param {PrivateKey} private_key\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {string}\n    */\n    serialNumberString(private_key, program_id, record_name) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_serialNumberString(retptr, this.__wbg_ptr, private_key.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr3 = r0;\n            var len3 = r1;\n            if (r3) {\n                ptr3 = 0; len3 = 0;\n                throw takeObject(r2);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n}\n/**\n* Cryptographic signature of a message signed by an Aleo account\n*/\nclass Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr);\n    }\n    /**\n    * Sign a message with a private key\n    *\n    * @param {PrivateKey} private_key The private key to sign the message with\n    * @param {Uint8Array} message Byte representation of the message to sign\n    * @returns {Signature} Signature of the message\n    * @param {PrivateKey} private_key\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    static sign(private_key, message) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(private_key.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Verify a signature of a message with an address\n    *\n    * @param {Address} address The address to verify the signature with\n    * @param {Uint8Array} message Byte representation of the message to verify\n    * @returns {boolean} True if the signature is valid, false otherwise\n    * @param {Address} address\n    * @param {Uint8Array} message\n    * @returns {boolean}\n    */\n    verify(address, message) {\n        _assertClass(address, Address);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_verify(this.__wbg_ptr, address.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get a signature from a string representation of a signature\n    *\n    * @param {string} signature String representation of a signature\n    * @returns {Signature} Signature\n    * @param {string} signature\n    * @returns {Signature}\n    */\n    static from_string(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_from_string(ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a signature\n    *\n    * @returns {string} String representation of a signature\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo transaction\n*\n* This object is created when generating an on-chain function deployment or execution and is the\n* object that should be submitted to the Aleo Network in order to deploy or execute a function.\n*/\nclass Transaction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Transaction.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n    * Create a transaction from a string\n    *\n    * @param {string} transaction String representation of a transaction\n    * @returns {Transaction | Error}\n    * @param {string} transaction\n    * @returns {Transaction}\n    */\n    static fromString(transaction) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(transaction, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transaction_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the transaction as a string. If you want to submit this transaction to the Aleo Network\n    * this function will create the string that should be submitted in the `POST` data.\n    *\n    * @returns {string} String representation of the transaction\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the id of the transaction. This is the merkle root of the transaction's inclusion proof.\n    *\n    * This value can be used to query the status of the transaction on the Aleo Network to see\n    * if it was successful. If successful, the transaction will be included in a block and this\n    * value can be used to lookup the transaction data on-chain.\n    *\n    * @returns {string} Transaction id\n    * @returns {string}\n    */\n    transactionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the type of the transaction (will return \"deploy\" or \"execute\")\n    *\n    * @returns {string} Transaction type\n    * @returns {string}\n    */\n    transactionType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionType(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n/**\n* Verifying key for a function within an Aleo program\n*/\nclass VerifyingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerifyingKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verifyingkey_free(ptr);\n    }\n    /**\n    * Construct a new verifying key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte representation of a verifying key\n    * @returns {VerifyingKey | Error}\n    * @param {Uint8Array} bytes\n    * @returns {VerifyingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a byte array from a verifying key\n    *\n    * @returns {Uint8Array | Error} Byte representation of a verifying key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a verifying key from string\n    *\n    * @param {String} string String representation of a verifying key\n    * @returns {VerifyingKey | Error}\n    * @param {string} string\n    * @returns {VerifyingKey}\n    */\n    static fromString(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the verifying key\n    *\n    * @returns {String} String representation of the verifying key\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a copy of the verifying key\n    *\n    * @returns {VerifyingKey} A copy of the verifying key\n    * @returns {VerifyingKey}\n    */\n    copy() {\n        const ret = wasm.provingkey_copy(this.__wbg_ptr);\n        return VerifyingKey.__wrap(ret);\n    }\n}\n/**\n*/\nclass ViewKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ViewKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_viewkey_free(ptr);\n    }\n    /**\n    * Create a new view key from a private key\n    *\n    * @param {PrivateKey} private_key Private key\n    * @returns {ViewKey} View key\n    * @param {PrivateKey} private_key\n    * @returns {ViewKey}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.privatekey_to_view_key(private_key.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Create a new view key from a string representation of a view key\n    *\n    * @param {string} view_key String representation of a view key\n    * @returns {ViewKey} View key\n    * @param {string} view_key\n    * @returns {ViewKey}\n    */\n    static from_string(view_key) {\n        const ptr0 = passStringToWasm0(view_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.viewkey_from_string(ptr0, len0);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a view key\n    *\n    * @returns {string} String representation of a view key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.viewkey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the address corresponding to a view key\n    *\n    * @returns {Address} Address\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.address_from_view_key(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Decrypt a record ciphertext with a view key\n    *\n    * @param {string} ciphertext String representation of a record ciphertext\n    * @returns {string} String representation of a record plaintext\n    * @param {string} ciphertext\n    * @returns {string}\n    */\n    decrypt(ciphertext) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.viewkey_decrypt(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_new_daafff584c71593b = function() { return handleError(function () {\n        const ret = new XMLHttpRequest();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_overrideMimeType_1a661d17da5f8baf = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).overrideMimeType(getStringFromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_open_56fa1eb95989f6a5 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4, arg5) {\n        getObject(arg0).open(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4), arg5 !== 0);\n    }, arguments) };\n    imports.wbg.__wbg_send_9f5007eae908c72e = function() { return handleError(function (arg0) {\n        getObject(arg0).send();\n    }, arguments) };\n    imports.wbg.__wbg_response_f2acf2ecbe021710 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).response;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_b51585de1b234aff = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_092e06b0f9d71865 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_new_1eead62f64ca15ce = function() { return handleError(function () {\n        const ret = new Headers();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_append_fda9e3432e3e88da = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_new_55c9955722952374 = function() { return handleError(function () {\n        const ret = new AbortController();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_signal_4bd18fb489af2d4c = function(arg0) {\n        const ret = getObject(arg0).signal;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_instanceof_Response_fc4327dbfcdf5ced = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Response;\n        } catch {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_status_ac85a3142a84caa2 = function(arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    };\n    imports.wbg.__wbg_url_8503de97f69da463 = function(arg0, arg1) {\n        const ret = getObject(arg1).url;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_headers_b70de86b8e989bc0 = function(arg0) {\n        const ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_iterator_97f0c81209c6c35a = function() {\n        const ret = Symbol.iterator;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_get_97b561fb56f034b5 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbg_call_cb65541d95d71282 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_next_526fc47e980da008 = function(arg0) {\n        const ret = getObject(arg0).next;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_ddb3312ca1c4e32a = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).next();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_done_5c1f01fb660d73b5 = function(arg0) {\n        const ret = getObject(arg0).done;\n        return ret;\n    };\n    imports.wbg.__wbg_value_1695675138684bd5 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_abort_654b796176d117aa = function(arg0) {\n        getObject(arg0).abort();\n    };\n    imports.wbg.__wbg_stringify_e25465938f3f611f = function() { return handleError(function (arg0) {\n        const ret = JSON.stringify(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_module = function() {\n        const ret = __wbg_init.__wbindgen_wasm_module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_spawnWorker_8ab39e70e73d7518 = function(arg0, arg1, arg2, arg3) {\n        const ret = spawnWorker(getObject(arg0), getObject(arg1), getObject(arg2), arg3);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_01734de55d61e11d = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_bigint_from_u64 = function(arg0) {\n        const ret = BigInt.asUintN(64, arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_executionresponse_new = function(arg0) {\n        const ret = ExecutionResponse.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_transaction_new = function(arg0) {\n        const ret = Transaction.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_log_86eec937c8576a5b = function(arg0, arg1) {\n        console.log(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbg_newwithlength_3ec098a360da1909 = function(arg0) {\n        const ret = new Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_502d29070ea18557 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbg_keypair_new = function(arg0) {\n        const ret = KeyPair.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_arrayBuffer_288fb3538806e85c = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).arrayBuffer();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_8125e318e6245eed = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_72e2208bbc0efc61 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_new_43f1b47c28813cbd = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_194(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return addHeapObject(ret);\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbg_new_898a68150f225f2e = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_push_ca1c26067ef907ac = function(arg0, arg1) {\n        const ret = getObject(arg0).push(getObject(arg1));\n        return ret;\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_abda76e883ba8a5f = function() {\n        const ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_658279fe44541cf6 = function(arg0, arg1) {\n        const ret = getObject(arg1).stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_error_f851667af71bcfc6 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_subarray_13db269f57aa838d = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_37fa2ca9e4e07fab = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_buffer_085ec1f694018c4f = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_5cf90238115182c3 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_6da8e527659b86aa = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_randomFillSync_dc1e9a60c158336d = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).randomFillSync(takeObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_crypto_c48a774b022d20ac = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_process_298734cf255a885d = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_e2e78e134e3e5d01 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_1cd7a5d853dbea79 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbg_msCrypto_bcb970640f50a1e8 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_e5d69174d6984cd7 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_8f08ceecec0f4fee = function() { return handleError(function () {\n        const ret = module.require;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_length_fff51ee6522a1a18 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_get_44be0491f933a435 = function(arg0, arg1) {\n        const ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_1ff1d729e9aae938 = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_5f4faef6c12b79ec = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_1d39714405582d3c = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_651f05c6a0944d1c = function() { return handleError(function () {\n        const ret = global.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_581967eacc0e2604 = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_has_c5fcd020291e56b8 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.has(getObject(arg0), getObject(arg1));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_fetch_8eaf01857a5bb21f = function(arg0, arg1) {\n        const ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_fetch_b5d6bebed1e6c2d2 = function(arg0) {\n        const ret = fetch(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function(arg0) {\n        throw takeObject(arg0);\n    };\n    imports.wbg.__wbg_then_b2267541e2a73865 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_f7e06ee3c11698eb = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_resolve_53698b95aaf7fcf8 = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_60fb5e2e86467e31 = function() {\n        const ret = Atomics.waitAsync;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_a0af68041688e8fd = function(arg0) {\n        const ret = new Int32Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_73fd6eb3bace0a8d = function(arg0, arg1, arg2) {\n        const ret = Atomics.waitAsync(getObject(arg0), arg1, arg2);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_async_e1a2a669aacf35ff = function(arg0) {\n        const ret = getObject(arg0).async;\n        return ret;\n    };\n    imports.wbg.__wbg_value_555e4f564193db05 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_link_22046963fe0b707a = function(arg0) {\n        const ret = \"data:application/javascript,\" + encodeURIComponent(`onmessage = function (ev) {\n            let [ia, index, value] = ev.data;\n            ia = new Int32Array(ia.buffer);\n            let result = Atomics.wait(ia, index, value);\n            postMessage(result);\n        };\n        `);\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_new_8e7322f46d5d019c = function() { return handleError(function (arg0, arg1) {\n        const ret = new Worker(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setonmessage_f0bd0280573b7084 = function(arg0, arg1) {\n        getObject(arg0).onmessage = getObject(arg1);\n    };\n    imports.wbg.__wbg_of_3f69007bb4eeae65 = function(arg0, arg1, arg2) {\n        const ret = Array.of(getObject(arg0), getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_postMessage_8c609e2bde333d9c = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).postMessage(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_data_ab99ae4a2e1e8bc9 = function(arg0) {\n        const ret = getObject(arg0).data;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithstrandinit_cad5cd6038c7ff5d = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_status_114ef6fe27fb8b00 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_responseText_da275667251fd153 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg1).responseText;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    }, arguments) };\n    imports.wbg.__wbindgen_closure_wrapper5451 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 530, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper5474 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 530, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n    imports.wbg.memory = maybe_memory || new WebAssembly.Memory({initial:168,maximum:65536,shared:true});\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedBigInt64Memory0 = null;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nvar exports = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Address: Address,\n    Execution: Execution,\n    ExecutionResponse: ExecutionResponse,\n    KeyPair: KeyPair,\n    PrivateKey: PrivateKey,\n    PrivateKeyCiphertext: PrivateKeyCiphertext,\n    Program: Program,\n    ProgramManager: ProgramManager,\n    ProvingKey: ProvingKey,\n    RecordCiphertext: RecordCiphertext,\n    RecordPlaintext: RecordPlaintext,\n    Signature: Signature,\n    Transaction: Transaction,\n    VerifyingKey: VerifyingKey,\n    ViewKey: ViewKey,\n    default: __wbg_init,\n    initSync: initSync,\n    initThreadPool: initThreadPool,\n    runRayonThread: runRayonThread,\n    verifyFunctionExecution: verifyFunctionExecution\n});\n\nconst wasm_path = \"assets/aleo_wasm.wasm\";\n\n            \n            var Cargo = async (opt = {}) => {\n                let {importHook, serverPath, initializeHook} = opt;\n\n                let final_path = wasm_path;\n\n                if (serverPath != null) {\n                    final_path = serverPath + /[^\\/\\\\]*$/.exec(final_path)[0];\n                }\n\n                if (importHook != null) {\n                    final_path = importHook(final_path);\n                }\n\n                if (initializeHook != null) {\n                    await initializeHook(__wbg_init, final_path);\n\n                } else {\n                    await __wbg_init(final_path);\n                }\n\n                return exports;\n            };\n\nexport { Cargo as default };\n//# sourceMappingURL=wasm.js.map\n","import wasm from \"../dist/wasm.js\";\n\nconst {\n    initThreadPool: wasmInitThreadPool,\n    Address,\n    ExecutionResponse,\n    Private,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    ProgramManager,\n    Signature,\n    Transaction,\n    ViewKey,\n    VerifyingKey,\n    verifyFunctionExecution,\n} = await wasm({\n    importHook: () => {\n        return new URL(\"assets/aleo_wasm.wasm\", import.meta.url);\n    },\n});\n\nasync function initThreadPool(threads) {\n    if (threads == null) {\n        threads = navigator.hardwareConcurrency;\n    }\n\n    console.info(`Spawning ${threads} threads`);\n\n    await wasmInitThreadPool(new URL(\"worker.js\", import.meta.url), threads);\n}\n\nexport {\n    initThreadPool,\n    Address,\n    ExecutionResponse,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    ProgramManager,\n    Signature,\n    Transaction,\n    ViewKey,\n    VerifyingKey,\n    verifyFunctionExecution,\n};\n"],"names":["spawnWorker","url","module","memory","address","Promise","resolve","worker","Worker","type","addEventListener","event","unref","capture","once","postMessage","wasm","heap","Array","fill","undefined","getObject","idx","push","heap_next","length","dropObject","takeObject","ret","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","Error","cachedUint8Memory0","getUint8Memory0","buffer","Uint8Array","getStringFromWasm0","ptr","len","slice","addHeapObject","obj","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encode","encodeString","arg","view","buf","set","read","written","passStringToWasm0","malloc","realloc","subarray","mem","offset","code","charCodeAt","isLikeNone","x","cachedInt32Memory0","getInt32Memory0","Int32Array","debugString","val","description","name","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","message","stack","makeMutClosure","arg0","arg1","dtor","f","state","a","b","cnt","real","args","__wbindgen_export_3","get","original","__wbg_adapter_34","arg2","wasm_bindgen__convert__closures__invoke1_mut__h47e001539b710464","_assertClass","instance","klass","passArray8ToWasm0","cachedBigInt64Memory0","getBigInt64Memory0","BigInt64Array","verifyFunctionExecution$1","execution","verifying_key","program","function_id","retptr","__wbindgen_add_to_stack_pointer","Execution","VerifyingKey$1","Program$1","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","verifyFunctionExecution","__wbg_ptr","r0","r1","getArrayU8FromWasm0","runRayonThread","receiver","initThreadPool$1","num_threads","initThreadPool","handleError","apply","this","e","__wbindgen_exn_store","__wbg_adapter_194","arg3","wasm_bindgen__convert__closures__invoke2_mut__h02e038df64ba0b9e","Address","__wrap","Object","create","prototype","__destroy_into_raw","free","__wbg_address_free","from_private_key","private_key","PrivateKey$1","address_from_private_key","from_view_key","view_key","ViewKey$1","address_from_view_key","from_string","address_from_string","to_string","deferred1_0","deferred1_1","address_to_string","__wbindgen_free","verify","signature","Signature$1","address_verify","__wbg_execution_free","execution_toString","fromString","execution_fromString","ExecutionResponse","__wbg_executionresponse_free","getOutputs","executionresponse_getOutputs","getExecution","executionresponse_getExecution","getKeys","program_id","function_name","ptr1","len1","executionresponse_getKeys","KeyPair","__wbg_keypair_free","constructor","proving_key","ProvingKey$1","keypair_new","provingKey","keypair_provingKey","verifyingKey","keypair_verifyingKey","PrivateKey","__wbg_privatekey_free","privatekey_new","from_seed_unchecked","seed","privatekey_from_seed_unchecked","privatekey_from_string","privatekey_to_string","to_view_key","privatekey_to_view_key","to_address","Address$1","sign","privatekey_sign","newEncrypted","secret","privatekey_newEncrypted","PrivateKeyCiphertext$1","toCiphertext","privatekey_toCiphertext","fromPrivateKeyCiphertext","ciphertext","privatekey_fromPrivateKeyCiphertext","PrivateKeyCiphertext","__wbg_privatekeyciphertext_free","encryptPrivateKey","decryptToPrivateKey","privatekeyciphertext_decryptToPrivateKey","privatekeyciphertext_toString","privatekeyciphertext_fromString","Program","__wbg_program_free","program_fromString","program_toString","hasFunction","program_hasFunction","getFunctions","program_getFunctions","getFunctionInputs","program_getFunctionInputs","getMappings","program_getMappings","getRecordMembers","record_name","program_getRecordMembers","getStructMembers","struct_name","program_getStructMembers","getCreditsProgram","program_getCreditsProgram","id","isEqual","other","program_isEqual","getImports","program_getImports","__wbg_programmanager_free","buildDeploymentTransaction","fee_credits","fee_record","imports","fee_proving_key","fee_verifying_key","RecordPlaintext$1","ptr2","len2","ptr3","ptr4","programmanager_buildDeploymentTransaction","estimateDeploymentFee","programmanager_estimateDeploymentFee","estimateProgramNameCost","programmanager_estimateProgramNameCost","r2","BigInt","asUintN","executeFunctionOffline","_function","inputs","prove_execution","cache","programmanager_executeFunctionOffline","buildExecutionTransaction","len3","ptr5","ptr6","ptr7","programmanager_buildExecutionTransaction","estimateExecutionFee","programmanager_estimateExecutionFee","estimateFinalizeFee","programmanager_estimateFinalizeFee","buildJoinTransaction","record_1","record_2","join_proving_key","join_verifying_key","programmanager_buildJoinTransaction","buildSplitTransaction","split_amount","amount_record","split_proving_key","split_verifying_key","programmanager_buildSplitTransaction","buildTransferTransaction","amount_credits","recipient","transfer_type","transfer_proving_key","transfer_verifying_key","len4","ptr8","programmanager_buildTransferTransaction","synthesizeKeyPair","programmanager_synthesizeKeyPair","ProvingKey","__wbg_provingkey_free","fromBytes","bytes","provingkey_fromBytes","toBytes","provingkey_toBytes","v1","copy","provingkey_copy","RecordCiphertext","__wbg_recordciphertext_free","record","recordciphertext_fromString","recordciphertext_toString","decrypt","recordciphertext_decrypt","isOwner","recordciphertext_isOwner","RecordPlaintext","__wbg_recordplaintext_free","recordplaintext_fromString","recordplaintext_toString","microcredits","recordplaintext_microcredits","nonce","recordplaintext_nonce","serialNumberString","deferred4_0","deferred4_1","recordplaintext_serialNumberString","r3","Signature","__wbg_signature_free","signature_verify","signature_from_string","signature_to_string","Transaction","__wbg_transaction_free","transaction","transaction_fromString","transaction_toString","transactionId","transaction_transactionId","transactionType","transaction_transactionType","VerifyingKey","__wbg_verifyingkey_free","verifyingkey_fromBytes","verifyingkey_toBytes","string","verifyingkey_fromString","verifyingkey_toString","ViewKey","__wbg_viewkey_free","viewkey_from_string","viewkey_to_string","deferred3_0","deferred3_1","viewkey_decrypt","async","__wbg_load","Response","WebAssembly","instantiateStreaming","headers","console","warn","arrayBuffer","instantiate","Instance","__wbg_get_imports","wbg","__wbindgen_object_drop_ref","__wbg_new_daafff584c71593b","XMLHttpRequest","arguments","__wbg_overrideMimeType_1a661d17da5f8baf","overrideMimeType","__wbg_open_56fa1eb95989f6a5","arg4","arg5","open","__wbg_send_9f5007eae908c72e","send","__wbg_response_f2acf2ecbe021710","response","__wbg_new_b51585de1b234aff","__wbindgen_string_new","__wbg_set_092e06b0f9d71865","Reflect","__wbg_new_1eead62f64ca15ce","Headers","__wbindgen_object_clone_ref","__wbg_append_fda9e3432e3e88da","append","__wbg_new_55c9955722952374","AbortController","__wbg_signal_4bd18fb489af2d4c","signal","__wbg_instanceof_Response_fc4327dbfcdf5ced","result","__wbg_status_ac85a3142a84caa2","status","__wbg_url_8503de97f69da463","__wbg_headers_b70de86b8e989bc0","__wbg_iterator_97f0c81209c6c35a","Symbol","iterator","__wbg_get_97b561fb56f034b5","__wbindgen_is_function","__wbg_call_cb65541d95d71282","__wbindgen_is_object","__wbg_next_526fc47e980da008","next","__wbg_next_ddb3312ca1c4e32a","__wbg_done_5c1f01fb660d73b5","done","__wbg_value_1695675138684bd5","value","__wbg_abort_654b796176d117aa","abort","__wbg_stringify_e25465938f3f611f","__wbindgen_string_get","__wbindgen_module","__wbg_init","__wbindgen_wasm_module","__wbindgen_memory","__wbg_spawnWorker_8ab39e70e73d7518","__wbg_call_01734de55d61e11d","__wbindgen_bigint_from_u64","__wbg_executionresponse_new","ExecutionResponse$1","__wbg_transaction_new","Transaction$1","__wbg_log_86eec937c8576a5b","log","__wbg_newwithlength_3ec098a360da1909","__wbg_set_502d29070ea18557","__wbg_keypair_new","__wbindgen_cb_drop","__wbg_arrayBuffer_288fb3538806e85c","__wbg_new_8125e318e6245eed","__wbg_length_72e2208bbc0efc61","__wbg_new_43f1b47c28813cbd","state0","cb0","__wbg_new_898a68150f225f2e","__wbg_push_ca1c26067ef907ac","__wbindgen_number_new","__wbg_new_abda76e883ba8a5f","__wbg_stack_658279fe44541cf6","__wbg_error_f851667af71bcfc6","deferred0_0","deferred0_1","error","__wbg_subarray_13db269f57aa838d","__wbg_getRandomValues_37fa2ca9e4e07fab","getRandomValues","__wbg_buffer_085ec1f694018c4f","__wbg_set_5cf90238115182c3","__wbg_newwithbyteoffsetandlength_6da8e527659b86aa","__wbg_randomFillSync_dc1e9a60c158336d","randomFillSync","__wbg_crypto_c48a774b022d20ac","crypto","__wbg_process_298734cf255a885d","process","__wbg_versions_e2e78e134e3e5d01","versions","__wbg_node_1cd7a5d853dbea79","node","__wbindgen_is_string","__wbg_msCrypto_bcb970640f50a1e8","msCrypto","__wbg_newwithlength_e5d69174d6984cd7","__wbg_require_8f08ceecec0f4fee","require","__wbg_length_fff51ee6522a1a18","__wbg_get_44be0491f933a435","__wbg_self_1ff1d729e9aae938","self","__wbg_window_5f4faef6c12b79ec","window","__wbg_globalThis_1d39714405582d3c","globalThis","__wbg_global_651f05c6a0944d1c","global","__wbindgen_is_undefined","__wbg_newnoargs_581967eacc0e2604","Function","__wbg_has_c5fcd020291e56b8","has","__wbg_fetch_8eaf01857a5bb21f","fetch","__wbg_fetch_b5d6bebed1e6c2d2","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","__wbg_then_b2267541e2a73865","then","__wbg_then_f7e06ee3c11698eb","__wbg_resolve_53698b95aaf7fcf8","__wbg_waitAsync_60fb5e2e86467e31","Atomics","waitAsync","__wbg_new_a0af68041688e8fd","__wbg_waitAsync_73fd6eb3bace0a8d","__wbg_async_e1a2a669aacf35ff","__wbg_value_555e4f564193db05","__wbindgen_link_22046963fe0b707a","encodeURIComponent","__wbg_new_8e7322f46d5d019c","__wbg_setonmessage_f0bd0280573b7084","onmessage","__wbg_of_3f69007bb4eeae65","of","__wbg_postMessage_8c609e2bde333d9c","__wbg_data_ab99ae4a2e1e8bc9","data","__wbg_newwithstrandinit_cad5cd6038c7ff5d","Request","__wbg_status_114ef6fe27fb8b00","__wbg_responseText_da275667251fd153","responseText","__wbindgen_closure_wrapper5451","__wbindgen_closure_wrapper5474","__wbg_init_memory","maybe_memory","Memory","initial","maximum","shared","__wbg_finalize_init","exports","__wbindgen_start","initSync","Module","input","URL","freeze","__proto__","ProgramManager","ProgramManager$1","RecordCiphertext$1","default","wasm_path","wasmInitThreadPool","Private","opt","importHook","serverPath","initializeHook","final_path","Cargo","threads","navigator","hardwareConcurrency","info"],"sourceRoot":""}