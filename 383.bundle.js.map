{"version":3,"file":"383.bundle.js","mappings":"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","sources":["webpack://aleo-website/../src/utils.ts","webpack://aleo-website/../src/network-client.ts","webpack://aleo-website/../src/function-key-provider.ts","webpack://aleo-website/../src/program-manager.ts","webpack://aleo-website/../src/index.ts","webpack://aleo-website/./src/workers/worker.js"],"sourcesContent":["export async function get(url: URL | string) {\n    const response = await fetch(url);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not get URL \" + url);\n    }\n\n    return response;\n}\n\n\nexport async function post(url: URL | string, options: RequestInit) {\n    options.method = \"POST\";\n\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not post URL \" + url);\n    }\n\n    return response;\n}\n","import { get, post } from \"./utils\";\nimport {\n  Account,\n  Block,\n  RecordCiphertext,\n  Program,\n  RecordPlaintext,\n  PrivateKey,\n  WasmTransaction,\n  Transaction,\n  Transition,\n  logAndThrow\n} from \"./index\";\n\ntype ProgramImports = { [key: string]: string | Program };\n\n/**\n * Client library that encapsulates REST calls to publicly exposed endpoints of Aleo nodes. The methods provided in this\n * allow users to query public information from the Aleo blockchain and submit transactions to the network.\n *\n * @param {string} host\n * @example\n * // Connection to a local node\n * const localNetworkClient = new AleoNetworkClient(\"http://localhost:3030\");\n *\n * // Connection to a public beacon node\n * const publicnetworkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n */\nclass AleoNetworkClient {\n  host: string;\n  account: Account | undefined;\n\n  constructor(host: string) {\n    this.host = host + \"/testnet3\";\n  }\n\n  /**\n   * Set an account to use in networkClient calls\n   *\n   * @param {Account} account\n   * @example\n   * const account = new Account();\n   * networkClient.setAccount(account);\n   */\n  setAccount(account: Account) {\n    this.account = account;\n  }\n\n  /**\n   * Return the Aleo account used in the networkClient\n   *\n   * @example\n   * const account = networkClient.getAccount();\n   */\n  getAccount(): Account | undefined {\n    return this.account;\n  }\n\n  /**\n   * Set a new host for the networkClient\n   *\n   * @param {string} host The address of a node hosting the Aleo API\n   * @param host\n   */\n  setHost(host: string) {\n    this.host = host + \"/testnet3\";\n  }\n\n  async fetchData<Type>(\n      url = \"/\",\n  ): Promise<Type> {\n    try {\n      const response = await get(this.host + url);\n      return await response.json();\n    } catch (error) {\n      throw new Error(\"Error fetching data.\");\n    }\n  }\n\n  /**\n   * Attempts to find unspent records in the Aleo blockchain for a specified private key\n   * @param {number} startHeight - The height at which to start searching for unspent records\n   * @param {number} endHeight - The height at which to stop searching for unspent records\n   * @param {string | PrivateKey} privateKey - The private key to use to find unspent records\n   * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])\n   * @param {number} maxMicrocredits - The maximum number of microcredits to search for\n   * @param {string[]} nonces - The nonces of already found records to exclude from the search\n   *\n   * @example\n   * // Find all unspent records\n   * const privateKey = \"[PRIVATE_KEY]\";\n   * const records = networkClient.findUnspentRecords(0, undefined, privateKey);\n   *\n   * // Find specific amounts\n   * const startHeight = 500000;\n   * const amounts = [600000, 1000000];\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, amounts);\n   *\n   * // Find specific amounts with a maximum number of cumulative microcredits\n   * const maxMicrocredits = 100000;\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, undefined, maxMicrocredits);\n   */\n  async findUnspentRecords(\n      startHeight: number,\n      endHeight: number | undefined,\n      privateKey: string | PrivateKey | undefined,\n      amounts: number[] | undefined,\n      maxMicrocredits?: number | undefined,\n      nonces?: string[] | undefined,\n  ): Promise<Array<RecordPlaintext> | Error> {\n    nonces = nonces || [];\n    // Ensure start height is not negative\n    if (startHeight < 0) {\n      throw new Error(\"Start height must be greater than or equal to 0\");\n    }\n\n    // Initialize search parameters\n    const records = new Array<RecordPlaintext>();\n    let start;\n    let end;\n    let resolvedPrivateKey: PrivateKey;\n    let failures = 0;\n    let totalRecordValue = BigInt(0);\n    let latestHeight: number;\n\n    // Ensure a private key is present to find owned records\n    if (typeof privateKey === \"undefined\") {\n      if (typeof this.account === \"undefined\") {\n        throw new Error(\"Private key must be specified in an argument to findOwnedRecords or set in the AleoNetworkClient\");\n      } else {\n        resolvedPrivateKey = this.account._privateKey;\n      }\n    } else {\n      try {\n        resolvedPrivateKey = privateKey instanceof PrivateKey ? privateKey : PrivateKey.from_string(privateKey);\n      } catch (error) {\n        throw new Error(\"Error parsing private key provided.\");\n      }\n    }\n    const viewKey = resolvedPrivateKey.to_view_key();\n\n    // Get the latest height to ensure the range being searched is valid\n    try {\n      const blockHeight = await this.getLatestHeight();\n      if (typeof blockHeight === \"number\") {\n        latestHeight = blockHeight;\n      } else {\n        throw new Error(\"Error fetching latest block height.\");\n      }\n    } catch (error) {\n      throw new Error(\"Error fetching latest block height.\");\n    }\n\n    // If no end height is specified or is greater than the latest height, set the end height to the latest height\n    if (typeof endHeight === \"number\" && endHeight <= latestHeight) {\n      end = endHeight\n    } else {\n      end = latestHeight;\n    }\n\n    // If the starting is greater than the ending height, return an error\n    if (startHeight > end) {\n      throw new Error(\"Start height must be less than or equal to end height.\");\n    }\n\n    // Iterate through blocks in reverse order in chunks of 50\n    while (end > startHeight) {\n      start = end - 50;\n      if (start < startHeight) {\n        start = startHeight;\n      }\n      try {\n        // Get 50 blocks (or the difference between the start and end if less than 50)\n        const blocks = await this.getBlockRange(start, end);\n        end = start;\n        if (!(blocks instanceof Error)) {\n          // Iterate through blocks to find unspent records\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const transactions = block.transactions;\n            if (!(typeof transactions === \"undefined\")) {\n              for (let j = 0; j < transactions.length; j++) {\n                const confirmedTransaction = transactions[j];\n                // Search for unspent records in execute transactions of credits.aleo\n                if (confirmedTransaction.type == \"execute\") {\n                  const transaction = confirmedTransaction.transaction;\n                  if (transaction.execution && !(typeof transaction.execution.transitions == \"undefined\")) {\n                    for (let k = 0; k < transaction.execution.transitions.length; k++) {\n                      const transition = transaction.execution.transitions[k];\n                      // Only search for unspent records in credits.aleo (for now)\n                      if (transition.program !== \"credits.aleo\") {\n                        continue;\n                      }\n                      if (!(typeof transition.outputs == \"undefined\")) {\n                        for (let l = 0; l < transition.outputs.length; l++) {\n                          const output = transition.outputs[l];\n                          if (output.type === \"record\") {\n                            try {\n                              // Create a wasm record ciphertext object from the found output\n                              const record = RecordCiphertext.fromString(output.value);\n                              // Determine if the record is owned by the specified view key\n                              if (record.isOwner(viewKey)) {\n                                // Decrypt the record and get the serial number\n                                const recordPlaintext = record.decrypt(viewKey);\n\n                                // If the record has already been found, skip it\n                                const nonce = recordPlaintext.nonce();\n                                if (nonces.includes(nonce)) {\n                                  continue;\n                                }\n\n                                // Otherwise record the nonce that has been found\n                                const serialNumber = recordPlaintext.serialNumberString(resolvedPrivateKey, \"credits.aleo\", \"credits\");\n                                // Attempt to see if the serial number is spent\n                                try {\n                                  await this.getTransitionId(serialNumber);\n                                } catch (error) {\n                                  // If it's not found, add it to the list of unspent records\n                                  if (!amounts) {\n                                    records.push(recordPlaintext);\n                                    // If the user specified a maximum number of microcredits, check if the search has found enough\n                                    if (typeof maxMicrocredits === \"number\") {\n                                      totalRecordValue += recordPlaintext.microcredits();\n                                      // Exit if the search has found the amount specified\n                                      if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                        return records;\n                                      }\n                                    }\n                                  }\n                                  // If the user specified a list of amounts, check if the search has found them\n                                  if (!(typeof amounts === \"undefined\") && amounts.length > 0) {\n                                    let amounts_found = 0;\n                                    if (recordPlaintext.microcredits() > amounts[amounts_found]) {\n                                        amounts_found += 1;\n                                        records.push(recordPlaintext);\n                                        // If the user specified a maximum number of microcredits, check if the search has found enough\n                                        if (typeof maxMicrocredits === \"number\") {\n                                          totalRecordValue += recordPlaintext.microcredits();\n                                          // Exit if the search has found the amount specified\n                                          if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                            return records;\n                                          }\n                                        }\n                                        if (records.length >= amounts.length) {\n                                          return records;\n                                        }\n                                    }\n                                  }\n                                }\n                              }\n                            } catch (error) {\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // If there is an error fetching blocks, log it and keep searching\n        console.warn(\"Error fetching blocks in range: \" + start.toString() + \"-\" + end.toString());\n        console.warn(\"Error: \", error);\n        failures += 1;\n        if (failures > 10) {\n          console.warn(\"10 failures fetching records reached. Returning records fetched so far\");\n          return records;\n        }\n      }\n    }\n    return records;\n  }\n\n  /**\n   * Returns the contents of the block at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const block = networkClient.getBlock(1234);\n   */\n  async getBlock(height: number): Promise<Block | Error> {\n    try {\n      const block = await this.fetchData<Block>(\"/block/\" + height);\n      return block;\n    } catch (error) {\n      throw new Error(\"Error fetching block.\");\n    }\n  }\n\n  /**\n   * Returns a range of blocks between the specified block heights\n   *\n   * @param {number} start\n   * @param {number} end\n   * @example\n   * const blockRange = networkClient.getBlockRange(2050, 2100);\n   */\n  async getBlockRange(start: number, end: number): Promise<Array<Block> | Error> {\n    try {\n      return await this.fetchData<Array<Block>>(\"/blocks?start=\" + start + \"&end=\" + end);\n    } catch (error) {\n      const errorMessage = \"Error fetching blocks between \" + start + \" and \" + end + \".\"\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Returns the contents of the latest block\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestBlock();\n   */\n  async getLatestBlock(): Promise<Block | Error> {\n    try {\n      return await this.fetchData<Block>(\"/latest/block\") as Block;\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the hash of the last published block\n   *\n   * @example\n   * const latestHash = networkClient.getLatestHash();\n   */\n  async getLatestHash(): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/latest/hash\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest hash.\");\n    }\n  }\n\n  /**\n   * Returns the latest block height\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestHeight();\n   */\n  async getLatestHeight(): Promise<number | Error> {\n    try {\n      return await this.fetchData<number>(\"/latest/height\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest height.\");\n    }\n  }\n\n  /**\n   * Returns the source code of a program given a program ID\n   *\n   * @param {string} programId The program ID of a program deployed to the Aleo Network\n   * @return {Promise<string>} Source code of the program\n   *\n   * @example\n   * const program = networkClient.getProgram(\"hello_hello.aleo\");\n   * const expectedSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * assert.equal(program, expectedSource);\n   */\n  async getProgram(programId: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId)\n    } catch (error) {\n      throw new Error(\"Error fetching program\");\n    }\n  }\n\n  /**\n   * Returns a program object from a program ID or program source code\n   *\n   * @param {string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @return {Promise<Program | Error>} Source code of the program\n   *\n   * @example\n   * const programID = \"hello_hello.aleo\";\n   * const programSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   *\n   * // Get program object from program ID or program source code\n   * const programObjectFromID = await networkClient.getProgramObject(programID);\n   * const programObjectFromSource = await networkClient.getProgramObject(programSource);\n   *\n   * // Both program objects should be equal\n   * assert.equal(programObjectFromID.to_string(), programObjectFromSource.to_string());\n   */\n  async getProgramObject(inputProgram: string): Promise<Program | Error> {\n    try {\n      return Program.fromString(inputProgram);\n    } catch (error) {\n      try {\n        return Program.fromString(<string>(await this.getProgram(inputProgram)));\n      } catch (error) {\n        throw new Error(`${inputProgram} is neither a program name or a valid program`);\n      }\n    }\n  }\n\n  /**\n   *  Returns an object containing the source code of a program and the source code of all programs it imports\n   *\n   * @param {Program | string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @returns {Promise<ProgramImports>} Object of the form { \"program_id\": \"program_source\", .. } containing program id & source code for all program imports\n   *\n   * @example\n   * const double_test_source = \"import multiply_test.aleo;\\n\\nprogram double_test.aleo;\\n\\nfunction double_it:\\n    input r0 as u32.private;\\n    call multiply_test.aleo/multiply 2u32 r0 into r1;\\n    output r1 as u32.private;\\n\"\n   * const double_test = Program.fromString(double_test_source);\n   * const expectedImports = {\n   *     \"multiply_test.aleo\": \"program multiply_test.aleo;\\n\\nfunction multiply:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    mul r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * }\n   *\n   * // Imports can be fetched using the program ID, source code, or program object\n   * let programImports = await networkClient.getProgramImports(\"double_test.aleo\");\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program source code\n   * programImports = await networkClient.getProgramImports(double_test_source);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program object\n   * programImports = await networkClient.getProgramImports(double_test);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   */\n  async getProgramImports(inputProgram: Program | string): Promise<ProgramImports | Error> {\n    try {\n      const imports: ProgramImports = {};\n\n      // Get the program object or fail if the program is not valid or does not exist\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n\n      // Get the list of programs that the program imports\n      const importList = program.getImports();\n\n      // Recursively get any imports that the imported programs have in a depth first search order\n      for (let i = 0; i < importList.length; i++) {\n        const import_id = importList[i];\n        if (!imports.hasOwnProperty(import_id)) {\n          const programSource = <string>await this.getProgram(import_id);\n          const nestedImports = <ProgramImports>await this.getProgramImports(import_id);\n          for (const key in nestedImports) {\n            if (!imports.hasOwnProperty(key)) {\n              imports[key] = nestedImports[key];\n            }\n          }\n          imports[import_id] = programSource;\n        }\n      }\n      return imports;\n    } catch (error) {\n      throw logAndThrow(\"Error fetching program imports: \" + error)\n    }\n  }\n\n  /**\n   * Get a list of the program names that a program imports\n   *\n   * @param {Program | string} inputProgram - The program id or program source code to get the imports of\n   * @returns {string[]} - The list of program names that the program imports\n   *\n   * @example\n   * const programImportsNames = networkClient.getProgramImports(\"double_test.aleo\");\n   * const expectedImportsNames = [\"multiply_test.aleo\"];\n   * assert.deepStrictEqual(programImportsNames, expectedImportsNames);\n   */\n  async getProgramImportNames(inputProgram: Program | string): Promise<string[] | Error> {\n    try {\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n      return program.getImports();\n    } catch (error) {\n      throw new Error(\"Error fetching program imports with error: \" + error);\n    }\n  }\n\n  /**\n   * Returns the names of the mappings of a program\n   *\n   * @param {string} programId - The program ID to get the mappings of (e.g. \"credits.aleo\")\n   * @example\n   * const mappings = networkClient.getProgramMappingNames(\"credits.aleo\");\n   * const expectedMappings = [\"account\"];\n   * assert.deepStrictEqual(mappings, expectedMappings);\n   */\n  async getProgramMappingNames(programId: string): Promise<Array<string> | Error> {\n    try {\n      return await this.fetchData<Array<string>>(\"/program/\" + programId + \"/mappings\")\n    } catch (error) {\n      throw new Error(\"Error fetching program mappings - ensure the program exists on chain before trying again\");\n    }\n  }\n\n  /**\n   * Returns the value of a program's mapping for a specific key\n   *\n   * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n   * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"account\")\n   * @param {string} key - The key of the mapping to get the value of (e.g. \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\")\n   * @return {Promise<string>} String representation of the value of the mapping\n   *\n   * @example\n   * // Get public balance of an account\n   * const mappingValue = networkClient.getMappingValue(\"credits.aleo\", \"account\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n   * const expectedValue = \"0u64\";\n   * assert.equal(mappingValue, expectedValue);\n   */\n  async getProgramMappingValue(programId: string, mappingName: string, key: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId + \"/mapping/\" + mappingName + \"/\" + key)\n    } catch (error) {\n      throw new Error(\"Error fetching mapping value - ensure the mapping exists and the key is correct\");\n    }\n  }\n\n  /**\n   * Returns the latest state/merkle root of the Aleo blockchain\n   *\n   * @example\n   * const stateRoot = networkClient.getStateRoot();\n   */\n  async getStateRoot(): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/latest/stateRoot\");\n    } catch (error) {\n      throw new Error(\"Error fetching Aleo state root\");\n    }\n  }\n\n  /**\n   * Returns a transaction by its unique identifier\n   *\n   * @param {string} id\n   * @example\n   * const transaction = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n   */\n  async getTransaction(id: string): Promise<Transaction | Error> {\n    try {\n      return await this.fetchData<Transaction>(\"/transaction/\" + id);\n    } catch (error) {\n      throw new Error(\"Error fetching transaction.\");\n    }\n  }\n\n  /**\n   * Returns the transactions present at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const transactions = networkClient.getTransactions(654);\n   */\n  async getTransactions(height: number): Promise<Array<Transaction> | Error> {\n    try {\n      return await this.fetchData<Array<Transaction>>(\"/block/\" + height.toString() + \"/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions.\");\n    }\n  }\n\n  /**\n   * Returns the transactions in the memory pool.\n   *\n   * @example\n   * const transactions = networkClient.getTransactionsInMempool();\n   */\n  async getTransactionsInMempool(): Promise<Array<Transaction> | Error> {\n    try {\n      return await this.fetchData<Array<Transaction>>(\"/memoryPool/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions from mempool.\");\n    }\n  }\n\n  /**\n   * Returns the transition id by its unique identifier\n   * @param {string} transition_id - The transition id to get\n   *\n   * @example\n   * const transition = networkClient.getTransitionId(\"2429232855236830926144356377868449890830704336664550203176918782554219952323field\");\n   */\n  async getTransitionId(transition_id: string): Promise<Transition | Error> {\n    try {\n      return await this.fetchData<Transition>(\"/find/transitionID/\" + transition_id);\n    } catch (error) {\n      throw new Error(\"Error fetching transition ID.\");\n    }\n  }\n\n  /**\n   * Submit an execute or deployment transaction to the Aleo network\n   *\n   * @param {WasmTransaction | string} transaction  - The transaction to submit to the network\n   * @returns {string | Error} - The transaction id of the submitted transaction or the resulting error\n   */\n  async submitTransaction(transaction: WasmTransaction | string): Promise<string | Error> {\n    const transaction_string = transaction instanceof WasmTransaction ? transaction.toString() : transaction;\n    try {\n      const response = await post(this.host + \"/transaction/broadcast\", {\n        body: transaction_string,\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      try {\n        return await response.json();\n\n      } catch (error) {\n        throw new Error(`Error posting transaction. Aleo network response: ${(error as Error).message}`);\n      }\n    } catch (error) {\n      throw new Error(`Error posting transaction: No response received: ${(error as Error).message}`);\n    }\n  }\n}\n\nexport { AleoNetworkClient, ProgramImports }\n","import { ProvingKey, VerifyingKey, CREDITS_PROGRAM_KEYS, KEY_STORE, PRIVATE_TRANSFER, PRIVATE_TO_PUBLIC_TRANSFER, PUBLIC_TRANSFER, PUBLIC_TO_PRIVATE_TRANSFER} from \"./index\";\nimport { get } from \"./utils\";\n\ntype FunctionKeyPair = [ProvingKey, VerifyingKey];\ntype CachedKeyPair = [Uint8Array, Uint8Array];\ntype AleoKeyProviderInitParams = {\n    proverUri?: string;\n    verifierUri?: string;\n    cacheKey?: string;\n};\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface KeySearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * AleoKeyProviderParams search parameter for the AleoKeyProvider. It allows for the specification of a proverUri and\n * verifierUri to fetch keys via HTTP from a remote resource as well as a unique cacheKey to store the keys in memory.\n */\nclass AleoKeyProviderParams implements KeySearchParams {\n    proverUri: string | undefined;\n    verifierUri: string | undefined;\n    cacheKey: string | undefined;\n\n    /**\n     * Create a new AleoKeyProviderParams object which implements the KeySearchParams interface. Users can optionally\n     * specify a url for the proverUri & verifierUri to fetch keys via HTTP from a remote resource as well as a unique\n     * cacheKey to store the keys in memory for future use. If no proverUri or verifierUri is specified, a cachekey must\n     * be provided.\n     *\n     * @param { AleoKeyProviderInitParams } params - Optional search parameters\n     */\n    constructor(params: {proverUri?: string, verifierUri?: string, cacheKey?: string}) {\n        this.proverUri = params.proverUri;\n        this.verifierUri = params.verifierUri;\n        this.cacheKey = params.cacheKey;\n    }\n}\n\n/**\n * KeyProvider interface. Enables the retrieval of public proving and verifying keys for Aleo Programs.\n */\ninterface FunctionKeyProvider {\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a search object which implements the KeySearchParams interface\n     * class IndexDbSearch implements KeySearchParams {\n     *     db: string\n     *     keyId: string\n     *     constructor(params: {db: string, keyId: string}) {\n     *         this.db = params.db;\n     *         this.keyId = params.keyId;\n     *     }\n     * }\n     *\n     * // Create a new object which implements the KeyProvider interface\n     * class IndexDbKeyProvider implements FunctionKeyProvider {\n     *     async functionKeys(params: KeySearchParams): Promise<FunctionKeyPair | Error> {\n     *         return new Promise((resolve, reject) => {\n     *             const request = indexedDB.open(params.db, 1);\n     *\n     *             request.onupgradeneeded = function(e) {\n     *                 const db = e.target.result;\n     *                 if (!db.objectStoreNames.contains('keys')) {\n     *                     db.createObjectStore('keys', { keyPath: 'id' });\n     *                 }\n     *             };\n     *\n     *             request.onsuccess = function(e) {\n     *                 const db = e.target.result;\n     *                 const transaction = db.transaction([\"keys\"], \"readonly\");\n     *                 const store = transaction.objectStore(\"keys\");\n     *                 const request = store.get(params.keyId);\n     *                 request.onsuccess = function(e) {\n     *                     if (request.result) {\n     *                         resolve(request.result as FunctionKeyPair);\n     *                     } else {\n     *                         reject(new Error(\"Key not found\"));\n     *                     }\n     *                 };\n     *                 request.onerror = function(e) { reject(new Error(\"Error fetching key\")); };\n     *             };\n     *\n     *             request.onerror = function(e) { reject(new Error(\"Error opening database\")); };\n     *         });\n     *     }\n     *\n     *     // implement the other methods...\n     * }\n     *\n     *\n     * const keyProvider = new AleoKeyProvider();\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const searchParams = new IndexDbSearch({db: \"keys\", keyId: \"credits.aleo:transferPrivate\"});\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(searchParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get join function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get split function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_private function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void;\n}\n\n/**\n * AleoKeyProvider class. Implements the KeyProvider interface. Enables the retrieval of Aleo program proving and\n * verifying keys for the credits.aleo program over http from official Aleo sources and storing and retrieving function\n * keys from a local memory cache.\n */\nclass AleoKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n    cacheOption: boolean;\n    keyUris: string;\n\n    async fetchBytes(\n        url = \"/\",\n    ): Promise<Uint8Array> {\n        try {\n            const response = await get(url);\n            const data = await response.arrayBuffer();\n            return new Uint8Array(data);\n        } catch (error) {\n            throw new Error(\"Error fetching data.\" + error);\n        }\n    }\n\n    constructor() {\n        this.keyUris = KEY_STORE;\n        this.cache = new Map<string, CachedKeyPair>();\n        this.cacheOption = false;\n    }\n\n    /**\n     * Use local memory to store keys\n     *\n     * @param {boolean} useCache whether to store keys in local memory\n     */\n    useCache(useCache: boolean) {\n        this.cacheOption = useCache;\n    }\n\n    /**\n     * Clear the key cache\n     */\n    clearCache() {\n        this.cache.clear();\n    }\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair) {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    }\n\n    /**\n     * Determine if a keyId exists in the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair\n     * @returns {boolean} true if the keyId exists in the cache, false otherwise\n     */\n    containsKeys(keyId: string): boolean {\n        return this.cache.has(keyId)\n    }\n\n    /**\n     * Delete a set of keys from the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair to delete from memory\n     * @returns {boolean} true if the keyId exists in the cache and was deleted, false if the key did not exist\n     */\n    deleteKeys(keyId: string): boolean {\n        return this.cache.delete(keyId)\n    }\n\n    /**\n     * Get a set of keys from the cache\n     * @param keyId keyId of a proving and verifying key pair\n     *\n     * @returns {FunctionKeyPair | Error} Proving and verifying keys for the specified program\n     */\n    getKeys(keyId: string): FunctionKeyPair | Error {\n        console.debug(`Checking if key exists in cache. KeyId: ${keyId}`)\n        if (this.cache.has(keyId)) {\n            const [provingKeyBytes, verifyingKeyBytes] = <CachedKeyPair>this.cache.get(keyId);\n            return [ProvingKey.fromBytes(provingKeyBytes), VerifyingKey.fromBytes(verifyingKeyBytes)];\n        } else {\n            return new Error(\"Key not found in cache.\");\n        }\n    }\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams} params parameters for the key search in form of: {proverUri: string, verifierUri: string, cacheKey: string}\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * const AleoProviderParams = new AleoProviderParams(\"https://testnet3.parameters.aleo.org/transfer_private.\");\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually using the key provider\n     * const keySearchParams = { \"cacheKey\": \"myProgram:myFunction\" };\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(keySearchParams);\n     */\n    async functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error> {\n        if (params) {\n            let proverUrl;\n            let verifierUrl;\n            let cacheKey;\n            if (\"proverUrl\" in params && typeof params[\"proverUrl\"] == \"string\") {\n                proverUrl = params[\"proverUrl\"];\n            }\n\n            if (\"verifierUrl\" in params && typeof params[\"verifierUrl\"] == \"string\") {\n                verifierUrl = params[\"verifierUrl\"];\n            }\n\n            if (\"cacheKey\" in params && typeof params[\"cacheKey\"] == \"string\") {\n                cacheKey = params[\"cacheKey\"];\n            }\n\n            if (proverUrl && verifierUrl) {\n                return await this.fetchKeys(proverUrl, verifierUrl, cacheKey);\n            }\n\n            if (cacheKey) {\n                return this.getKeys(cacheKey);\n            }\n        }\n        throw Error(\"Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl\");\n    }\n\n    /**\n     * Returns the proving and verifying keys for a specified program from a specified url.\n     *\n     * @param {string} verifierUrl Url of the proving key\n     * @param {string} proverUrl Url the verifying key\n     * @param {string} cacheKey Key to store the keys in the cache\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new AleoKeyProvider object\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.fetchKeys(\"https://testnet3.parameters.aleo.org/transfer_private.prover.2a9a6f2\", \"https://testnet3.parameters.aleo.org/transfer_private.verifier.3a59762\");\n     */\n    async fetchKeys(proverUrl: string, verifierUrl: string, cacheKey?: string): Promise<FunctionKeyPair | Error> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return [ProvingKey.fromBytes(value[0]), VerifyingKey.fromBytes(value[1])];\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                    console.debug(\"Fetching verifying keys \" + verifierUrl);\n                    const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                    this.cache.set(cacheKey, [provingKey.toBytes(), verifyingKey.toBytes()]);\n                    return [provingKey, verifyingKey];\n                }\n            }\n            else {\n                // If cache is disabled, fetch the keys and return them\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                return [provingKey, verifyingKey];\n            }\n        } catch (error) {\n            throw new Error(`Error: ${error} fetching fee proving and verifying keys from ${proverUrl} and ${verifierUrl}.`);\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the transfer functions in the credits.aleo program\n     * @param {string} visibility Visibility of the transfer function\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the transfer functions\n     *\n     * @example\n     * // Create a new AleoKeyProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    async transferKeys(visibility: string): Promise<FunctionKeyPair | Error> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private.prover, CREDITS_PROGRAM_KEYS.transfer_private.verifier);\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private_to_public.prover, CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier);\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public.prover, CREDITS_PROGRAM_KEYS.transfer_public.verifier);\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public_to_private.prover, CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier);\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the join function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    async joinKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.join.prover, CREDITS_PROGRAM_KEYS.join.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the split function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the split function\n     * */\n    async splitKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.split.prover, CREDITS_PROGRAM_KEYS.split.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_private function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePrivateKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_private.prover, CREDITS_PROGRAM_KEYS.fee_private.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_public function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePublicKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_public.prover, CREDITS_PROGRAM_KEYS.fee_public.verifier);\n    }\n\n    /**\n     * Gets a verifying key. If the verifying key is for a credits.aleo function, get it from the wasm cache otherwise\n     *\n     * @returns {Promise<VerifyingKey | Error>} Verifying key for the function\n     */\n    // attempt to fetch it from the network\n    async getVerifyingKey(verifierUrl: string): Promise<VerifyingKey | Error> {\n        switch (verifierUrl) {\n            case CREDITS_PROGRAM_KEYS.fee_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.fee_private.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.fee_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.fee_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.inclusion.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.inclusion.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.join.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.join.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.split.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.split.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_private.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifyingKey);\n            default:\n                return <VerifyingKey>VerifyingKey.fromBytes(await this.fetchBytes(verifierUrl));\n        }\n    }\n}\n\nexport {AleoKeyProvider, AleoKeyProviderParams, AleoKeyProviderInitParams, CachedKeyPair, FunctionKeyPair, FunctionKeyProvider, KeySearchParams}\n","import {\n    Account,\n    AleoKeyProvider,\n    AleoNetworkClient,\n    ExecutionResponse,\n    FunctionKeyProvider,\n    FunctionKeyPair,\n    KeySearchParams,\n    RecordPlaintext,\n    RecordProvider,\n    RecordSearchParams,\n    PrivateKey,\n    Program,\n    ProgramImports,\n    ProvingKey,\n    VerifyingKey,\n    PRIVATE_TRANSFER_TYPES,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n    ProgramManagerBase as WasmProgramManager,\n} from \"./index\";\n\n\n\n/**\n * The ProgramManager class is used to execute and deploy programs on the Aleo network and create value transfers.\n */\nclass ProgramManager {\n    account: Account | undefined;\n    keyProvider: FunctionKeyProvider;\n    host: string;\n    networkClient: AleoNetworkClient;\n    recordProvider: RecordProvider | undefined;\n\n    /** Create a new instance of the ProgramManager\n     *\n     * @param { string | undefined } host A host uri running the official Aleo API\n     * @param { FunctionKeyProvider | undefined } keyProvider A key provider that implements {@link FunctionKeyProvider} interface\n     * @param { RecordProvider | undefined } recordProvider A record provider that implements {@link RecordProvider} interface\n     */\n    constructor(host: string | undefined, keyProvider: FunctionKeyProvider | undefined, recordProvider: RecordProvider | undefined) {\n        if (!host) {\n            this.host = \"https://vm.aleo.org/api\";\n            this.networkClient = new AleoNetworkClient(this.host);\n        } else {\n            this.host = host;\n            this.networkClient = new AleoNetworkClient(host);\n        }\n\n        if (!keyProvider) {\n            this.keyProvider = new AleoKeyProvider();\n        } else {\n            this.keyProvider = keyProvider;\n        }\n\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Set the account to use for transaction submission to the Aleo network\n     *\n     * @param {Account} account Account to use for transaction submission\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Set the key provider that provides the proving and verifying keys for programs\n     *\n     * @param {FunctionKeyProvider} keyProvider\n     */\n    setKeyProvider(keyProvider: FunctionKeyProvider) {\n        this.keyProvider = keyProvider;\n    }\n\n    /**\n     * Set the host peer to use for transaction submission to the Aleo network\n     *\n     * @param host {string} Peer url to use for transaction submission\n     */\n    setHost(host: string) {\n        this.host = host;\n        this.networkClient.setHost(host);\n    }\n\n    /**\n     * Set the record provider that provides records for transactions\n     *\n     * @param {RecordProvider} recordProvider\n     */\n    setRecordProvider(recordProvider: RecordProvider) {\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Deploy an Aleo program to the Aleo network\n     *\n     * @param {string} program Program source code\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to use\n     * pay the deployment fee\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {string | Error} The transaction id of the deployed program or a failure message from the network\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for deployments\n     * const program = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     *\n     * // Define a fee in credits\n     * const fee = 1.2;\n     *\n     * // Deploy the program\n     * const tx_id = await programManager.deploy(program, fee);\n     *\n     * // Verify the transaction was successful\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async deploy(\n        program: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        feeRecord?: string | RecordPlaintext,\n        privateKey?: PrivateKey,\n    ): Promise<string | Error> {\n        // Ensure the program is valid and does not exist on the network\n        try {\n            const programObject = Program.fromString(program);\n            let programSource;\n            try {\n                programSource = this.networkClient.getProgram(programObject.id());\n            } catch (e) {\n                // Program does not exist on the network, deployment can proceed\n                console.log(`Program ${programObject.id()} does not exist on the network, deploying...`);\n            }\n            if (typeof programSource == \"string\") {\n                throw (`Program ${programObject.id()} already exists on the network, please rename your program`);\n            }\n        } catch (e) {\n            throw logAndThrow(`Error validating program: ${e}`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let deploymentPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            deploymentPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof deploymentPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n        } catch (e) {\n            throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build a deployment transaction and submit it to the network\n        const tx = await WasmProgramManager.buildDeploymentTransaction(deploymentPrivateKey, program, fee, feeRecord, this.host, imports, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Execute an Aleo program on the Aleo network\n     *\n     * @param {string} programName Program name containing the function to be executed\n     * @param {string} functionName Function name to execute\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {string[]} inputs Inputs to the function\n     * @param {RecordSearchParams} recordSearchParams Optional parameters for searching for a record to pay the fee for\n     * the execution transaction\n     * @param {KeySearchParams} keySearchParams Optional parameters for finding the matching proving & verifying keys\n     * for the function\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * const keySearchParams = { \"cacheKey\": \"hello_hello:hello\" };\n     * const tx_id = await programManager.execute(programName, \"hello_hello\", 0.020, [\"5u32\", \"5u32\"], undefined, undefined, undefined, keySearchParams);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async execute(\n        programName: string,\n        functionName: string,\n        fee: number,\n        privateFee: boolean,\n        inputs: string[],\n        recordSearchParams?: RecordSearchParams,\n        keySearchParams?: KeySearchParams,\n        feeRecord?: string | RecordPlaintext,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n    ): Promise<string | Error> {\n        // Ensure the function exists on the network\n        let program;\n        try {\n            program = <string>(await this.networkClient.getProgram(programName));\n        } catch (e) {\n            throw logAndThrow(`Error finding ${programName}. Network response: '${e}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the fee proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(programName);\n        } catch (e) {\n            throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildExecutionTransaction(executionPrivateKey, program, functionName, inputs, fee, feeRecord, this.host, imports, provingKey, verifyingKey, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Execute an Aleo program in offline mode\n     *\n     * @param {string} program Program source code containing the function to be executed\n     * @param {string} function_name Function name to execute\n     * @param {string[]} inputs Inputs to the function\n     * @param {number} proveExecution Whether to prove the execution of the function and return an execution transcript\n     * that contains the proof.\n     * @param {string[] | undefined} imports Optional imports to the program\n     * @param {KeySearchParams | undefined} keySearchParams Optional parameters for finding the matching proving &\n     * verifying keys for the function\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * import { Account, Program } from '@aleohq/sdk';\n     *\n     * /// Create the source for the \"helloworld\" program\n     * const program = \"program helloworld.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager();\n     *\n     * /// Create a temporary account for the execution of the program\n     * const account = new Account();\n     * programManager.setAccount(account);\n     *\n     * /// Get the response and ensure that the program executed correctly\n     * const executionResponse = await programManager.executeOffline(program, \"hello\", [\"5u32\", \"5u32\"]);\n     * const result = executionResponse.getOutputs();\n     * assert(result === [\"10u32\"]);\n     */\n    async executeOffline(\n        program: string,\n        function_name: string,\n        inputs: string[],\n        proveExecution: boolean,\n        imports?: ProgramImports,\n        keySearchParams?: KeySearchParams,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n    ): Promise<ExecutionResponse> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Run the program offline and return the result\n        console.log(\"Running program offline\")\n        console.log(\"Proving key: \", provingKey);\n        console.log(\"Verifying key: \", verifyingKey);\n        return WasmProgramManager.executeFunctionOffline(executionPrivateKey, program, function_name, inputs, proveExecution, false, imports, provingKey, verifyingKey);\n    }\n\n    /**\n     * Join two credits records into a single credits record\n     *\n     * @param {RecordPlaintext | string} recordOne First credits record to join\n     * @param {RecordPlaintext | string} recordTwo Second credits record to join\n     * @param {number} fee Fee in credits pay for the join transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the fee record to use\n     * to pay the fee for the join transaction\n     * @param {RecordPlaintext | string | undefined} feeRecord Fee record to use for the join transaction\n     * @param {PrivateKey | undefined} privateKey Private key to use for the join transaction\n     * @returns {Promise<string | Error>}\n     */\n    async join(\n        recordOne: RecordPlaintext | string,\n        recordTwo: RecordPlaintext | string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams | undefined,\n        feeRecord?: RecordPlaintext | string | undefined,\n        privateKey?: PrivateKey\n    ): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let joinKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            joinKeys = <FunctionKeyPair>await this.keyProvider.joinKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [joinProvingKey, joinVerifyingKey] = joinKeys;\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Validate the records provided are valid plaintext records\n        try {\n            recordOne = recordOne instanceof RecordPlaintext ? recordOne : RecordPlaintext.fromString(recordOne);\n            recordTwo = recordTwo instanceof RecordPlaintext ? recordTwo : RecordPlaintext.fromString(recordTwo);\n        } catch (e) {\n            throw logAndThrow('Records provided are not valid. Please ensure they are valid plaintext records.')\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildJoinTransaction(executionPrivateKey, recordOne, recordTwo, fee, feeRecord, this.host, joinProvingKey, joinVerifyingKey, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Split credits into two new credits records\n     *\n     * @param {number} splitAmount Amount in microcredits to split from the original credits record\n     * @param {RecordPlaintext | string} amountRecord Amount record to use for the split transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the split transaction\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * const record = \"{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 4106205762862305308495708971985748592380064201230396559307556388725936304984group.public}\"\n     * const tx_id = await programManager.split(25000000, record);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async split(splitAmount: number, amountRecord: RecordPlaintext | string, privateKey?: PrivateKey): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the split keys from the key provider\n        let splitKeys;\n        try {\n            splitKeys = <FunctionKeyPair>await this.keyProvider.splitKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [splitProvingKey, splitVerifyingKey] = splitKeys;\n\n        // Validate the record to be split\n        try {\n            amountRecord = amountRecord instanceof RecordPlaintext ? amountRecord : RecordPlaintext.fromString(amountRecord);\n        } catch (e) {\n            throw logAndThrow(\"Record provided is not valid. Please ensure it is a valid plaintext record.\");\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildSplitTransaction(executionPrivateKey, splitAmount, amountRecord, this.host, splitProvingKey, splitVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Pre-synthesize proving and verifying keys for a program\n     *\n     * @param program {string} The program source code to synthesize keys for\n     * @param function_id {string} The function id to synthesize keys for\n     * @param inputs {Array<string>}  Sample inputs to the function\n     * @param privateKey {PrivateKey | undefined} Optional private key to use for the key synthesis\n     *\n     * @returns {Promise<FunctionKeyPair | Error>}\n     */\n    async synthesizeKeys(\n        program: string,\n        function_id: string,\n        inputs: Array<string>,\n        privateKey?: PrivateKey,\n    ): Promise<FunctionKeyPair | Error> {\n        // Resolve the program imports if they exist\n        let imports;\n\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\") {\n            if (typeof this.account !== \"undefined\") {\n                executionPrivateKey = this.account.privateKey();\n            } else {\n                executionPrivateKey = new PrivateKey();\n            }\n        }\n\n        // Attempt to run an offline execution of the program and extract the proving and verifying keys\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n            const keyPair = await WasmProgramManager.synthesizeKeyPair(\n                executionPrivateKey,\n                program,\n                function_id,\n                inputs,\n                imports\n            );\n            return [<VerifyingKey>keyPair.provingKey(), <ProvingKey>keyPair.verifyingKey()];\n        } catch (e) {\n            throw logAndThrow(`Could not synthesize keys - error ${e}. Please ensure the program is valid and the inputs are correct.`);\n        }\n    }\n\n    /**\n     * Transfer credits to another account\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async transfer(amount: number, recipient: string, transferType: string, fee: number, privateFee: boolean,\n                   recordSearchParams?: RecordSearchParams, amountRecord?: RecordPlaintext | string, feeRecord?: RecordPlaintext | string, privateKey?: PrivateKey): Promise<string | Error> {\n        // Validate the transfer type\n        transferType = <string>validateTransferType(transferType);\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let transferKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            transferKeys = <FunctionKeyPair>await this.keyProvider.transferKeys(transferType);\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [transferProvingKey, transferVerifyingKey] = transferKeys;\n\n        // Get the amount and fee record from the account if it is not provided in the parameters\n        try {\n            // Track the nonces of the records found so no duplicate records are used\n            const nonces: string[] = [];\n            if (requiresAmountRecord(transferType)) {\n                // If the transfer type is private and requires an amount record, get it from the record provider\n                amountRecord = <RecordPlaintext>await this.getCreditsRecord(fee, [], amountRecord, recordSearchParams);\n                nonces.push(amountRecord.nonce());\n            } else {\n                amountRecord = undefined;\n            }\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, nonces, feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildTransferTransaction(executionPrivateKey, amount, recipient, transferType, amountRecord, fee, feeRecord, this.host, transferProvingKey, transferVerifyingKey, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Create a program object from a program's source code\n     *\n     * @param {string} program Program source code\n     * @returns {Program | Error} The program object\n     */\n    createProgramFromSource(program: string): Program | Error {\n        return Program.fromString(program);\n    }\n\n    /**\n     * Get the credits program object\n     *\n     * @returns {Program} The credits program object\n     */\n    creditsProgram(): Program {\n        return Program.getCreditsProgram();\n    }\n\n    /**\n     * Verify a program is valid\n     *\n     * @param {string} program The program source code\n     */\n    verifyProgram(program: string): boolean {\n        try {\n            <Program>Program.fromString(program);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // Internal utility function for getting a credits.aleo record\n    async getCreditsRecord(amount: number, nonces: string[], record?: RecordPlaintext | string, params?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        try {\n            return record instanceof RecordPlaintext ? record : RecordPlaintext.fromString(<string>record);\n        } catch (e) {\n            try {\n                const recordProvider = <RecordProvider>this.recordProvider;\n                return <RecordPlaintext>(await recordProvider.findCreditsRecord(amount, true, nonces, params))\n            } catch (e) {\n                throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n            }\n        }\n    }\n}\n\n// Ensure the transfer type requires an amount record\nfunction requiresAmountRecord(transferType: string): boolean {\n    return PRIVATE_TRANSFER_TYPES.has(transferType);\n}\n\n// Validate the transfer type\nfunction validateTransferType(transferType: string): string | Error {\n    return VALID_TRANSFER_TYPES.has(transferType) ? transferType :\n        logAndThrow(`Invalid transfer type '${transferType}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`);\n}\n\nexport { ProgramManager }\n","const KEY_STORE = \"https://testnet3.parameters.aleo.org/\";\n\nconst CREDITS_PROGRAM_KEYS = {\n    fee_private: {\n        prover: KEY_STORE + \"fee_private.prover.d02301c\",\n        verifier: \"fee_private.verifier.00ae6a3\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqp85yqqqqqqqqqy0ggqqqqqqqqqhlaqqqqqqqqqplt2qyqqqqqqqz50xqqqqqqqqqqvqqqqqqqqqqq0r58vs3glghpap9wxma98vx8znu5nx4dr6zw4ukjwnn42jg82xmxtwfs2fz4kqpuxpeh5tmzkwzgpp99qmwwazfppvw4d830cv7d2dwpy5h6r98q6dlp295wt4rcv4vkx6q90pxhrkvd8zd67tnk6xrtgq3c6q5e3v3rypfh3ajyn4e5nnr52svqdd9tvejaauj7lc0dje239fd29wr2fcr2cctaa6wcef6rsqpuzyaj2qahlxdtvwj0c66fnu8d0r076ds2l2z4emd0rzra7yh5w93w52lqe7n3985qwrk0ugyeqvqpq95m45qgesy07j96k6fezqyrzh4s2mtd3nwgqd34gdhg5esplz0428mt7efk7w0rck9jk6t5vf5qun0lutum06l9swsljnvy62qyv9h98ce473xa03u9py2kashf277n8ycze4ec9ln0d7sssvccnv7sq2w90aqrleg7sadlt9xy4ymlqqt5adkwee0g920j4qwt9ch28eqxykctu3ddanan9xwv57n6eh5wsqtkjlse7g9q83c5gaka3gsg0g63j9fl56sy9mgxzdh0ledl85a4xfmu3jnqjlfd33w87yxw00njqszg6fvxnd828hyzgul4x6d3vsctn6jxclpj7v9gjrhvwsmeas8q3r4n5vcfqaccsl2t6vvy4qrzl0qq2ae8jt8y077tnatgy386vkmdpa6h2f6gxh22q09eqptmh9x9m4y8c2t7pgg0hpdnxkj4kez3lpjq08dzp9j9dtsr4vtjxur5c0hrrkvmd3gjzsa7378559gwqunply8hh8clhljequ4tgra2s404yfesqvph2hzaf8vqmx3dd75yllnta94796jg2v4ld054g5ke5esahfwudhpcpfm6fndcmstwcz0rhhsjgq5jetw49vfsrfr0vsala3xt8jvshg46xj9vlx70gcfhanaeqyrlke5xjzc\",\n    },\n    fee_public: {\n        prover: KEY_STORE + \"fee_public.prover.5515650\",\n        verifier: \"fee_public.verifier.40ea40e\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqq9wggqqqqqqqqqtxssqqqqqqqqqxdaqqqqqqqqqpp93qqqqqqqqqrw96qqqqqqqqqqvqqqqqqqqqqqgcegdmfr5a2z7lxv5r9pym8t77stu7xmer78uzdh635u5vg2etr0chrkm2u3k3s9gj4ypk2h96uyp8y04x2x7j9e7g932uk0vx8vau03ett9atggqwxwntlq77mde6k9kt2cfgwjdzk3lcj8xusr7n4cszr2t49ghw8s3yetemp9uq2gv4jwe7d36k96rz8thx05jye0zp2r5u04c6luzys5w39klgdhgg8knsq89h2r6u8tx7h7y2j5422q7dvjj90sn0vgfakgtfh3lwl0f83g90aykdfrsmjm40xed30gnmwxhlqgccvw7sac3hrxeamencv07hu8xwm2k9l34qlujzrtfcv3vdt36tv8c4t972a0gawpaampexfyh62qvjzjmqukzg485klj79rj4tryefz9xa37z74t93590859qqscqc5jjmqjd6uwkdnlpu60tuz4ucnypmz4cem0z2urgkue2q80z7u5fwtpzku4x6yf8vlx8nvtnlpvq7ymh2pkjaaay08557t39qnaw7zggqz4gug53aq7s3rnedfg8d3mkehqfgyvrgj0xag48jnjclp33yhejanx7zcd2ukwjmc75gm4uv022qxrm5h8uyvszmlhq2863vh3c7rl6pplvrqlasngafpnfgvhn4k427k38xqjru4q4x3jcyantaw0neqp54mucvkcdcrryed7ukqlrzx63ryv6hsp63ax4gxlaw0xrw4hfgar2wdeckghzkmza24vc3jt5juqgwwag6rh9x2j8xwujagev89g25605fqye6ld5yjaannpnzmzxtw35w5aglrtmpwwf9zjaw9049ssqlxqmwfqa9t4h7e78k87gsynjhwhuj8y0fmsndmld7ke7tzq3kfsjujxry8g7az0jmrm83qxmgrqsqz8r75cj3rxdx5v9g5n8y2sv5jv2escy2q5qs3k8s6payfkzhv52shuydc\",\n    },\n    inclusion: {\n        prover: KEY_STORE + \"inclusion.prover.b46b287\",\n        verifier: \"inclusion.verifier.2fae105\",\n        verifyingKey:\n            \"verifier1qyyqqqqqqqqqqqzq7qqsqqqqqqqqdugpqqqqqqqqtm7syqqqqqqqpg43qvqqqqqqqzk8sqcqqqqqqqqvqqqqqqqqqqqyjtgkq7td45a5h94srp9yljcvwacqas7empws2j9lklccezgsxp58zta506lkyu6qyk0g8h4eq2ypps3rzg4kjpz7zzutgfd0qj8jw2rnfy68h5asc65tgv89e25fn02kfx002npkuyjdqj8p0urycchcqwy4j85agcdtw7f7ua2tvtq00tk4wc8cc7yqyqwesrt5n6krf0p5penhaj4gfzpefvcnqqf3hlu7qx25n4ng8txtuhyem8lwydlq3qgm8eywzj6uy76943ja58tx3acpcjw0p9c82lxv9ralqrq5z78slqx2v796nzcjmuacrar2yp4remga7qtgm0qcvejgulhp93jamuxvxj20s4ar493pp9hyww5g0prwf7qztkjzpp4nfljdwhra2022z0rnt8mkuryl8rzz8sxxsnf6twzr6pfemlu7z0jclrad92jeswwkul5pmyrwp9e4q5xsgappatw9neup7n0u3lls9cyhlujradvyze6yywdcccchu5p864ad9ahxws3pt36cq8lk49pl3kwkszr8fc3en8u6p9tst9zf6a0hwwcuc8lzx7sh4zhqjyt4umdjl9rr2yg8z875xhqdszxxdnd5nrrv724seqrqs8u3grw85hc2qafl4glrt9s9r49a9zrp8v2akql3l7f00v0wk82el5te5qdtdf2n4a8lgzzth7fyvtxxqse6pye5je2p67l9mnv784ay5t7c4z9u59q5m75r3j7nck9a4e2pyqququmk0pa64xfcyt5kj94730awdad7ch6f22lrr4vv7l0xxsmndhzjnxttk6gw59gt3950xc5gqzsqc5zsj56c0fqpsg8aevq7cl4tj7gj8exmtlq5savkclan8kqr4554m99c8wzwf4u9r4xapktcqttcq33r2dg48kk374rzx9m98prt637cvv0j9mru779cwxytgzndutlx3napjj\",\n    },\n    join: {\n        prover: KEY_STORE + \"join.prover.30895cc\",\n        verifier: \"join.verifier.5cb1e62\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqqqeuqqqqqqqqqz3ncqqqqqqqqqgvkqzqqqqqqqq590qyqqqqqqqzwn5qgqqqqqqqqvqqqqqqqqqqqpkgztrguz0x8mpfjhsnmqqsnwl764jw73ll0nxcg7pzt59lpd7zsjlmrprw3w6r7npmx4ck4kz3qq7mslfg4rhc9anmgza3dvms2qjhz0hatprzdgmsk3usxkttpep7wej007nzrhzzdmcca2603z4f4cp80q7drqtqw3quvqu5z4nnzspqca272csmxknz9mlwu4u6f9u2zha5rwjgv2hp0l8dlc7aa32dggq9afa5hkqmwnptqmhavy050nf48ndcl6vmjlm95c582wqyws2z5fckxsw6stcxdxxhj7v26padsumqpk58n2f6fejx3k80j2shqa642hulj3sx08ywtxg506n8dnm6nu2ltp4z5apf6wtam9kzaadackjjq6vnahqmqlkuncyslzeml246ajhy5yldyc20p9pf84gn6zdwlq79azygr4fwtvra632w333kh2e3sq4hwtk967gz8zxtsgph0nlncfhqz6wmt5cccd64qwpezp2yuglkrp7jmk4ggkefa5aw09lvhe646gpt0lkjn984uqg6r46a8q3u9vcezmtnq090xkgq0euqtkjrgjks6cxqz9hqw339k8jzepd9nxlhu7sqtv0n0uvz8p3e8wxc784jsvpf4dp92kndr2e6n9p85q8ty4z93l0fn4k7wv6neqkj9y6drya0284qv98y4lthmredwtdlm7p2489etmf473zehyhgpgmu094h97dcyzj22uzwvvayxfjlrv4qlnag2zgcqlma4j7cte6uhsfc98kf54jneuqktsmsacz7gftk9s0cunkevaamkcrt0e086j9lf9vd8eqvkn6esqfsfpjxk4lq94a5mqxgg0eazejt2wtda86l7hj2zxn9k5cy65jp6e97yp8ahakzf6vm0z53te7x9srqeupscxgx8vxla4rqse8srw9ypv3h4q902szlneeuuh4rm46rjnltvt9k\",\n    },\n    split: {\n        prover: KEY_STORE + \"split.prover.a9784b9\",\n        verifier: \"split.verifier.38392d9\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqq8qecqqqqqqqqqqnncqqqqqqqqqr4qqzqqqqqqqpnx4qyqqqqqqqqln7qgqqqqqqqqvqqqqqqqqqqqx4tv4dx9ct4hgwe0cgmqrljgeg88zfepv9gk26d4m2tggqwrj30tgpfatc9654hdggyvymxedz6qqqx3upvdhtl2ux9cvyl3qwtsj5hnqwjpq4xvdvwxggnureuqmhsyegt3k7m3nffxj9zuvkmccmfnczu5y8rd735uwlwa84qq7e092nnsrdyryap6tusdedfwsnkqfllv34l6ny0mlqdrv33jeghluhp5zs88fuc3209j958zh5fuhln6rdleyuk20c7lk4uv79ngx2uh44ed2elvf8ltcj033gg0skmrc5g9tcqrcax5nzyxpafv326m7c8lnz98gks6wlgnyk8qk7qzc4ufp236yuzx94ug8kfsj0tjnvqx6n5ls4yq27fgydj0f4ac6xhjtrqcfa675d4ufs9qdfguexv30rheew7n2n09sng7w5g5mz26dmmmsxnva0luqt2qe9h9jqmn7ajeqadqarvggquz72n94dd5dvpprppjl99lqgzavlp3nph7d4jwzp6txnhxqcecsrt0h5w95v7l8e3qtq274k8427nzl5j3ywy59ssqeagfedxpy3kaytlqmuevluk70tw50drkwaddaspdmfk7ct6s8vurtjg67atnr277xydursaj4trngkndqfhh89tmknmtukcuev77uxhsu3xv2rcr6dqw3mdy7qf6a72ltwkk5g75l4cjxc8ktxwnklcw0nwupqry4xayka9fqngyq9prc022sztk64fqr22qxcv7vtzf5dfhy3j4alqx2vnq6gzhgn8nx7trw8s09txmz6j7jm8v6fwn00evqt46ak5ykd46yfzgpmxuuxut8vxvftzfpq40sl6zhy63c5zusdstaeal9d2rcfpw9pr2pegr2cj307hapacguraxcfrgcq5q2evj9afe7cznp3c99vt44jtngr0jzfn0l6m8xl0aa3cvc75d3xge3sg\",\n    },\n    transfer_private: {\n        prover: KEY_STORE + \"transfer_private.prover.deb77db\",\n        verifier: \"transfer_private.verifier.3088e6d\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqq9n65qqqqqqqqqde4gqqqqqqqqqcfvqzqqqqqqqppl7qyqqqqqqqzuyvqgqqqqqqqqvqqqqqqqqqqqqcqaunljwmh56k2t4sa3ssex2xkw3s9sh30uyfnjq4yeg38kgfex6uferudqklkssu429k2lplcvq28f966yhpcx4jzdan698fzhpv02luxdd4dd6lfux5u5j9nvz2a4zk5yd6zegztlg0rvll27tly0gzx8nqr43yv4jnmspt6j7kcsr8fsvpux9wk9lgt4h386fjmgs2jna7r2ty5fked5kzacw8ay22wq4qp8850903z200suwyjfs3gn6wg08nl3nkvfdkn68fp45dm4hl5xejejdk3d2gxkeju354mhqna34sq2dk92eau0tw8h30plcy933zw6vskst42qkhg6tav9uqzx0f6kluee45ecamgy4sc833lzv3ke6kkq9ypf5tlsndqa2vv3xssgwyhz6awjvprrpzgs9hyehtrjp7c68ecj3h250q9mcf05cnfmrpxmdcgupzelp46jq6kvggkp97pc046fjac6m2nl2s2e63f6lxumcwvey03t2npryvnwmr486m67g4ajlx9mgpvmgv27qrf5tlq7nlpe6ekvnq53rtzwxa6spxpjppc94ntselrdw8fuyx2gevazqrx5dayls52xaszkm3xe365azkxq4n3dmps3mlmk494kxgx435wklfzneu5n8gqjtfh79gkhd7h58avjjju3j4k6edqwxnj8mf3m5qv65qkv2hllshe688x23qs9ttv2fspn93lqzutlyn9gs67rqv0zj8lz274jd43vaxzqv2yaxg9kn9fewancsdmsauw4y688ywgjqj2dekehun27qt5ew6kgl6u4uauju6trpuusk3lvjdxvp8u536pcmm7vzzgelc0cj845933ehsul7e5adr0fspgl76gfet7l5xw896705gf3qymc4j3htxwhgzavzmr0umnfqdd5gaft5r5wgax0kewjguazy0kue2277gpz0hqgvpx0a0y\",\n    },\n    transfer_private_to_public: {\n        prover: KEY_STORE + \"transfer_private_to_public.prover.7ca1421\",\n        verifier: \"transfer_private_to_public.verifier.37dd126\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqq45vqqqqqqqqqr9gcqqqqqqqqqdqpszqqqqqqqq6tmqyqqqqqqqz302qqqqqqqqqqvqqqqqqqqqqqdr77uvehrw3k8a2ajgeecvtzhfs7e0jarvq699mgme43pz60ez57jm0drlc32arllag3s43xcgvqpezqaxl406uz8eedpe36rxferaxs5sz7w7kxvcj2xys26x24gu4jzjt2fq8s4cjkntp95qs28txjsqsz9a8vqsypzld5v0296aqdt33vzw6ngfacpvtu8tg0ppuvhpkmha7zvcv5v55ekn64sj4heqqsvqplcrkpncg8km3em4grmwp7dfveggayzdu39phkyfrqlxm96mrxzhpmca76f2995j7s787ulcm7epqtvr2wg8fhl7w8shyz5vh203zvmtt69w8hn0349tlx78g0enafs7vq7cfk9tmqpf734e4tzkp83s2qw7fqx4n2chh5ql7jy7dc9raxmzzqurnkctlq0ul38tr9mrw3hqrez6jt5tn74f20x4ya7aygp79sq4jh6gftu7wjrm6dmndm79ynr7vatxckar0tawsr7h08jvacd24pz5sl636vg8dhvedhc3q8ym3rcqjhs2dttxeqsp55kt5srx6qdt9v4ge7mqkptthzz3zjsg8ftd209w590ngn5xmpg606e0w3d8h9cszc7hj6swtk9xucm9vsz8kvcmcz2ny5mrv6wyy7nzjaq5rvsxsf4g9lmaa5dh8jvrhd78wynfaehcqvn7v93c6hqz7s8znzfcckgygetl7anv0a4g2x9tgey9qzvuy9zvjh0mcd3zcexa929cs65hvtz56qdwvfcevx2vfmcgwp5qm4xzny66z4xplm5ajr6hjvt55jnw8mcpf8unj3qk9z2w9xrtal9ndnru2upcju0yq3cyzqg7sejuqclc4wwu2wn7ceaxswmt5t4cekjrfg7zgxwng8pu0l988lk47zg44asr75szg6zn4k7sjqf393zr27t9e29plyn29r45l6j47765f0r9tw489tsgwqgu2\",\n    },\n    transfer_public: {\n        prover: KEY_STORE + \"transfer_public.prover.2941ad3\",\n        verifier: \"transfer_public.verifier.ed98d35\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqq9hggqqqqqqqqqtsssqqqqqqqqqk4aqqqqqqqqqpz9nqqqqqqqqqr596qqqqqqqqqqvqqqqqqqqqqqpf55jjwuf23j9etvgw8ewld2xx6u9as0za0w993q5374fklcucxaqmn8mdeyltg9w6x775d3mxcyqs9a0vw2mzta52usy60c9n3dht98pnek76sg2s7vnjvu3dpyhlyzaqxya3jjt0grk8jrc6z0xcajsrlsy74sgzfl5g2zpxv585aavv44e28q2fmhnw8gw4nyfg9trfn3d8d39yuze6rqnx70aqfqumdgzqqrad6kmnm6nrkww2l4xu0gt4t467m24hk60ra9lyd3jkzs6v8l57nmupn0dz6t0k77lutj68z4vqqruuqwuh72gc0xl9x8c6d0ufuffdfp63x82xe8r65a25qhx2d0n44ve6m4fln2m9ck8tslh3kqa3uqn6cg53l8x4yv44a00kpy5nprz0kmf5xm62xkkny4vua85fanzq6u9zsqg7mm3yq3p5s22m0xd54cq98um775vscxfnsf54gzryqkt253v0pynrllxr0cymt6w9l05trnlw7egg7f4ld8d5jdzxky82m6sq025a96ewr9vmdnyhve3724e6hdn60yrme4jagdtjxavxhtmm2zn86aq0v5t0zgdesu3m79euw3sqyqzm93v8etujswag742nc6zugwtccmtxxfllxx7vzqhygzvqk0ujgft2hhltetg2w5n73dhz9ufnqgdqmqe00eq08amtpxs5kl3c5hdutgq9zmfac4ke08frt0e09vrf0y6kdh3z3hq08d88gp7n8c22vqdr6sqyg3uxspk0x77rrr43q284nj62ll7dufxwq4hpx0qw2dgsayw9wzjngh0l00j9kah0mvx25yqmumjessw3k7j4g8esk6u33wk3344x0nfha9cu84lnp649jhdmq7rwxumel7xq6nx9syzs4tn7ncgqrvk83lza285cz6r3gf3j79n4c4pmtn42vsjj2t3f57ceha4kvupct6ss4\",\n    },\n    transfer_public_to_private: {\n        prover: KEY_STORE + \"transfer_public_to_private.prover.67f57fc\",\n        verifier: \"transfer_public_to_private.verifier.f2aaeee\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqqswsqqqqqqqqqpuaqqqqqqqqqqdm9sqqqqqqqqp2pwqyqqqqqqqrp26qqqqqqqqqqvqqqqqqqqqqqdmukmllrvx44ed40um3qe2yq58lmvajsqucq2x8egmls6x8jyeusvn6pzcph4hw25nrsr5p6g60ypayclhdergx3zx4x67unesl33fxv6xkm5tzf5k3ehdf67faut52l5u4npsq0zqlh5w2tk02jaj8hcq4z6fypqg9yh83xwh6z6xcvx3vqpu08whfuvcefk30xg5z7xu3mqleshpmzu6060aucm90jjtfgrsqau7shuwwtgghzgcaxj2ruje6y5jag6jy5nrvgxuyjdawg9t29upzv5qzz2zl6gmpmlzum58du4hqqhnrfc2uvx45c8zp5xa68pqlvhzexmucsujwuvff6f9jrxpg7jtretg9er7n0qsv34jtjjrgpqqzqq50qa7vljmn20lsfu2zc3nnzntrcr5wt880ywdykya5jv23cywlc4nyvdcqsc9wxly77falzt79cq9wuls5euc7d8thyqhnuehnjztfshr5syks9zra6yrt7hk6rvnv5d9jypehqkfhz2m0avcwksaxgqpcgw72pg7edz4fdfp4tfhynzarav9yrjm09gu2wgfcde0cq5kd4uq0znmen5jeu0wmfpden3c50rqpjjdwgyjrsnffzfjnswa7dcacz8dgk7h48q0xtz442hvalaeveyxm86e9t5f437krv5tjrenzr4vqgzm8uag6azkty05y7ngfpwzkra9ytqqhfuvp5h2eush3m4y2cxu3vc77pzc7wmesdhhhtqzhxc0qqujxpatu4p56u3hh4rnzyj7pqnqrc0s2h93vsjnj7uax633d0tk266mls44rwthp7c4y9lxy5naqvqqr8cy3hj46zgjlvkk7arh7vet60gpqz68ynrawxqacrry0k7tu3u8xtkp6xeg5jeumu4g7uaw9mcr7u9qxy9tjqma4r8awswqg9k8306f3u408z3z937pmhtu9gj68qp8h0zpz\",\n    },\n};\n\nconst PRIVATE_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n]);\nconst VALID_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n    \"transfer_public\",\n    \"public\",\n    \"transferPublic\",\n    \"transfer_public_to_private\",\n    \"publicToPrivate\",\n    \"transferPublicToPrivate\",\n]);\nconst PRIVATE_TRANSFER = new Set([\n    \"private\",\n    \"transfer_private\",\n    \"transferPrivate\",\n]);\nconst PRIVATE_TO_PUBLIC_TRANSFER = new Set([\n    \"private_to_public\",\n    \"privateToPublic\",\n    \"transfer_private_to_public\",\n    \"transferPrivateToPublic\",\n]);\nconst PUBLIC_TRANSFER = new Set([\n    \"public\",\n    \"transfer_public\",\n    \"transferPublic\",\n]);\nconst PUBLIC_TO_PRIVATE_TRANSFER = new Set([\n    \"public_to_private\",\n    \"publicToPrivate\",\n    \"transfer_public_to_private\",\n    \"transferPublicToPrivate\",\n]);\n\nfunction logAndThrow(message: string): Error {\n    console.error(message);\n    throw message;\n}\n\nimport { Account } from \"./account\";\nimport { AleoNetworkClient, ProgramImports } from \"./network-client\";\nimport { Block } from \"./models/block\";\nimport { Execution } from \"./models/execution\";\nimport { Input } from \"./models/input\";\nimport { Output } from \"./models/output\";\nimport { Transaction } from \"./models/transaction\";\nimport { Transition } from \"./models/transition\";\nimport {\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    CachedKeyPair,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    KeySearchParams,\n} from \"./function-key-provider\";\nimport {\n    BlockHeightSearch,\n    NetworkRecordProvider,\n    RecordProvider,\n    RecordSearchParams,\n} from \"./record-provider\";\n\n// @TODO: This function is no longer needed, remove it.\nasync function initializeWasm() {\n    console.warn(\"initializeWasm is deprecated, you no longer need to use it\");\n}\n\nexport { createAleoWorker } from \"./managed-worker\";\n\nexport { ProgramManager } from \"./program-manager\";\n\nexport {\n    PrivateKey,\n    ViewKey,\n    Address,\n    PrivateKeyCiphertext,\n    RecordCiphertext,\n    Signature,\n    ProvingKey,\n    VerifyingKey,\n    Program,\n    RecordPlaintext,\n    Transaction as WasmTransaction,\n    ExecutionResponse,\n    ProgramManager as ProgramManagerBase,\n    verifyFunctionExecution,\n    initThreadPool,\n} from \"@aleohq/wasm\";\n\nexport { initializeWasm };\n\nexport {\n    Account,\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    AleoNetworkClient,\n    Block,\n    BlockHeightSearch,\n    CachedKeyPair,\n    Execution,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    Input,\n    KeySearchParams,\n    NetworkRecordProvider,\n    ProgramImports,\n    Output,\n    RecordProvider,\n    RecordSearchParams,\n    Transaction,\n    Transition,\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PRIVATE_TRANSFER_TYPES,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n};\n","import * as aleo from \"@aleohq/sdk\";\n\nawait aleo.initThreadPool();\n\nconst defaultHost = \"https://api.explorer.aleo.org/v1\";\nconst keyProvider = new aleo.AleoKeyProvider();\nconst programManager = new aleo.ProgramManager(defaultHost, keyProvider, undefined);\n\nkeyProvider.useCache(true);\n\nself.postMessage({\n    type: \"ALEO_WORKER_READY\",\n});\n\nlet lastLocalProgram = null;\nself.addEventListener(\"message\", (ev) => {\n    if (ev.data.type === \"ALEO_EXECUTE_PROGRAM_LOCAL\") {\n        const { localProgram, aleoFunction, inputs, privateKey } = ev.data;\n\n        console.log(\"Web worker: Executing function locally...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                const privateKeyObject = aleo.PrivateKey.from_string(privateKey);\n                // Ensure the program is valid and that it contains the function specified\n                const program = programManager.createProgramFromSource(localProgram);\n                const program_id = program.id();\n                if (!program.hasFunction(aleoFunction)) {\n                    throw `Program ${program_id} does not contain function ${aleoFunction}`;\n                }\n                const cacheKey = `${program_id}:${aleoFunction}`;\n\n                // Get the program imports\n                const imports = programManager.networkClient.getProgramImports(localProgram);\n\n                // Get the proving and verifying keys for the function\n                if (lastLocalProgram !== localProgram) {\n                    const keys = await programManager.synthesizeKeys(localProgram, aleoFunction, inputs, privateKeyObject);\n                    programManager.keyProvider.cacheKeys(cacheKey, keys);\n                    lastLocalProgram = localProgram;\n                }\n\n                // Pass the cache key to the execute function\n                const keyParams = new aleo.AleoKeyProviderParams({\"cacheKey\": cacheKey});\n\n                // Execute the function locally\n                let response = await programManager.executeOffline(\n                    localProgram,\n                    aleoFunction,\n                    inputs,\n                    false,\n                    imports,\n                    keyParams,\n                    undefined,\n                    undefined,\n                    privateKeyObject\n                );\n\n                // Return the outputs to the main thread\n                console.log(`Web worker: Local execution completed in ${performance.now() - startTime} ms`);\n                const outputs = response.getOutputs();\n                let execution = response.getExecution();\n                if (execution) {\n                    aleo.verifyFunctionExecution(execution, keyProvider.getKeys(cacheKey)[1], program, \"hello\");\n                    execution = execution.toString();\n                    console.log(\"Execution verified successfully: \" + execution);\n                } else {\n                    execution = \"\";\n                }\n\n                console.log(`Function execution response: ${outputs}`);\n                self.postMessage({\n                    type: \"OFFLINE_EXECUTION_COMPLETED\",\n                    outputs: {outputs: outputs, execution: execution}\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_EXECUTE_PROGRAM_ON_CHAIN\") {\n        const {\n            remoteProgram,\n            aleoFunction,\n            inputs,\n            privateKey,\n            fee,\n            privateFee,\n            feeRecord,\n            url,\n        } = ev.data;\n\n        console.log(\"Web worker: Creating execution...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                const privateKeyObject = aleo.PrivateKey.from_string(privateKey)\n                // Ensure the program is valid and that it contains the function specified\n                const program = await programManager.networkClient.getProgramObject(remoteProgram);\n                const program_id = program.id();\n                if (!program.hasFunction(aleoFunction)) {\n                    throw `Program ${program_id} does not contain function ${aleoFunction}`;\n                }\n\n                // Get the proving and verifying keys for the function\n                const cacheKey = `${program_id}:${aleoFunction}`;\n                if (!programManager.keyProvider.containsKeys(cacheKey)) {\n                    console.log(`Web worker: Synthesizing proving & verifying keys for: '${program_id}:${aleoFunction}'`);\n                    const keys = await programManager.synthesizeKeys(remoteProgram, aleoFunction, inputs, privateKeyObject);\n                    programManager.keyProvider.cacheKeys(cacheKey, keys);\n                }\n\n                // Pass the cache key to the execute function\n                const keyParams = new aleo.AleoKeyProviderParams({\"cacheKey\": cacheKey})\n\n                // Set the host to the provided URL if provided\n                if (typeof url === \"string\") { programManager.setHost(url); }\n                const transaction = await programManager.execute(\n                    program_id,\n                    aleoFunction,\n                    fee,\n                    privateFee,\n                    inputs,\n                    undefined,\n                    keyParams,\n                    feeRecord,\n                    undefined,\n                    undefined,\n                    privateKeyObject\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: On-chain execution transaction created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"EXECUTION_TRANSACTION_COMPLETED\",\n                    executeTransaction: transaction,\n                });\n            } catch (error) {\n                console.error(`Error creating execution transaction: ${error}`);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_ESTIMATE_EXECUTION_FEE\") {\n        const { remoteProgram, privateKey, aleoFunction, inputs, url } =\n            ev.data;\n\n        console.log(\"Web worker: Estimating execution fee...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                const privateKeyObject = aleo.PrivateKey.from_string(privateKey);\n                // Ensure the program is valid and that it contains the function specified\n                const program = await programManager.networkClient.getProgramObject(remoteProgram);\n                const program_id = program.id();\n                if (!program.getFunctions().includes(aleoFunction)) {\n                    throw `Program ${program_id} does not contain function ${aleoFunction}`;\n                }\n                const cacheKey = `${program_id}:${aleoFunction}`;\n                const imports = await programManager.networkClient.getProgramImports(remoteProgram);\n\n                // Get the proving and verifying keys for the function\n                if (!programManager.keyProvider.containsKeys(cacheKey)) {\n                    console.log(`Web worker: Synthesizing proving & verifying keys for: '${program_id}:${aleoFunction}'`);\n                    const keys = await programManager.synthesizeKeys(program.toString(), aleoFunction, inputs, privateKeyObject);\n                    programManager.keyProvider.cacheKeys(cacheKey, keys);\n                }\n\n                // Estimate the execution fee\n                const [provingKey, verifyingKey] = programManager.keyProvider.getKeys(cacheKey);\n                let executeFee = await aleo.ProgramManagerBase.estimateExecutionFee(\n                    privateKeyObject,\n                    remoteProgram,\n                    aleoFunction,\n                    inputs,\n                    url,\n                    imports,\n                    provingKey,\n                    verifyingKey,\n                );\n\n                // Return the execution fee estimate to the main thread\n                console.log(`Web worker: Execution fee estimated in ${performance.now() - startTime} ms`);\n                console.log(`Execution Fee Estimation: ${executeFee} microcredits`);\n                self.postMessage({\n                    type: \"EXECUTION_FEE_ESTIMATION_COMPLETED\",\n                    executionFee: Number(executeFee) / 1000000 + 0.01,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_ESTIMATE_DEPLOYMENT_FEE\") {\n        const { program, url } = ev.data;\n\n        console.log(\"Web worker: Estimating deployment fee...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                const imports = await programManager.networkClient.getProgramImports(program);\n                console.log(\"Estimating deployment fee..\");\n                let deploymentFee =\n                    await aleo.ProgramManagerBase.estimateDeploymentFee(\n                        program,\n                        imports,\n                    );\n\n                // Return the deployment fee estimate to the main thread\n                console.log(`Web worker: Deployment fee estimation completed in ${performance.now() - startTime} ms`);\n                console.log(`Deployment Fee Estimation: ${deploymentFee} microcredits`);\n                self.postMessage({\n                    type: \"DEPLOYMENT_FEE_ESTIMATION_COMPLETED\",\n                    deploymentFee: Number(deploymentFee) / 1000000 + 0.01,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_TRANSFER\") {\n        const {\n            privateKey,\n            amountCredits,\n            recipient,\n            transfer_type,\n            amountRecord,\n            fee,\n            privateFee,\n            feeRecord,\n            url,\n        } = ev.data;\n\n        console.log(\n            `Web worker: Creating transfer of type ${transfer_type}...`,\n        );\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                // Set the host to the provided URL if provided\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the transfer transaction and submit it to the network\n                const transaction = await programManager.transfer(\n                    amountCredits,\n                    recipient,\n                    transfer_type,\n                    fee,\n                    privateFee,\n                    undefined,\n                    amountRecord,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey)\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Transfer transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"TRANSFER_TRANSACTION_COMPLETED\",\n                    transferTransaction: transaction,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_DEPLOY\") {\n        const { program, privateKey, fee, privateFee, feeRecord, url } = ev.data;\n\n        console.log(\"Web worker: Creating deployment...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Check if the program is valid\n                const programObject = programManager.createProgramFromSource(program);\n\n                // Check if the program already exists on the network. If so, throw an error\n                let programExists = false;\n                try {\n                    await programManager.networkClient.getProgram(programObject.id());\n                    programExists = true;\n                } catch (e) {\n                    console.log(\n                        `Program not found on the Aleo Network - proceeding with deployment...`,\n                    );\n                }\n\n                if (programExists) {\n                    throw `Program ${programObject.id()} already exists on the network`;\n                }\n\n                console.log(\"fee is: \", fee);\n                // Create the deployment transaction and submit it to the network\n                let transaction = await programManager.deploy(\n                    program,\n                    fee,\n                    privateFee,\n                    undefined,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey),\n                )\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Deployment transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"DEPLOY_TRANSACTION_COMPLETED\",\n                    deployTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_SPLIT\") {\n        const { splitAmount, record, privateKey, url } = ev.data;\n\n        console.log(\"Web worker: Creating split...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the split transaction and submit to the network\n                const transaction = await programManager.split(\n                    splitAmount,\n                    record,\n                    aleo.PrivateKey.from_string(privateKey)\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Split transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"SPLIT_TRANSACTION_COMPLETED\",\n                    splitTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_JOIN\") {\n        const { recordOne, recordTwo, fee, privateFee, feeRecord, privateKey, url } =\n            ev.data;\n\n        console.log(\"Web worker: Creating join...\");\n\n        let startTime = performance.now();\n        (async function () {\n\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the join transaction and submit it to the network\n                const transaction = await programManager.join(\n                    recordOne,\n                    recordTwo,\n                    fee,\n                    privateFee,\n                    undefined,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey),\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Join transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"JOIN_TRANSACTION_COMPLETED\",\n                    joinTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    }\n});\n"],"names":["async","get","url","response","fetch","ok","Error","status","post","options","method","AleoNetworkClient","host","account","constructor","this","setAccount","getAccount","setHost","fetchData","json","error","findUnspentRecords","startHeight","endHeight","privateKey","amounts","maxMicrocredits","nonces","records","Array","start","end","resolvedPrivateKey","latestHeight","failures","totalRecordValue","BigInt","_privateKey","PrivateKey","from_string","viewKey","to_view_key","blockHeight","getLatestHeight","blocks","getBlockRange","i","length","transactions","j","confirmedTransaction","type","transaction","execution","transitions","k","transition","program","outputs","l","output","record","RecordCiphertext","fromString","value","isOwner","recordPlaintext","decrypt","nonce","includes","serialNumber","serialNumberString","getTransitionId","push","microcredits","amounts_found","console","warn","toString","getBlock","height","getLatestBlock","getLatestHash","getProgram","programId","getProgramObject","inputProgram","Program","getProgramImports","imports","importList","getImports","import_id","hasOwnProperty","programSource","nestedImports","key","logAndThrow","getProgramImportNames","getProgramMappingNames","getProgramMappingValue","mappingName","getStateRoot","getTransaction","id","getTransactions","getTransactionsInMempool","transition_id","submitTransaction","transaction_string","Transaction","body","headers","message","AleoKeyProviderParams","proverUri","verifierUri","cacheKey","params","AleoKeyProvider","cache","cacheOption","keyUris","fetchBytes","data","arrayBuffer","Uint8Array","KEY_STORE","Map","useCache","clearCache","clear","cacheKeys","keyId","keys","provingKey","verifyingKey","set","toBytes","containsKeys","has","deleteKeys","delete","getKeys","debug","provingKeyBytes","verifyingKeyBytes","ProvingKey","fromBytes","VerifyingKey","functionKeys","proverUrl","verifierUrl","fetchKeys","getVerifyingKey","transferKeys","visibility","PRIVATE_TRANSFER","CREDITS_PROGRAM_KEYS","transfer_private","prover","verifier","PRIVATE_TO_PUBLIC_TRANSFER","transfer_private_to_public","PUBLIC_TRANSFER","transfer_public","PUBLIC_TO_PRIVATE_TRANSFER","transfer_public_to_private","joinKeys","join","splitKeys","split","feePrivateKeys","fee_private","feePublicKeys","fee_public","inclusion","ProgramManager","keyProvider","networkClient","recordProvider","setKeyProvider","setRecordProvider","deploy","fee","privateFee","recordSearchParams","feeRecord","programObject","e","log","feeKeys","deploymentPrivateKey","getCreditsRecord","undefined","feeProvingKey","feeVerifyingKey","tx","ProgramManager$1","buildDeploymentTransaction","execute","programName","functionName","inputs","keySearchParams","executionPrivateKey","buildExecutionTransaction","executeOffline","function_name","proveExecution","executeFunctionOffline","recordOne","recordTwo","joinProvingKey","joinVerifyingKey","RecordPlaintext","buildJoinTransaction","splitAmount","amountRecord","splitProvingKey","splitVerifyingKey","buildSplitTransaction","synthesizeKeys","function_id","keyPair","synthesizeKeyPair","transfer","amount","recipient","transferType","validateTransferType","transferProvingKey","transferVerifyingKey","requiresAmountRecord","buildTransferTransaction","createProgramFromSource","creditsProgram","getCreditsProgram","verifyProgram","findCreditsRecord","PRIVATE_TRANSFER_TYPES","VALID_TRANSFER_TYPES","Set","_regeneratorRuntime","t","r","Object","prototype","n","o","defineProperty","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","name","mark","setPrototypeOf","__proto__","awrap","Promise","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","_asyncToGenerator","fn","self","args","arguments","apply","err","aleo","defaultHost","programManager","postMessage","lastLocalProgram","addEventListener","ev","_ev$data","localProgram","aleoFunction","startTime","performance","now","_callee","privateKeyObject","program_id","keyParams","_context","hasFunction","concat","getOutputs","getExecution","t0","errorMessage","_ev$data2","remoteProgram","_callee2","_context2","executeTransaction","_ev$data3","_callee3","_programManager$keyPr","_programManager$keyPr2","executeFee","_context3","getFunctions","estimateExecutionFee","executionFee","Number","_ev$data4","_callee4","deploymentFee","_context4","estimateDeploymentFee","_ev$data5","amountCredits","transfer_type","_callee5","_context5","transferTransaction","_ev$data6","_callee6","programExists","_context6","deployTransaction","t1","_ev$data7","_callee7","_context7","splitTransaction","_ev$data8","_callee8","_context8","joinTransaction"],"sourceRoot":""}