{"version":3,"file":"52.bundle.js","mappings":"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","sources":["webpack://aleo-website/../src/account.ts","webpack://aleo-website/../src/utils.ts","webpack://aleo-website/../src/network-client.ts","webpack://aleo-website/../src/function-key-provider.ts","webpack://aleo-website/../src/record-provider.ts","webpack://aleo-website/../src/managed-worker.ts","webpack://aleo-website/../src/program-manager.ts","webpack://aleo-website/../src/index.ts","webpack://aleo-website/wasm.js","webpack://aleo-website/../js/index.js","webpack://aleo-website/../node_modules/comlink/dist/esm/comlink.mjs"],"sourcesContent":["import {\n  Address,\n  PrivateKey,\n  Signature,\n  ViewKey,\n  PrivateKeyCiphertext,\n  RecordCiphertext,\n} from \"./index\";\n\ninterface AccountParam {\n  privateKey?: string;\n  seed?: Uint8Array;\n}\n\n/**\n * Key Management class. Enables the creation of a new Aleo Account, importation of an existing account from\n * an existing private key or seed, and message signing and verification functionality.\n *\n * An Aleo Account is generated from a randomly generated seed (number) from which an account private key, view key,\n * and a public account address are derived. The private key lies at the root of an Aleo account. It is a highly\n * sensitive secret and should be protected as it allows for creation of Aleo Program executions and arbitrary value\n * transfers. The View Key allows for decryption of a user's activity on the blockchain. The Address is the public\n * address to which other users of Aleo can send Aleo credits and other records to. This class should only be used\n * environments where the safety of the underlying key material can be assured.\n *\n * @example\n * // Create a new account\n * const myRandomAccount = new Account();\n *\n * // Create an account from a randomly generated seed\n * const seed = new Uint8Array([94, 91, 52, 251, 240, 230, 226, 35, 117, 253, 224, 210, 175, 13, 205, 120, 155, 214, 7, 169, 66, 62, 206, 50, 188, 40, 29, 122, 40, 250, 54, 18]);\n * const mySeededAccount = new Account({seed: seed});\n *\n * // Create an account from an existing private key\n * const myExistingAccount = new Account({privateKey: 'myExistingPrivateKey'})\n *\n * // Sign a message\n * const hello_world = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n * const signature = myRandomAccount.sign(hello_world)\n *\n * // Verify a signature\n * myRandomAccount.verify(hello_world, signature)\n */\nexport class Account {\n  _privateKey: PrivateKey;\n  _viewKey: ViewKey;\n  _address: Address;\n\n  constructor(params: AccountParam = {}) {\n    try {\n      this._privateKey = this.privateKeyFromParams(params);\n    } catch (e) {\n      console.error(\"Wrong parameter\", e);\n      throw new Error(\"Wrong Parameter\");\n    }\n    this._viewKey = ViewKey.from_private_key(this._privateKey);\n    this._address = Address.from_private_key(this._privateKey);\n  }\n\n  /**\n   * Attempts to create an account from a private key ciphertext\n   * @param {PrivateKeyCiphertext | string} ciphertext\n   * @param {string} password\n   * @returns {PrivateKey | Error}\n   *\n   * @example\n   * const ciphertext = PrivateKey.newEncrypted(\"password\");\n   * const account = Account.fromCiphertext(ciphertext, \"password\");\n   */\n  public static fromCiphertext(ciphertext: PrivateKeyCiphertext | string, password: string) {\n    try {\n      ciphertext = (typeof ciphertext === \"string\") ? PrivateKeyCiphertext.fromString(ciphertext) : ciphertext;\n      const _privateKey = PrivateKey.fromPrivateKeyCiphertext(ciphertext, password);\n      return new Account({ privateKey: _privateKey.to_string() });\n    } catch(e) {\n      throw new Error(\"Wrong password or invalid ciphertext\");\n    }\n  }\n\n  private privateKeyFromParams(params: AccountParam) {\n    if (params.seed) {\n      return PrivateKey.from_seed_unchecked(params.seed);\n    }\n    if (params.privateKey) {\n      return PrivateKey.from_string(params.privateKey);\n    }\n    return new PrivateKey();\n  }\n\n  privateKey() {\n    return this._privateKey;\n  }\n\n  viewKey() {\n    return this._viewKey;\n  }\n\n  address() {\n    return this._address;\n  }\n\n  toString() {\n    return this.address().to_string()\n  }\n\n  /**\n   * Encrypt the account's private key with a password\n   * @param {string} ciphertext\n   * @returns {PrivateKeyCiphertext}\n   *\n   * @example\n   * const account = new Account();\n   * const ciphertext = account.encryptAccount(\"password\");\n   */\n  encryptAccount(password: string) {\n    return this._privateKey.toCiphertext(password);\n  }\n\n  /**\n   * Decrypts a Record in ciphertext form into plaintext\n   * @param {string} ciphertext\n   * @returns {Record}\n   *\n   * @example\n   * const account = new Account();\n   * const record = account.decryptRecord(\"record1ciphertext\");\n   */\n  decryptRecord(ciphertext: string) {\n    return this._viewKey.decrypt(ciphertext);\n  }\n\n  /**\n   * Decrypts an array of Records in ciphertext form into plaintext\n   * @param {string[]} ciphertexts\n   * @returns {Record[]}\n   *\n   * @example\n   * const account = new Account();\n   * const record = account.decryptRecords([\"record1ciphertext\", \"record2ciphertext\"]);\n   */\n  decryptRecords(ciphertexts: string[]) {\n    return ciphertexts.map((ciphertext) => this._viewKey.decrypt(ciphertext));\n  }\n\n  /**\n   * Determines whether the account owns a ciphertext record\n   * @param {RecordCipherText | string} ciphertext\n   * @returns {boolean}\n   *\n   * @example\n   * // Create a connection to the Aleo network and an account\n   * const connection = new NodeConnection(\"vm.aleo.org/api\");\n   * const account = Account.fromCiphertext(\"ciphertext\", \"password\");\n   *\n   * // Get a record from the network\n   * const record = connection.getBlock(1234);\n   * const recordCipherText = record.transactions[0].execution.transitions[0].id;\n   *\n   * // Check if the account owns the record\n   * if account.ownsRecord(recordCipherText) {\n   *     // Then one can do something like:\n   *     // Decrypt the record and check if it's spent\n   *     // Store the record in a local database\n   *     // Etc.\n   * }\n   */\n  ownsRecordCiphertext(ciphertext: RecordCiphertext | string) {\n    if (typeof ciphertext === 'string') {\n      try {\n        const ciphertextObject = RecordCiphertext.fromString(ciphertext);\n        return ciphertextObject.isOwner(this._viewKey);\n      }\n      catch (e) {\n        return false;\n      }\n    }\n    else {\n      return ciphertext.isOwner(this._viewKey);\n    }\n  }\n\n  /**\n   * Signs a message with the account's private key.\n   * Returns a Signature.\n   *\n   * @param {Uint8Array} message\n   * @returns {Signature}\n   *\n   * @example\n   * const account = new Account();\n   * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n   * account.sign(message);\n   */\n  sign(message: Uint8Array) {\n    return this._privateKey.sign(message);\n  }\n\n  /**\n   * Verifies the Signature on a message.\n   *\n   * @param {Uint8Array} message\n   * @param {Signature} signature\n   * @returns {boolean}\n   *\n   * @example\n   * const account = new Account();\n   * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n   * const signature = account.sign(message);\n   * account.verify(message, signature);\n   */\n  verify(message: Uint8Array, signature: Signature) {\n    return this._address.verify(message, signature);\n  }\n\n}\n","export async function get(url: URL | string) {\n    const response = await fetch(url);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not get URL \" + url);\n    }\n\n    return response;\n}\n\n\nexport async function post(url: URL | string, options: RequestInit) {\n    options.method = \"POST\";\n\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not post URL \" + url);\n    }\n\n    return response;\n}\n","import { get, post } from \"./utils\";\nimport {\n  Account,\n  Block,\n  RecordCiphertext,\n  Program,\n  RecordPlaintext,\n  PrivateKey,\n  WasmTransaction,\n  Transaction,\n  Transition,\n  logAndThrow\n} from \"./index\";\n\ntype ProgramImports = { [key: string]: string | Program };\n\n/**\n * Client library that encapsulates REST calls to publicly exposed endpoints of Aleo nodes. The methods provided in this\n * allow users to query public information from the Aleo blockchain and submit transactions to the network.\n *\n * @param {string} host\n * @example\n * // Connection to a local node\n * const localNetworkClient = new AleoNetworkClient(\"http://localhost:3030\");\n *\n * // Connection to a public beacon node\n * const publicnetworkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n */\nclass AleoNetworkClient {\n  host: string;\n  account: Account | undefined;\n\n  constructor(host: string) {\n    this.host = host + \"/testnet3\";\n  }\n\n  /**\n   * Set an account to use in networkClient calls\n   *\n   * @param {Account} account\n   * @example\n   * const account = new Account();\n   * networkClient.setAccount(account);\n   */\n  setAccount(account: Account) {\n    this.account = account;\n  }\n\n  /**\n   * Return the Aleo account used in the networkClient\n   *\n   * @example\n   * const account = networkClient.getAccount();\n   */\n  getAccount(): Account | undefined {\n    return this.account;\n  }\n\n  /**\n   * Set a new host for the networkClient\n   *\n   * @param {string} host The address of a node hosting the Aleo API\n   * @param host\n   */\n  setHost(host: string) {\n    this.host = host + \"/testnet3\";\n  }\n\n  async fetchData<Type>(\n      url = \"/\",\n  ): Promise<Type> {\n    try {\n      const response = await get(this.host + url);\n      return await response.json();\n    } catch (error) {\n      throw new Error(\"Error fetching data.\");\n    }\n  }\n\n  /**\n   * Attempts to find unspent records in the Aleo blockchain for a specified private key\n   * @param {number} startHeight - The height at which to start searching for unspent records\n   * @param {number} endHeight - The height at which to stop searching for unspent records\n   * @param {string | PrivateKey} privateKey - The private key to use to find unspent records\n   * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])\n   * @param {number} maxMicrocredits - The maximum number of microcredits to search for\n   * @param {string[]} nonces - The nonces of already found records to exclude from the search\n   *\n   * @example\n   * // Find all unspent records\n   * const privateKey = \"[PRIVATE_KEY]\";\n   * const records = networkClient.findUnspentRecords(0, undefined, privateKey);\n   *\n   * // Find specific amounts\n   * const startHeight = 500000;\n   * const amounts = [600000, 1000000];\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, amounts);\n   *\n   * // Find specific amounts with a maximum number of cumulative microcredits\n   * const maxMicrocredits = 100000;\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, undefined, maxMicrocredits);\n   */\n  async findUnspentRecords(\n      startHeight: number,\n      endHeight: number | undefined,\n      privateKey: string | PrivateKey | undefined,\n      amounts: number[] | undefined,\n      maxMicrocredits?: number | undefined,\n      nonces?: string[] | undefined,\n  ): Promise<Array<RecordPlaintext> | Error> {\n    nonces = nonces || [];\n    // Ensure start height is not negative\n    if (startHeight < 0) {\n      throw new Error(\"Start height must be greater than or equal to 0\");\n    }\n\n    // Initialize search parameters\n    const records = new Array<RecordPlaintext>();\n    let start;\n    let end;\n    let resolvedPrivateKey: PrivateKey;\n    let failures = 0;\n    let totalRecordValue = BigInt(0);\n    let latestHeight: number;\n\n    // Ensure a private key is present to find owned records\n    if (typeof privateKey === \"undefined\") {\n      if (typeof this.account === \"undefined\") {\n        throw new Error(\"Private key must be specified in an argument to findOwnedRecords or set in the AleoNetworkClient\");\n      } else {\n        resolvedPrivateKey = this.account._privateKey;\n      }\n    } else {\n      try {\n        resolvedPrivateKey = privateKey instanceof PrivateKey ? privateKey : PrivateKey.from_string(privateKey);\n      } catch (error) {\n        throw new Error(\"Error parsing private key provided.\");\n      }\n    }\n    const viewKey = resolvedPrivateKey.to_view_key();\n\n    // Get the latest height to ensure the range being searched is valid\n    try {\n      const blockHeight = await this.getLatestHeight();\n      if (typeof blockHeight === \"number\") {\n        latestHeight = blockHeight;\n      } else {\n        throw new Error(\"Error fetching latest block height.\");\n      }\n    } catch (error) {\n      throw new Error(\"Error fetching latest block height.\");\n    }\n\n    // If no end height is specified or is greater than the latest height, set the end height to the latest height\n    if (typeof endHeight === \"number\" && endHeight <= latestHeight) {\n      end = endHeight\n    } else {\n      end = latestHeight;\n    }\n\n    // If the starting is greater than the ending height, return an error\n    if (startHeight > end) {\n      throw new Error(\"Start height must be less than or equal to end height.\");\n    }\n\n    // Iterate through blocks in reverse order in chunks of 50\n    while (end > startHeight) {\n      start = end - 50;\n      if (start < startHeight) {\n        start = startHeight;\n      }\n      try {\n        // Get 50 blocks (or the difference between the start and end if less than 50)\n        const blocks = await this.getBlockRange(start, end);\n        end = start;\n        if (!(blocks instanceof Error)) {\n          // Iterate through blocks to find unspent records\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const transactions = block.transactions;\n            if (!(typeof transactions === \"undefined\")) {\n              for (let j = 0; j < transactions.length; j++) {\n                const confirmedTransaction = transactions[j];\n                // Search for unspent records in execute transactions of credits.aleo\n                if (confirmedTransaction.type == \"execute\") {\n                  const transaction = confirmedTransaction.transaction;\n                  if (transaction.execution && !(typeof transaction.execution.transitions == \"undefined\")) {\n                    for (let k = 0; k < transaction.execution.transitions.length; k++) {\n                      const transition = transaction.execution.transitions[k];\n                      // Only search for unspent records in credits.aleo (for now)\n                      if (transition.program !== \"credits.aleo\") {\n                        continue;\n                      }\n                      if (!(typeof transition.outputs == \"undefined\")) {\n                        for (let l = 0; l < transition.outputs.length; l++) {\n                          const output = transition.outputs[l];\n                          if (output.type === \"record\") {\n                            try {\n                              // Create a wasm record ciphertext object from the found output\n                              const record = RecordCiphertext.fromString(output.value);\n                              // Determine if the record is owned by the specified view key\n                              if (record.isOwner(viewKey)) {\n                                // Decrypt the record and get the serial number\n                                const recordPlaintext = record.decrypt(viewKey);\n\n                                // If the record has already been found, skip it\n                                const nonce = recordPlaintext.nonce();\n                                if (nonces.includes(nonce)) {\n                                  continue;\n                                }\n\n                                // Otherwise record the nonce that has been found\n                                const serialNumber = recordPlaintext.serialNumberString(resolvedPrivateKey, \"credits.aleo\", \"credits\");\n                                // Attempt to see if the serial number is spent\n                                try {\n                                  await this.getTransitionId(serialNumber);\n                                } catch (error) {\n                                  // If it's not found, add it to the list of unspent records\n                                  if (!amounts) {\n                                    records.push(recordPlaintext);\n                                    // If the user specified a maximum number of microcredits, check if the search has found enough\n                                    if (typeof maxMicrocredits === \"number\") {\n                                      totalRecordValue += recordPlaintext.microcredits();\n                                      // Exit if the search has found the amount specified\n                                      if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                        return records;\n                                      }\n                                    }\n                                  }\n                                  // If the user specified a list of amounts, check if the search has found them\n                                  if (!(typeof amounts === \"undefined\") && amounts.length > 0) {\n                                    let amounts_found = 0;\n                                    if (recordPlaintext.microcredits() > amounts[amounts_found]) {\n                                        amounts_found += 1;\n                                        records.push(recordPlaintext);\n                                        // If the user specified a maximum number of microcredits, check if the search has found enough\n                                        if (typeof maxMicrocredits === \"number\") {\n                                          totalRecordValue += recordPlaintext.microcredits();\n                                          // Exit if the search has found the amount specified\n                                          if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                            return records;\n                                          }\n                                        }\n                                        if (records.length >= amounts.length) {\n                                          return records;\n                                        }\n                                    }\n                                  }\n                                }\n                              }\n                            } catch (error) {\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // If there is an error fetching blocks, log it and keep searching\n        console.warn(\"Error fetching blocks in range: \" + start.toString() + \"-\" + end.toString());\n        console.warn(\"Error: \", error);\n        failures += 1;\n        if (failures > 10) {\n          console.warn(\"10 failures fetching records reached. Returning records fetched so far\");\n          return records;\n        }\n      }\n    }\n    return records;\n  }\n\n  /**\n   * Returns the contents of the block at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const block = networkClient.getBlock(1234);\n   */\n  async getBlock(height: number): Promise<Block | Error> {\n    try {\n      const block = await this.fetchData<Block>(\"/block/\" + height);\n      return block;\n    } catch (error) {\n      throw new Error(\"Error fetching block.\");\n    }\n  }\n\n  /**\n   * Returns a range of blocks between the specified block heights\n   *\n   * @param {number} start\n   * @param {number} end\n   * @example\n   * const blockRange = networkClient.getBlockRange(2050, 2100);\n   */\n  async getBlockRange(start: number, end: number): Promise<Array<Block> | Error> {\n    try {\n      return await this.fetchData<Array<Block>>(\"/blocks?start=\" + start + \"&end=\" + end);\n    } catch (error) {\n      const errorMessage = \"Error fetching blocks between \" + start + \" and \" + end + \".\"\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Returns the contents of the latest block\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestBlock();\n   */\n  async getLatestBlock(): Promise<Block | Error> {\n    try {\n      return await this.fetchData<Block>(\"/latest/block\") as Block;\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the hash of the last published block\n   *\n   * @example\n   * const latestHash = networkClient.getLatestHash();\n   */\n  async getLatestHash(): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/latest/hash\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest hash.\");\n    }\n  }\n\n  /**\n   * Returns the latest block height\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestHeight();\n   */\n  async getLatestHeight(): Promise<number | Error> {\n    try {\n      return await this.fetchData<number>(\"/latest/height\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest height.\");\n    }\n  }\n\n  /**\n   * Returns the source code of a program given a program ID\n   *\n   * @param {string} programId The program ID of a program deployed to the Aleo Network\n   * @return {Promise<string>} Source code of the program\n   *\n   * @example\n   * const program = networkClient.getProgram(\"hello_hello.aleo\");\n   * const expectedSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * assert.equal(program, expectedSource);\n   */\n  async getProgram(programId: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId)\n    } catch (error) {\n      throw new Error(\"Error fetching program\");\n    }\n  }\n\n  /**\n   * Returns a program object from a program ID or program source code\n   *\n   * @param {string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @return {Promise<Program | Error>} Source code of the program\n   *\n   * @example\n   * const programID = \"hello_hello.aleo\";\n   * const programSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   *\n   * // Get program object from program ID or program source code\n   * const programObjectFromID = await networkClient.getProgramObject(programID);\n   * const programObjectFromSource = await networkClient.getProgramObject(programSource);\n   *\n   * // Both program objects should be equal\n   * assert.equal(programObjectFromID.to_string(), programObjectFromSource.to_string());\n   */\n  async getProgramObject(inputProgram: string): Promise<Program | Error> {\n    try {\n      return Program.fromString(inputProgram);\n    } catch (error) {\n      try {\n        return Program.fromString(<string>(await this.getProgram(inputProgram)));\n      } catch (error) {\n        throw new Error(`${inputProgram} is neither a program name or a valid program`);\n      }\n    }\n  }\n\n  /**\n   *  Returns an object containing the source code of a program and the source code of all programs it imports\n   *\n   * @param {Program | string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @returns {Promise<ProgramImports>} Object of the form { \"program_id\": \"program_source\", .. } containing program id & source code for all program imports\n   *\n   * @example\n   * const double_test_source = \"import multiply_test.aleo;\\n\\nprogram double_test.aleo;\\n\\nfunction double_it:\\n    input r0 as u32.private;\\n    call multiply_test.aleo/multiply 2u32 r0 into r1;\\n    output r1 as u32.private;\\n\"\n   * const double_test = Program.fromString(double_test_source);\n   * const expectedImports = {\n   *     \"multiply_test.aleo\": \"program multiply_test.aleo;\\n\\nfunction multiply:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    mul r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * }\n   *\n   * // Imports can be fetched using the program ID, source code, or program object\n   * let programImports = await networkClient.getProgramImports(\"double_test.aleo\");\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program source code\n   * programImports = await networkClient.getProgramImports(double_test_source);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program object\n   * programImports = await networkClient.getProgramImports(double_test);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   */\n  async getProgramImports(inputProgram: Program | string): Promise<ProgramImports | Error> {\n    try {\n      const imports: ProgramImports = {};\n\n      // Get the program object or fail if the program is not valid or does not exist\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n\n      // Get the list of programs that the program imports\n      const importList = program.getImports();\n\n      // Recursively get any imports that the imported programs have in a depth first search order\n      for (let i = 0; i < importList.length; i++) {\n        const import_id = importList[i];\n        if (!imports.hasOwnProperty(import_id)) {\n          const programSource = <string>await this.getProgram(import_id);\n          const nestedImports = <ProgramImports>await this.getProgramImports(import_id);\n          for (const key in nestedImports) {\n            if (!imports.hasOwnProperty(key)) {\n              imports[key] = nestedImports[key];\n            }\n          }\n          imports[import_id] = programSource;\n        }\n      }\n      return imports;\n    } catch (error) {\n      throw logAndThrow(\"Error fetching program imports: \" + error)\n    }\n  }\n\n  /**\n   * Get a list of the program names that a program imports\n   *\n   * @param {Program | string} inputProgram - The program id or program source code to get the imports of\n   * @returns {string[]} - The list of program names that the program imports\n   *\n   * @example\n   * const programImportsNames = networkClient.getProgramImports(\"double_test.aleo\");\n   * const expectedImportsNames = [\"multiply_test.aleo\"];\n   * assert.deepStrictEqual(programImportsNames, expectedImportsNames);\n   */\n  async getProgramImportNames(inputProgram: Program | string): Promise<string[] | Error> {\n    try {\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n      return program.getImports();\n    } catch (error) {\n      throw new Error(\"Error fetching program imports with error: \" + error);\n    }\n  }\n\n  /**\n   * Returns the names of the mappings of a program\n   *\n   * @param {string} programId - The program ID to get the mappings of (e.g. \"credits.aleo\")\n   * @example\n   * const mappings = networkClient.getProgramMappingNames(\"credits.aleo\");\n   * const expectedMappings = [\"account\"];\n   * assert.deepStrictEqual(mappings, expectedMappings);\n   */\n  async getProgramMappingNames(programId: string): Promise<Array<string> | Error> {\n    try {\n      return await this.fetchData<Array<string>>(\"/program/\" + programId + \"/mappings\")\n    } catch (error) {\n      throw new Error(\"Error fetching program mappings - ensure the program exists on chain before trying again\");\n    }\n  }\n\n  /**\n   * Returns the value of a program's mapping for a specific key\n   *\n   * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n   * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"account\")\n   * @param {string} key - The key of the mapping to get the value of (e.g. \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\")\n   * @return {Promise<string>} String representation of the value of the mapping\n   *\n   * @example\n   * // Get public balance of an account\n   * const mappingValue = networkClient.getMappingValue(\"credits.aleo\", \"account\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n   * const expectedValue = \"0u64\";\n   * assert.equal(mappingValue, expectedValue);\n   */\n  async getProgramMappingValue(programId: string, mappingName: string, key: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId + \"/mapping/\" + mappingName + \"/\" + key)\n    } catch (error) {\n      throw new Error(\"Error fetching mapping value - ensure the mapping exists and the key is correct\");\n    }\n  }\n\n  /**\n   * Returns the latest state/merkle root of the Aleo blockchain\n   *\n   * @example\n   * const stateRoot = networkClient.getStateRoot();\n   */\n  async getStateRoot(): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/latest/stateRoot\");\n    } catch (error) {\n      throw new Error(\"Error fetching Aleo state root\");\n    }\n  }\n\n  /**\n   * Returns a transaction by its unique identifier\n   *\n   * @param {string} id\n   * @example\n   * const transaction = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n   */\n  async getTransaction(id: string): Promise<Transaction | Error> {\n    try {\n      return await this.fetchData<Transaction>(\"/transaction/\" + id);\n    } catch (error) {\n      throw new Error(\"Error fetching transaction.\");\n    }\n  }\n\n  /**\n   * Returns the transactions present at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const transactions = networkClient.getTransactions(654);\n   */\n  async getTransactions(height: number): Promise<Array<Transaction> | Error> {\n    try {\n      return await this.fetchData<Array<Transaction>>(\"/block/\" + height.toString() + \"/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions.\");\n    }\n  }\n\n  /**\n   * Returns the transactions in the memory pool.\n   *\n   * @example\n   * const transactions = networkClient.getTransactionsInMempool();\n   */\n  async getTransactionsInMempool(): Promise<Array<Transaction> | Error> {\n    try {\n      return await this.fetchData<Array<Transaction>>(\"/memoryPool/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions from mempool.\");\n    }\n  }\n\n  /**\n   * Returns the transition id by its unique identifier\n   * @param {string} transition_id - The transition id to get\n   *\n   * @example\n   * const transition = networkClient.getTransitionId(\"2429232855236830926144356377868449890830704336664550203176918782554219952323field\");\n   */\n  async getTransitionId(transition_id: string): Promise<Transition | Error> {\n    try {\n      return await this.fetchData<Transition>(\"/find/transitionID/\" + transition_id);\n    } catch (error) {\n      throw new Error(\"Error fetching transition ID.\");\n    }\n  }\n\n  /**\n   * Submit an execute or deployment transaction to the Aleo network\n   *\n   * @param {WasmTransaction | string} transaction  - The transaction to submit to the network\n   * @returns {string | Error} - The transaction id of the submitted transaction or the resulting error\n   */\n  async submitTransaction(transaction: WasmTransaction | string): Promise<string | Error> {\n    const transaction_string = transaction instanceof WasmTransaction ? transaction.toString() : transaction;\n    try {\n      const response = await post(this.host + \"/transaction/broadcast\", {\n        body: transaction_string,\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      try {\n        return await response.json();\n\n      } catch (error) {\n        throw new Error(`Error posting transaction. Aleo network response: ${(error as Error).message}`);\n      }\n    } catch (error) {\n      throw new Error(`Error posting transaction: No response received: ${(error as Error).message}`);\n    }\n  }\n}\n\nexport { AleoNetworkClient, ProgramImports }\n","import { ProvingKey, VerifyingKey, CREDITS_PROGRAM_KEYS, KEY_STORE, PRIVATE_TRANSFER, PRIVATE_TO_PUBLIC_TRANSFER, PUBLIC_TRANSFER, PUBLIC_TO_PRIVATE_TRANSFER} from \"./index\";\nimport { get } from \"./utils\";\n\ntype FunctionKeyPair = [ProvingKey, VerifyingKey];\ntype CachedKeyPair = [Uint8Array, Uint8Array];\ntype AleoKeyProviderInitParams = {\n    proverUri?: string;\n    verifierUri?: string;\n    cacheKey?: string;\n};\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface KeySearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * AleoKeyProviderParams search parameter for the AleoKeyProvider. It allows for the specification of a proverUri and\n * verifierUri to fetch keys via HTTP from a remote resource as well as a unique cacheKey to store the keys in memory.\n */\nclass AleoKeyProviderParams implements KeySearchParams {\n    proverUri: string | undefined;\n    verifierUri: string | undefined;\n    cacheKey: string | undefined;\n\n    /**\n     * Create a new AleoKeyProviderParams object which implements the KeySearchParams interface. Users can optionally\n     * specify a url for the proverUri & verifierUri to fetch keys via HTTP from a remote resource as well as a unique\n     * cacheKey to store the keys in memory for future use. If no proverUri or verifierUri is specified, a cachekey must\n     * be provided.\n     *\n     * @param { AleoKeyProviderInitParams } params - Optional search parameters\n     */\n    constructor(params: {proverUri?: string, verifierUri?: string, cacheKey?: string}) {\n        this.proverUri = params.proverUri;\n        this.verifierUri = params.verifierUri;\n        this.cacheKey = params.cacheKey;\n    }\n}\n\n/**\n * KeyProvider interface. Enables the retrieval of public proving and verifying keys for Aleo Programs.\n */\ninterface FunctionKeyProvider {\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a search object which implements the KeySearchParams interface\n     * class IndexDbSearch implements KeySearchParams {\n     *     db: string\n     *     keyId: string\n     *     constructor(params: {db: string, keyId: string}) {\n     *         this.db = params.db;\n     *         this.keyId = params.keyId;\n     *     }\n     * }\n     *\n     * // Create a new object which implements the KeyProvider interface\n     * class IndexDbKeyProvider implements FunctionKeyProvider {\n     *     async functionKeys(params: KeySearchParams): Promise<FunctionKeyPair | Error> {\n     *         return new Promise((resolve, reject) => {\n     *             const request = indexedDB.open(params.db, 1);\n     *\n     *             request.onupgradeneeded = function(e) {\n     *                 const db = e.target.result;\n     *                 if (!db.objectStoreNames.contains('keys')) {\n     *                     db.createObjectStore('keys', { keyPath: 'id' });\n     *                 }\n     *             };\n     *\n     *             request.onsuccess = function(e) {\n     *                 const db = e.target.result;\n     *                 const transaction = db.transaction([\"keys\"], \"readonly\");\n     *                 const store = transaction.objectStore(\"keys\");\n     *                 const request = store.get(params.keyId);\n     *                 request.onsuccess = function(e) {\n     *                     if (request.result) {\n     *                         resolve(request.result as FunctionKeyPair);\n     *                     } else {\n     *                         reject(new Error(\"Key not found\"));\n     *                     }\n     *                 };\n     *                 request.onerror = function(e) { reject(new Error(\"Error fetching key\")); };\n     *             };\n     *\n     *             request.onerror = function(e) { reject(new Error(\"Error opening database\")); };\n     *         });\n     *     }\n     *\n     *     // implement the other methods...\n     * }\n     *\n     *\n     * const keyProvider = new AleoKeyProvider();\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const searchParams = new IndexDbSearch({db: \"keys\", keyId: \"credits.aleo:transferPrivate\"});\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(searchParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get join function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get split function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_private function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void;\n}\n\n/**\n * AleoKeyProvider class. Implements the KeyProvider interface. Enables the retrieval of Aleo program proving and\n * verifying keys for the credits.aleo program over http from official Aleo sources and storing and retrieving function\n * keys from a local memory cache.\n */\nclass AleoKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n    cacheOption: boolean;\n    keyUris: string;\n\n    async fetchBytes(\n        url = \"/\",\n    ): Promise<Uint8Array> {\n        try {\n            const response = await get(url);\n            const data = await response.arrayBuffer();\n            return new Uint8Array(data);\n        } catch (error) {\n            throw new Error(\"Error fetching data.\" + error);\n        }\n    }\n\n    constructor() {\n        this.keyUris = KEY_STORE;\n        this.cache = new Map<string, CachedKeyPair>();\n        this.cacheOption = false;\n    }\n\n    /**\n     * Use local memory to store keys\n     *\n     * @param {boolean} useCache whether to store keys in local memory\n     */\n    useCache(useCache: boolean) {\n        this.cacheOption = useCache;\n    }\n\n    /**\n     * Clear the key cache\n     */\n    clearCache() {\n        this.cache.clear();\n    }\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair) {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    }\n\n    /**\n     * Determine if a keyId exists in the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair\n     * @returns {boolean} true if the keyId exists in the cache, false otherwise\n     */\n    containsKeys(keyId: string): boolean {\n        return this.cache.has(keyId)\n    }\n\n    /**\n     * Delete a set of keys from the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair to delete from memory\n     * @returns {boolean} true if the keyId exists in the cache and was deleted, false if the key did not exist\n     */\n    deleteKeys(keyId: string): boolean {\n        return this.cache.delete(keyId)\n    }\n\n    /**\n     * Get a set of keys from the cache\n     * @param keyId keyId of a proving and verifying key pair\n     *\n     * @returns {FunctionKeyPair | Error} Proving and verifying keys for the specified program\n     */\n    getKeys(keyId: string): FunctionKeyPair | Error {\n        console.debug(`Checking if key exists in cache. KeyId: ${keyId}`)\n        if (this.cache.has(keyId)) {\n            const [provingKeyBytes, verifyingKeyBytes] = <CachedKeyPair>this.cache.get(keyId);\n            return [ProvingKey.fromBytes(provingKeyBytes), VerifyingKey.fromBytes(verifyingKeyBytes)];\n        } else {\n            return new Error(\"Key not found in cache.\");\n        }\n    }\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams} params parameters for the key search in form of: {proverUri: string, verifierUri: string, cacheKey: string}\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * const AleoProviderParams = new AleoProviderParams(\"https://testnet3.parameters.aleo.org/transfer_private.\");\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually using the key provider\n     * const keySearchParams = { \"cacheKey\": \"myProgram:myFunction\" };\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(keySearchParams);\n     */\n    async functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error> {\n        if (params) {\n            let proverUrl;\n            let verifierUrl;\n            let cacheKey;\n            if (\"proverUrl\" in params && typeof params[\"proverUrl\"] == \"string\") {\n                proverUrl = params[\"proverUrl\"];\n            }\n\n            if (\"verifierUrl\" in params && typeof params[\"verifierUrl\"] == \"string\") {\n                verifierUrl = params[\"verifierUrl\"];\n            }\n\n            if (\"cacheKey\" in params && typeof params[\"cacheKey\"] == \"string\") {\n                cacheKey = params[\"cacheKey\"];\n            }\n\n            if (proverUrl && verifierUrl) {\n                return await this.fetchKeys(proverUrl, verifierUrl, cacheKey);\n            }\n\n            if (cacheKey) {\n                return this.getKeys(cacheKey);\n            }\n        }\n        throw Error(\"Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl\");\n    }\n\n    /**\n     * Returns the proving and verifying keys for a specified program from a specified url.\n     *\n     * @param {string} verifierUrl Url of the proving key\n     * @param {string} proverUrl Url the verifying key\n     * @param {string} cacheKey Key to store the keys in the cache\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new AleoKeyProvider object\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.fetchKeys(\"https://testnet3.parameters.aleo.org/transfer_private.prover.2a9a6f2\", \"https://testnet3.parameters.aleo.org/transfer_private.verifier.3a59762\");\n     */\n    async fetchKeys(proverUrl: string, verifierUrl: string, cacheKey?: string): Promise<FunctionKeyPair | Error> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return [ProvingKey.fromBytes(value[0]), VerifyingKey.fromBytes(value[1])];\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                    console.debug(\"Fetching verifying keys \" + verifierUrl);\n                    const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                    this.cache.set(cacheKey, [provingKey.toBytes(), verifyingKey.toBytes()]);\n                    return [provingKey, verifyingKey];\n                }\n            }\n            else {\n                // If cache is disabled, fetch the keys and return them\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                return [provingKey, verifyingKey];\n            }\n        } catch (error) {\n            throw new Error(`Error: ${error} fetching fee proving and verifying keys from ${proverUrl} and ${verifierUrl}.`);\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the transfer functions in the credits.aleo program\n     * @param {string} visibility Visibility of the transfer function\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the transfer functions\n     *\n     * @example\n     * // Create a new AleoKeyProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    async transferKeys(visibility: string): Promise<FunctionKeyPair | Error> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private.prover, CREDITS_PROGRAM_KEYS.transfer_private.verifier);\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private_to_public.prover, CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier);\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public.prover, CREDITS_PROGRAM_KEYS.transfer_public.verifier);\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public_to_private.prover, CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier);\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the join function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    async joinKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.join.prover, CREDITS_PROGRAM_KEYS.join.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the split function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the split function\n     * */\n    async splitKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.split.prover, CREDITS_PROGRAM_KEYS.split.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_private function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePrivateKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_private.prover, CREDITS_PROGRAM_KEYS.fee_private.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_public function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePublicKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_public.prover, CREDITS_PROGRAM_KEYS.fee_public.verifier);\n    }\n\n    /**\n     * Gets a verifying key. If the verifying key is for a credits.aleo function, get it from the wasm cache otherwise\n     *\n     * @returns {Promise<VerifyingKey | Error>} Verifying key for the function\n     */\n    // attempt to fetch it from the network\n    async getVerifyingKey(verifierUrl: string): Promise<VerifyingKey | Error> {\n        switch (verifierUrl) {\n            case CREDITS_PROGRAM_KEYS.fee_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.fee_private.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.fee_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.fee_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.inclusion.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.inclusion.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.join.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.join.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.split.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.split.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_private.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifyingKey);\n            default:\n                return <VerifyingKey>VerifyingKey.fromBytes(await this.fetchBytes(verifierUrl));\n        }\n    }\n}\n\nexport {AleoKeyProvider, AleoKeyProviderParams, AleoKeyProviderInitParams, CachedKeyPair, FunctionKeyPair, FunctionKeyProvider, KeySearchParams}\n","import { logAndThrow, RecordPlaintext } from \"./index\";\nimport { Account } from \"./account\";\nimport { AleoNetworkClient } from \"./network-client\";\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface RecordSearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * Interface for a record provider. A record provider is used to find records for use in deployment and execution\n * transactions on the Aleo Network. A default implementation is provided by the NetworkRecordProvider class. However,\n * a custom implementation can be provided (say if records are synced locally to a database from the network) by\n * implementing this interface.\n */\ninterface RecordProvider {\n    account: Account\n\n    /**\n     * Find a credits.aleo record with a given number of microcredits from the chosen provider\n     *\n     * @param {number} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // A class implementing record provider can be used to find a record with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, its nonce should be added to the nonces array so that it is not\n     * // found again if a subsequent search is performed\n     * const record2 = await recordProvider.findCreditsRecord(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    findCreditsRecord(microcredits: number, unspent: boolean,  nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error>;\n\n    /**\n     * Find a list of credit.aleo records with a given number of microcredits from the chosen provider\n     *\n     * @param {number} microcreditAmounts A list of separate microcredit amounts to search for (e.g. [5000, 100000])\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext[] | Error>} A list of records with a value greater or equal to the amounts specified if such records exist, otherwise an error\n     *\n     * @example\n     * // A class implementing record provider can be used to find a record with a given number of microcredits\n     * const records = await recordProvider.findCreditsRecords([5000, 5000], true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces array so that it is not\n     * // found again if a subsequent search is performed\n     * const nonces = [];\n     * records.forEach(record => { nonces.push(record.nonce()) });\n     * const records2 = await recordProvider.findCreditsRecord(5000, true, nonces);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    findCreditsRecords(microcreditAmounts: number[], unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error>;\n\n    /**\n     * Find an arbitrary record\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // The RecordSearchParams interface can be used to create parameters for custom record searches which can then\n     * // be passed to the record provider. An example of how this would be done for the credits.aleo program is shown\n     * // below.\n     *\n     * class CustomRecordSearch implements RecordSearchParams {\n     *     startHeight: number;\n     *     endHeight: number;\n     *     amount: number;\n     *     program: string;\n     *     recordName: string;\n     *     constructor(startHeight: number, endHeight: number, credits: number, maxRecords: number, programName: string, recordName: string) {\n     *         this.startHeight = startHeight;\n     *         this.endHeight = endHeight;\n     *         this.amount = amount;\n     *         this.program = programName;\n     *         this.recordName = recordName;\n     *     }\n     * }\n     *\n     * const params = new CustomRecordSearch(0, 100, 5000, \"credits.aleo\", \"credits\");\n     *\n     * const record = await recordProvider.findRecord(true, [], params);\n     */\n    findRecord(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error>;\n\n    /**\n     * Find multiple records from arbitrary programs\n     *\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * // The RecordSearchParams interface can be used to create parameters for custom record searches which can then\n     * // be passed to the record provider. An example of how this would be done for the credits.aleo program is shown\n     * // below.\n     *\n     * class CustomRecordSearch implements RecordSearchParams {\n     *     startHeight: number;\n     *     endHeight: number;\n     *     amount: number;\n     *     maxRecords: number;\n     *     programName: string;\n     *     recordName: string;\n     *     constructor(startHeight: number, endHeight: number, credits: number, maxRecords: number, programName: string, recordName: string) {\n     *         this.startHeight = startHeight;\n     *         this.endHeight = endHeight;\n     *         this.amount = amount;\n     *         this.maxRecords = maxRecords;\n     *         this.programName = programName;\n     *         this.recordName = recordName;\n     *     }\n     * }\n     *\n     * const params = new CustomRecordSearch(0, 100, 5000, 2, \"credits.aleo\", \"credits\");\n     * const records = await recordProvider.findRecord(true, [], params);\n     */\n    findRecords(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error>;\n}\n\n/**\n * A record provider implementation that uses the official Aleo API to find records for usage in program execution and\n * deployment, wallet functionality, and other use cases.\n */\nclass NetworkRecordProvider implements RecordProvider {\n    account: Account;\n    networkClient: AleoNetworkClient;\n    constructor(account: Account, networkClient: AleoNetworkClient) {\n        this.account = account;\n        this.networkClient = networkClient;\n    }\n\n    /**\n     * Set the account used to search for records\n     *\n     * @param {Account} account The account to use for searching for records\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Find a list of credit records with a given number of microcredits by via the official Aleo API\n     *\n     * @param {number[]} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // Create a new NetworkRecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // The record provider can be used to find records with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not\n     * // found again if a subsequent search is performed\n     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * */\n    async findCreditsRecords(microcredits: number[], unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error> {\n        let startHeight = 0;\n        let endHeight = 0;\n\n        if (searchParameters) {\n            if (\"startHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                startHeight = searchParameters[\"startHeight\"];\n            }\n\n            if (\"endHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                endHeight = searchParameters[\"endHeight\"];\n            }\n        }\n\n        // If the end height is not specified, use the current block height\n        if (endHeight == 0) {\n            const end = await this.networkClient.getLatestHeight();\n            if (end instanceof Error) {\n                throw logAndThrow(\"Unable to get current block height from the network\")\n            }\n            endHeight = end;\n        }\n\n        // If the start height is greater than the end height, throw an error\n        if (startHeight >= endHeight) {\n            throw logAndThrow(\"Start height must be less than end height\");\n        }\n\n        return await this.networkClient.findUnspentRecords(startHeight, endHeight, this.account.privateKey(), microcredits, undefined, nonces);\n    }\n\n    /**\n     * Find a credit record with a given number of microcredits by via the official Aleo API\n     *\n     * @param {number} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // Create a new NetworkRecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // The record provider can be used to find records with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not\n     * // found again if a subsequent search is performed\n     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    async findCreditsRecord(microcredits: number, unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        const records = await this.findCreditsRecords([microcredits], unspent, nonces, searchParameters);\n        if (!(records instanceof Error) && records.length > 0) {\n            return records[0];\n        }\n        console.error(\"Record not found with error:\", records);\n        return new Error(\"Record not found\");\n    }\n\n    /**\n     * Find an arbitrary record. WARNING: This function is not implemented yet and will throw an error.\n     */\n    async findRecord(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Find multiple arbitrary records. WARNING: This function is not implemented yet and will throw an error.\n     */\n    async findRecords(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n}\n\n/**\n * BlockHeightSearch is a RecordSearchParams implementation that allows for searching for records within a given\n * block height range.\n *\n * @example\n * // Create a new BlockHeightSearch\n * const params = new BlockHeightSearch(89995, 99995);\n *\n * // Create a new NetworkRecordProvider\n * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n * const keyProvider = new AleoKeyProvider();\n * const recordProvider = new NetworkRecordProvider(account, networkClient);\n *\n * // The record provider can be used to find records with a given number of microcredits and the block height search\n * // can be used to find records within a given block height range\n * const record = await recordProvider.findCreditsRecord(5000, true, [], params);\n *\n */\nclass BlockHeightSearch implements RecordSearchParams {\n    startHeight: number;\n    endHeight: number;\n    constructor(startHeight: number, endHeight: number) {\n        this.startHeight = startHeight;\n        this.endHeight = endHeight;\n    }\n}\n\nexport { BlockHeightSearch, NetworkRecordProvider, RecordProvider, RecordSearchParams};\n","// Experimental example where SDK manages worker\n\nimport { wrap } from \"comlink\";\nimport { WorkerAPI } from './worker';\n\nlet singletonWorker: WorkerAPI | null = null;\n\nconst createAleoWorker = (): WorkerAPI => {\n    if (!singletonWorker) {\n        const worker = new Worker(new URL(\"worker.js\", import.meta.url), {\n            type: \"module\",\n        });\n        singletonWorker = wrap<WorkerAPI>(worker);\n    }\n    return singletonWorker;\n};\n\nexport { createAleoWorker };","import {\n    Account,\n    AleoKeyProvider,\n    AleoNetworkClient,\n    ExecutionResponse,\n    FunctionKeyProvider,\n    FunctionKeyPair,\n    KeySearchParams,\n    RecordPlaintext,\n    RecordProvider,\n    RecordSearchParams,\n    PrivateKey,\n    Program,\n    ProgramImports,\n    ProvingKey,\n    VerifyingKey,\n    PRIVATE_TRANSFER_TYPES,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n    ProgramManagerBase as WasmProgramManager,\n} from \"./index\";\n\n\n\n/**\n * The ProgramManager class is used to execute and deploy programs on the Aleo network and create value transfers.\n */\nclass ProgramManager {\n    account: Account | undefined;\n    keyProvider: FunctionKeyProvider;\n    host: string;\n    networkClient: AleoNetworkClient;\n    recordProvider: RecordProvider | undefined;\n\n    /** Create a new instance of the ProgramManager\n     *\n     * @param { string | undefined } host A host uri running the official Aleo API\n     * @param { FunctionKeyProvider | undefined } keyProvider A key provider that implements {@link FunctionKeyProvider} interface\n     * @param { RecordProvider | undefined } recordProvider A record provider that implements {@link RecordProvider} interface\n     */\n    constructor(host: string | undefined, keyProvider: FunctionKeyProvider | undefined, recordProvider: RecordProvider | undefined) {\n        if (!host) {\n            this.host = \"https://vm.aleo.org/api\";\n            this.networkClient = new AleoNetworkClient(this.host);\n        } else {\n            this.host = host;\n            this.networkClient = new AleoNetworkClient(host);\n        }\n\n        if (!keyProvider) {\n            this.keyProvider = new AleoKeyProvider();\n        } else {\n            this.keyProvider = keyProvider;\n        }\n\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Set the account to use for transaction submission to the Aleo network\n     *\n     * @param {Account} account Account to use for transaction submission\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Set the key provider that provides the proving and verifying keys for programs\n     *\n     * @param {FunctionKeyProvider} keyProvider\n     */\n    setKeyProvider(keyProvider: FunctionKeyProvider) {\n        this.keyProvider = keyProvider;\n    }\n\n    /**\n     * Set the host peer to use for transaction submission to the Aleo network\n     *\n     * @param host {string} Peer url to use for transaction submission\n     */\n    setHost(host: string) {\n        this.host = host;\n        this.networkClient.setHost(host);\n    }\n\n    /**\n     * Set the record provider that provides records for transactions\n     *\n     * @param {RecordProvider} recordProvider\n     */\n    setRecordProvider(recordProvider: RecordProvider) {\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Deploy an Aleo program to the Aleo network\n     *\n     * @param {string} program Program source code\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to use\n     * pay the deployment fee\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {string | Error} The transaction id of the deployed program or a failure message from the network\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for deployments\n     * const program = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     *\n     * // Define a fee in credits\n     * const fee = 1.2;\n     *\n     * // Deploy the program\n     * const tx_id = await programManager.deploy(program, fee);\n     *\n     * // Verify the transaction was successful\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async deploy(\n        program: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        feeRecord?: string | RecordPlaintext,\n        privateKey?: PrivateKey,\n    ): Promise<string | Error> {\n        // Ensure the program is valid and does not exist on the network\n        try {\n            const programObject = Program.fromString(program);\n            let programSource;\n            try {\n                programSource = this.networkClient.getProgram(programObject.id());\n            } catch (e) {\n                // Program does not exist on the network, deployment can proceed\n                console.log(`Program ${programObject.id()} does not exist on the network, deploying...`);\n            }\n            if (typeof programSource == \"string\") {\n                throw (`Program ${programObject.id()} already exists on the network, please rename your program`);\n            }\n        } catch (e) {\n            throw logAndThrow(`Error validating program: ${e}`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let deploymentPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            deploymentPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof deploymentPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n        } catch (e) {\n            throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build a deployment transaction and submit it to the network\n        const tx = await WasmProgramManager.buildDeploymentTransaction(deploymentPrivateKey, program, fee, feeRecord, this.host, imports, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Execute an Aleo program on the Aleo network\n     *\n     * @param {string} programName Program name containing the function to be executed\n     * @param {string} functionName Function name to execute\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {string[]} inputs Inputs to the function\n     * @param {RecordSearchParams} recordSearchParams Optional parameters for searching for a record to pay the fee for\n     * the execution transaction\n     * @param {KeySearchParams} keySearchParams Optional parameters for finding the matching proving & verifying keys\n     * for the function\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * const keySearchParams = { \"cacheKey\": \"hello_hello:hello\" };\n     * const tx_id = await programManager.execute(programName, \"hello_hello\", 0.020, [\"5u32\", \"5u32\"], undefined, undefined, undefined, keySearchParams);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async execute(\n        programName: string,\n        functionName: string,\n        fee: number,\n        privateFee: boolean,\n        inputs: string[],\n        recordSearchParams?: RecordSearchParams,\n        keySearchParams?: KeySearchParams,\n        feeRecord?: string | RecordPlaintext,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n    ): Promise<string | Error> {\n        // Ensure the function exists on the network\n        let program;\n        try {\n            program = <string>(await this.networkClient.getProgram(programName));\n        } catch (e) {\n            throw logAndThrow(`Error finding ${programName}. Network response: '${e}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the fee proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(programName);\n        } catch (e) {\n            throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildExecutionTransaction(executionPrivateKey, program, functionName, inputs, fee, feeRecord, this.host, imports, provingKey, verifyingKey, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Execute an Aleo program in offline mode\n     *\n     * @param {string} program Program source code containing the function to be executed\n     * @param {string} function_name Function name to execute\n     * @param {string[]} inputs Inputs to the function\n     * @param {number} proveExecution Whether to prove the execution of the function and return an execution transcript\n     * that contains the proof.\n     * @param {string[] | undefined} imports Optional imports to the program\n     * @param {KeySearchParams | undefined} keySearchParams Optional parameters for finding the matching proving &\n     * verifying keys for the function\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * import { Account, Program } from '@aleohq/sdk';\n     *\n     * /// Create the source for the \"helloworld\" program\n     * const program = \"program helloworld.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager();\n     *\n     * /// Create a temporary account for the execution of the program\n     * const account = new Account();\n     * programManager.setAccount(account);\n     *\n     * /// Get the response and ensure that the program executed correctly\n     * const executionResponse = await programManager.executeOffline(program, \"hello\", [\"5u32\", \"5u32\"]);\n     * const result = executionResponse.getOutputs();\n     * assert(result === [\"10u32\"]);\n     */\n    async executeOffline(\n        program: string,\n        function_name: string,\n        inputs: string[],\n        proveExecution: boolean,\n        imports?: ProgramImports,\n        keySearchParams?: KeySearchParams,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n    ): Promise<ExecutionResponse> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Run the program offline and return the result\n        console.log(\"Running program offline\")\n        console.log(\"Proving key: \", provingKey);\n        console.log(\"Verifying key: \", verifyingKey);\n        return WasmProgramManager.executeFunctionOffline(executionPrivateKey, program, function_name, inputs, proveExecution, false, imports, provingKey, verifyingKey);\n    }\n\n    /**\n     * Join two credits records into a single credits record\n     *\n     * @param {RecordPlaintext | string} recordOne First credits record to join\n     * @param {RecordPlaintext | string} recordTwo Second credits record to join\n     * @param {number} fee Fee in credits pay for the join transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the fee record to use\n     * to pay the fee for the join transaction\n     * @param {RecordPlaintext | string | undefined} feeRecord Fee record to use for the join transaction\n     * @param {PrivateKey | undefined} privateKey Private key to use for the join transaction\n     * @returns {Promise<string | Error>}\n     */\n    async join(\n        recordOne: RecordPlaintext | string,\n        recordTwo: RecordPlaintext | string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams | undefined,\n        feeRecord?: RecordPlaintext | string | undefined,\n        privateKey?: PrivateKey\n    ): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let joinKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            joinKeys = <FunctionKeyPair>await this.keyProvider.joinKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [joinProvingKey, joinVerifyingKey] = joinKeys;\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Validate the records provided are valid plaintext records\n        try {\n            recordOne = recordOne instanceof RecordPlaintext ? recordOne : RecordPlaintext.fromString(recordOne);\n            recordTwo = recordTwo instanceof RecordPlaintext ? recordTwo : RecordPlaintext.fromString(recordTwo);\n        } catch (e) {\n            throw logAndThrow('Records provided are not valid. Please ensure they are valid plaintext records.')\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildJoinTransaction(executionPrivateKey, recordOne, recordTwo, fee, feeRecord, this.host, joinProvingKey, joinVerifyingKey, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Split credits into two new credits records\n     *\n     * @param {number} splitAmount Amount in microcredits to split from the original credits record\n     * @param {RecordPlaintext | string} amountRecord Amount record to use for the split transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the split transaction\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * const record = \"{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 4106205762862305308495708971985748592380064201230396559307556388725936304984group.public}\"\n     * const tx_id = await programManager.split(25000000, record);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async split(splitAmount: number, amountRecord: RecordPlaintext | string, privateKey?: PrivateKey): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the split keys from the key provider\n        let splitKeys;\n        try {\n            splitKeys = <FunctionKeyPair>await this.keyProvider.splitKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [splitProvingKey, splitVerifyingKey] = splitKeys;\n\n        // Validate the record to be split\n        try {\n            amountRecord = amountRecord instanceof RecordPlaintext ? amountRecord : RecordPlaintext.fromString(amountRecord);\n        } catch (e) {\n            throw logAndThrow(\"Record provided is not valid. Please ensure it is a valid plaintext record.\");\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildSplitTransaction(executionPrivateKey, splitAmount, amountRecord, this.host, splitProvingKey, splitVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Pre-synthesize proving and verifying keys for a program\n     *\n     * @param program {string} The program source code to synthesize keys for\n     * @param function_id {string} The function id to synthesize keys for\n     * @param inputs {Array<string>}  Sample inputs to the function\n     * @param privateKey {PrivateKey | undefined} Optional private key to use for the key synthesis\n     *\n     * @returns {Promise<FunctionKeyPair | Error>}\n     */\n    async synthesizeKeys(\n        program: string,\n        function_id: string,\n        inputs: Array<string>,\n        privateKey?: PrivateKey,\n    ): Promise<FunctionKeyPair | Error> {\n        // Resolve the program imports if they exist\n        let imports;\n\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\") {\n            if (typeof this.account !== \"undefined\") {\n                executionPrivateKey = this.account.privateKey();\n            } else {\n                executionPrivateKey = new PrivateKey();\n            }\n        }\n\n        // Attempt to run an offline execution of the program and extract the proving and verifying keys\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n            const keyPair = await WasmProgramManager.synthesizeKeyPair(\n                executionPrivateKey,\n                program,\n                function_id,\n                inputs,\n                imports\n            );\n            return [<VerifyingKey>keyPair.provingKey(), <ProvingKey>keyPair.verifyingKey()];\n        } catch (e) {\n            throw logAndThrow(`Could not synthesize keys - error ${e}. Please ensure the program is valid and the inputs are correct.`);\n        }\n    }\n\n    /**\n     * Transfer credits to another account\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async transfer(amount: number, recipient: string, transferType: string, fee: number, privateFee: boolean,\n                   recordSearchParams?: RecordSearchParams, amountRecord?: RecordPlaintext | string, feeRecord?: RecordPlaintext | string, privateKey?: PrivateKey): Promise<string | Error> {\n        // Validate the transfer type\n        transferType = <string>validateTransferType(transferType);\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let transferKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            transferKeys = <FunctionKeyPair>await this.keyProvider.transferKeys(transferType);\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [transferProvingKey, transferVerifyingKey] = transferKeys;\n\n        // Get the amount and fee record from the account if it is not provided in the parameters\n        try {\n            // Track the nonces of the records found so no duplicate records are used\n            const nonces: string[] = [];\n            if (requiresAmountRecord(transferType)) {\n                // If the transfer type is private and requires an amount record, get it from the record provider\n                amountRecord = <RecordPlaintext>await this.getCreditsRecord(fee, [], amountRecord, recordSearchParams);\n                nonces.push(amountRecord.nonce());\n            } else {\n                amountRecord = undefined;\n            }\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, nonces, feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildTransferTransaction(executionPrivateKey, amount, recipient, transferType, amountRecord, fee, feeRecord, this.host, transferProvingKey, transferVerifyingKey, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Create a program object from a program's source code\n     *\n     * @param {string} program Program source code\n     * @returns {Program | Error} The program object\n     */\n    createProgramFromSource(program: string): Program | Error {\n        return Program.fromString(program);\n    }\n\n    /**\n     * Get the credits program object\n     *\n     * @returns {Program} The credits program object\n     */\n    creditsProgram(): Program {\n        return Program.getCreditsProgram();\n    }\n\n    /**\n     * Verify a program is valid\n     *\n     * @param {string} program The program source code\n     */\n    verifyProgram(program: string): boolean {\n        try {\n            <Program>Program.fromString(program);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // Internal utility function for getting a credits.aleo record\n    async getCreditsRecord(amount: number, nonces: string[], record?: RecordPlaintext | string, params?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        try {\n            return record instanceof RecordPlaintext ? record : RecordPlaintext.fromString(<string>record);\n        } catch (e) {\n            try {\n                const recordProvider = <RecordProvider>this.recordProvider;\n                return <RecordPlaintext>(await recordProvider.findCreditsRecord(amount, true, nonces, params))\n            } catch (e) {\n                throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n            }\n        }\n    }\n}\n\n// Ensure the transfer type requires an amount record\nfunction requiresAmountRecord(transferType: string): boolean {\n    return PRIVATE_TRANSFER_TYPES.has(transferType);\n}\n\n// Validate the transfer type\nfunction validateTransferType(transferType: string): string | Error {\n    return VALID_TRANSFER_TYPES.has(transferType) ? transferType :\n        logAndThrow(`Invalid transfer type '${transferType}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`);\n}\n\nexport { ProgramManager }\n","const KEY_STORE = \"https://testnet3.parameters.aleo.org/\";\n\nconst CREDITS_PROGRAM_KEYS = {\n    fee_private: {\n        prover: KEY_STORE + \"fee_private.prover.d02301c\",\n        verifier: \"fee_private.verifier.00ae6a3\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqp85yqqqqqqqqqy0ggqqqqqqqqqhlaqqqqqqqqqplt2qyqqqqqqqz50xqqqqqqqqqqvqqqqqqqqqqq0r58vs3glghpap9wxma98vx8znu5nx4dr6zw4ukjwnn42jg82xmxtwfs2fz4kqpuxpeh5tmzkwzgpp99qmwwazfppvw4d830cv7d2dwpy5h6r98q6dlp295wt4rcv4vkx6q90pxhrkvd8zd67tnk6xrtgq3c6q5e3v3rypfh3ajyn4e5nnr52svqdd9tvejaauj7lc0dje239fd29wr2fcr2cctaa6wcef6rsqpuzyaj2qahlxdtvwj0c66fnu8d0r076ds2l2z4emd0rzra7yh5w93w52lqe7n3985qwrk0ugyeqvqpq95m45qgesy07j96k6fezqyrzh4s2mtd3nwgqd34gdhg5esplz0428mt7efk7w0rck9jk6t5vf5qun0lutum06l9swsljnvy62qyv9h98ce473xa03u9py2kashf277n8ycze4ec9ln0d7sssvccnv7sq2w90aqrleg7sadlt9xy4ymlqqt5adkwee0g920j4qwt9ch28eqxykctu3ddanan9xwv57n6eh5wsqtkjlse7g9q83c5gaka3gsg0g63j9fl56sy9mgxzdh0ledl85a4xfmu3jnqjlfd33w87yxw00njqszg6fvxnd828hyzgul4x6d3vsctn6jxclpj7v9gjrhvwsmeas8q3r4n5vcfqaccsl2t6vvy4qrzl0qq2ae8jt8y077tnatgy386vkmdpa6h2f6gxh22q09eqptmh9x9m4y8c2t7pgg0hpdnxkj4kez3lpjq08dzp9j9dtsr4vtjxur5c0hrrkvmd3gjzsa7378559gwqunply8hh8clhljequ4tgra2s404yfesqvph2hzaf8vqmx3dd75yllnta94796jg2v4ld054g5ke5esahfwudhpcpfm6fndcmstwcz0rhhsjgq5jetw49vfsrfr0vsala3xt8jvshg46xj9vlx70gcfhanaeqyrlke5xjzc\",\n    },\n    fee_public: {\n        prover: KEY_STORE + \"fee_public.prover.5515650\",\n        verifier: \"fee_public.verifier.40ea40e\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqq9wggqqqqqqqqqtxssqqqqqqqqqxdaqqqqqqqqqpp93qqqqqqqqqrw96qqqqqqqqqqvqqqqqqqqqqqgcegdmfr5a2z7lxv5r9pym8t77stu7xmer78uzdh635u5vg2etr0chrkm2u3k3s9gj4ypk2h96uyp8y04x2x7j9e7g932uk0vx8vau03ett9atggqwxwntlq77mde6k9kt2cfgwjdzk3lcj8xusr7n4cszr2t49ghw8s3yetemp9uq2gv4jwe7d36k96rz8thx05jye0zp2r5u04c6luzys5w39klgdhgg8knsq89h2r6u8tx7h7y2j5422q7dvjj90sn0vgfakgtfh3lwl0f83g90aykdfrsmjm40xed30gnmwxhlqgccvw7sac3hrxeamencv07hu8xwm2k9l34qlujzrtfcv3vdt36tv8c4t972a0gawpaampexfyh62qvjzjmqukzg485klj79rj4tryefz9xa37z74t93590859qqscqc5jjmqjd6uwkdnlpu60tuz4ucnypmz4cem0z2urgkue2q80z7u5fwtpzku4x6yf8vlx8nvtnlpvq7ymh2pkjaaay08557t39qnaw7zggqz4gug53aq7s3rnedfg8d3mkehqfgyvrgj0xag48jnjclp33yhejanx7zcd2ukwjmc75gm4uv022qxrm5h8uyvszmlhq2863vh3c7rl6pplvrqlasngafpnfgvhn4k427k38xqjru4q4x3jcyantaw0neqp54mucvkcdcrryed7ukqlrzx63ryv6hsp63ax4gxlaw0xrw4hfgar2wdeckghzkmza24vc3jt5juqgwwag6rh9x2j8xwujagev89g25605fqye6ld5yjaannpnzmzxtw35w5aglrtmpwwf9zjaw9049ssqlxqmwfqa9t4h7e78k87gsynjhwhuj8y0fmsndmld7ke7tzq3kfsjujxry8g7az0jmrm83qxmgrqsqz8r75cj3rxdx5v9g5n8y2sv5jv2escy2q5qs3k8s6payfkzhv52shuydc\",\n    },\n    inclusion: {\n        prover: KEY_STORE + \"inclusion.prover.b46b287\",\n        verifier: \"inclusion.verifier.2fae105\",\n        verifyingKey:\n            \"verifier1qyyqqqqqqqqqqqzq7qqsqqqqqqqqdugpqqqqqqqqtm7syqqqqqqqpg43qvqqqqqqqzk8sqcqqqqqqqqvqqqqqqqqqqqyjtgkq7td45a5h94srp9yljcvwacqas7empws2j9lklccezgsxp58zta506lkyu6qyk0g8h4eq2ypps3rzg4kjpz7zzutgfd0qj8jw2rnfy68h5asc65tgv89e25fn02kfx002npkuyjdqj8p0urycchcqwy4j85agcdtw7f7ua2tvtq00tk4wc8cc7yqyqwesrt5n6krf0p5penhaj4gfzpefvcnqqf3hlu7qx25n4ng8txtuhyem8lwydlq3qgm8eywzj6uy76943ja58tx3acpcjw0p9c82lxv9ralqrq5z78slqx2v796nzcjmuacrar2yp4remga7qtgm0qcvejgulhp93jamuxvxj20s4ar493pp9hyww5g0prwf7qztkjzpp4nfljdwhra2022z0rnt8mkuryl8rzz8sxxsnf6twzr6pfemlu7z0jclrad92jeswwkul5pmyrwp9e4q5xsgappatw9neup7n0u3lls9cyhlujradvyze6yywdcccchu5p864ad9ahxws3pt36cq8lk49pl3kwkszr8fc3en8u6p9tst9zf6a0hwwcuc8lzx7sh4zhqjyt4umdjl9rr2yg8z875xhqdszxxdnd5nrrv724seqrqs8u3grw85hc2qafl4glrt9s9r49a9zrp8v2akql3l7f00v0wk82el5te5qdtdf2n4a8lgzzth7fyvtxxqse6pye5je2p67l9mnv784ay5t7c4z9u59q5m75r3j7nck9a4e2pyqququmk0pa64xfcyt5kj94730awdad7ch6f22lrr4vv7l0xxsmndhzjnxttk6gw59gt3950xc5gqzsqc5zsj56c0fqpsg8aevq7cl4tj7gj8exmtlq5savkclan8kqr4554m99c8wzwf4u9r4xapktcqttcq33r2dg48kk374rzx9m98prt637cvv0j9mru779cwxytgzndutlx3napjj\",\n    },\n    join: {\n        prover: KEY_STORE + \"join.prover.30895cc\",\n        verifier: \"join.verifier.5cb1e62\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqqqeuqqqqqqqqqz3ncqqqqqqqqqgvkqzqqqqqqqq590qyqqqqqqqzwn5qgqqqqqqqqvqqqqqqqqqqqpkgztrguz0x8mpfjhsnmqqsnwl764jw73ll0nxcg7pzt59lpd7zsjlmrprw3w6r7npmx4ck4kz3qq7mslfg4rhc9anmgza3dvms2qjhz0hatprzdgmsk3usxkttpep7wej007nzrhzzdmcca2603z4f4cp80q7drqtqw3quvqu5z4nnzspqca272csmxknz9mlwu4u6f9u2zha5rwjgv2hp0l8dlc7aa32dggq9afa5hkqmwnptqmhavy050nf48ndcl6vmjlm95c582wqyws2z5fckxsw6stcxdxxhj7v26padsumqpk58n2f6fejx3k80j2shqa642hulj3sx08ywtxg506n8dnm6nu2ltp4z5apf6wtam9kzaadackjjq6vnahqmqlkuncyslzeml246ajhy5yldyc20p9pf84gn6zdwlq79azygr4fwtvra632w333kh2e3sq4hwtk967gz8zxtsgph0nlncfhqz6wmt5cccd64qwpezp2yuglkrp7jmk4ggkefa5aw09lvhe646gpt0lkjn984uqg6r46a8q3u9vcezmtnq090xkgq0euqtkjrgjks6cxqz9hqw339k8jzepd9nxlhu7sqtv0n0uvz8p3e8wxc784jsvpf4dp92kndr2e6n9p85q8ty4z93l0fn4k7wv6neqkj9y6drya0284qv98y4lthmredwtdlm7p2489etmf473zehyhgpgmu094h97dcyzj22uzwvvayxfjlrv4qlnag2zgcqlma4j7cte6uhsfc98kf54jneuqktsmsacz7gftk9s0cunkevaamkcrt0e086j9lf9vd8eqvkn6esqfsfpjxk4lq94a5mqxgg0eazejt2wtda86l7hj2zxn9k5cy65jp6e97yp8ahakzf6vm0z53te7x9srqeupscxgx8vxla4rqse8srw9ypv3h4q902szlneeuuh4rm46rjnltvt9k\",\n    },\n    split: {\n        prover: KEY_STORE + \"split.prover.a9784b9\",\n        verifier: \"split.verifier.38392d9\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqq8qecqqqqqqqqqqnncqqqqqqqqqr4qqzqqqqqqqpnx4qyqqqqqqqqln7qgqqqqqqqqvqqqqqqqqqqqx4tv4dx9ct4hgwe0cgmqrljgeg88zfepv9gk26d4m2tggqwrj30tgpfatc9654hdggyvymxedz6qqqx3upvdhtl2ux9cvyl3qwtsj5hnqwjpq4xvdvwxggnureuqmhsyegt3k7m3nffxj9zuvkmccmfnczu5y8rd735uwlwa84qq7e092nnsrdyryap6tusdedfwsnkqfllv34l6ny0mlqdrv33jeghluhp5zs88fuc3209j958zh5fuhln6rdleyuk20c7lk4uv79ngx2uh44ed2elvf8ltcj033gg0skmrc5g9tcqrcax5nzyxpafv326m7c8lnz98gks6wlgnyk8qk7qzc4ufp236yuzx94ug8kfsj0tjnvqx6n5ls4yq27fgydj0f4ac6xhjtrqcfa675d4ufs9qdfguexv30rheew7n2n09sng7w5g5mz26dmmmsxnva0luqt2qe9h9jqmn7ajeqadqarvggquz72n94dd5dvpprppjl99lqgzavlp3nph7d4jwzp6txnhxqcecsrt0h5w95v7l8e3qtq274k8427nzl5j3ywy59ssqeagfedxpy3kaytlqmuevluk70tw50drkwaddaspdmfk7ct6s8vurtjg67atnr277xydursaj4trngkndqfhh89tmknmtukcuev77uxhsu3xv2rcr6dqw3mdy7qf6a72ltwkk5g75l4cjxc8ktxwnklcw0nwupqry4xayka9fqngyq9prc022sztk64fqr22qxcv7vtzf5dfhy3j4alqx2vnq6gzhgn8nx7trw8s09txmz6j7jm8v6fwn00evqt46ak5ykd46yfzgpmxuuxut8vxvftzfpq40sl6zhy63c5zusdstaeal9d2rcfpw9pr2pegr2cj307hapacguraxcfrgcq5q2evj9afe7cznp3c99vt44jtngr0jzfn0l6m8xl0aa3cvc75d3xge3sg\",\n    },\n    transfer_private: {\n        prover: KEY_STORE + \"transfer_private.prover.deb77db\",\n        verifier: \"transfer_private.verifier.3088e6d\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqq9n65qqqqqqqqqde4gqqqqqqqqqcfvqzqqqqqqqppl7qyqqqqqqqzuyvqgqqqqqqqqvqqqqqqqqqqqqcqaunljwmh56k2t4sa3ssex2xkw3s9sh30uyfnjq4yeg38kgfex6uferudqklkssu429k2lplcvq28f966yhpcx4jzdan698fzhpv02luxdd4dd6lfux5u5j9nvz2a4zk5yd6zegztlg0rvll27tly0gzx8nqr43yv4jnmspt6j7kcsr8fsvpux9wk9lgt4h386fjmgs2jna7r2ty5fked5kzacw8ay22wq4qp8850903z200suwyjfs3gn6wg08nl3nkvfdkn68fp45dm4hl5xejejdk3d2gxkeju354mhqna34sq2dk92eau0tw8h30plcy933zw6vskst42qkhg6tav9uqzx0f6kluee45ecamgy4sc833lzv3ke6kkq9ypf5tlsndqa2vv3xssgwyhz6awjvprrpzgs9hyehtrjp7c68ecj3h250q9mcf05cnfmrpxmdcgupzelp46jq6kvggkp97pc046fjac6m2nl2s2e63f6lxumcwvey03t2npryvnwmr486m67g4ajlx9mgpvmgv27qrf5tlq7nlpe6ekvnq53rtzwxa6spxpjppc94ntselrdw8fuyx2gevazqrx5dayls52xaszkm3xe365azkxq4n3dmps3mlmk494kxgx435wklfzneu5n8gqjtfh79gkhd7h58avjjju3j4k6edqwxnj8mf3m5qv65qkv2hllshe688x23qs9ttv2fspn93lqzutlyn9gs67rqv0zj8lz274jd43vaxzqv2yaxg9kn9fewancsdmsauw4y688ywgjqj2dekehun27qt5ew6kgl6u4uauju6trpuusk3lvjdxvp8u536pcmm7vzzgelc0cj845933ehsul7e5adr0fspgl76gfet7l5xw896705gf3qymc4j3htxwhgzavzmr0umnfqdd5gaft5r5wgax0kewjguazy0kue2277gpz0hqgvpx0a0y\",\n    },\n    transfer_private_to_public: {\n        prover: KEY_STORE + \"transfer_private_to_public.prover.7ca1421\",\n        verifier: \"transfer_private_to_public.verifier.37dd126\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqq45vqqqqqqqqqr9gcqqqqqqqqqdqpszqqqqqqqq6tmqyqqqqqqqz302qqqqqqqqqqvqqqqqqqqqqqdr77uvehrw3k8a2ajgeecvtzhfs7e0jarvq699mgme43pz60ez57jm0drlc32arllag3s43xcgvqpezqaxl406uz8eedpe36rxferaxs5sz7w7kxvcj2xys26x24gu4jzjt2fq8s4cjkntp95qs28txjsqsz9a8vqsypzld5v0296aqdt33vzw6ngfacpvtu8tg0ppuvhpkmha7zvcv5v55ekn64sj4heqqsvqplcrkpncg8km3em4grmwp7dfveggayzdu39phkyfrqlxm96mrxzhpmca76f2995j7s787ulcm7epqtvr2wg8fhl7w8shyz5vh203zvmtt69w8hn0349tlx78g0enafs7vq7cfk9tmqpf734e4tzkp83s2qw7fqx4n2chh5ql7jy7dc9raxmzzqurnkctlq0ul38tr9mrw3hqrez6jt5tn74f20x4ya7aygp79sq4jh6gftu7wjrm6dmndm79ynr7vatxckar0tawsr7h08jvacd24pz5sl636vg8dhvedhc3q8ym3rcqjhs2dttxeqsp55kt5srx6qdt9v4ge7mqkptthzz3zjsg8ftd209w590ngn5xmpg606e0w3d8h9cszc7hj6swtk9xucm9vsz8kvcmcz2ny5mrv6wyy7nzjaq5rvsxsf4g9lmaa5dh8jvrhd78wynfaehcqvn7v93c6hqz7s8znzfcckgygetl7anv0a4g2x9tgey9qzvuy9zvjh0mcd3zcexa929cs65hvtz56qdwvfcevx2vfmcgwp5qm4xzny66z4xplm5ajr6hjvt55jnw8mcpf8unj3qk9z2w9xrtal9ndnru2upcju0yq3cyzqg7sejuqclc4wwu2wn7ceaxswmt5t4cekjrfg7zgxwng8pu0l988lk47zg44asr75szg6zn4k7sjqf393zr27t9e29plyn29r45l6j47765f0r9tw489tsgwqgu2\",\n    },\n    transfer_public: {\n        prover: KEY_STORE + \"transfer_public.prover.2941ad3\",\n        verifier: \"transfer_public.verifier.ed98d35\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqq9hggqqqqqqqqqtsssqqqqqqqqqk4aqqqqqqqqqpz9nqqqqqqqqqr596qqqqqqqqqqvqqqqqqqqqqqpf55jjwuf23j9etvgw8ewld2xx6u9as0za0w993q5374fklcucxaqmn8mdeyltg9w6x775d3mxcyqs9a0vw2mzta52usy60c9n3dht98pnek76sg2s7vnjvu3dpyhlyzaqxya3jjt0grk8jrc6z0xcajsrlsy74sgzfl5g2zpxv585aavv44e28q2fmhnw8gw4nyfg9trfn3d8d39yuze6rqnx70aqfqumdgzqqrad6kmnm6nrkww2l4xu0gt4t467m24hk60ra9lyd3jkzs6v8l57nmupn0dz6t0k77lutj68z4vqqruuqwuh72gc0xl9x8c6d0ufuffdfp63x82xe8r65a25qhx2d0n44ve6m4fln2m9ck8tslh3kqa3uqn6cg53l8x4yv44a00kpy5nprz0kmf5xm62xkkny4vua85fanzq6u9zsqg7mm3yq3p5s22m0xd54cq98um775vscxfnsf54gzryqkt253v0pynrllxr0cymt6w9l05trnlw7egg7f4ld8d5jdzxky82m6sq025a96ewr9vmdnyhve3724e6hdn60yrme4jagdtjxavxhtmm2zn86aq0v5t0zgdesu3m79euw3sqyqzm93v8etujswag742nc6zugwtccmtxxfllxx7vzqhygzvqk0ujgft2hhltetg2w5n73dhz9ufnqgdqmqe00eq08amtpxs5kl3c5hdutgq9zmfac4ke08frt0e09vrf0y6kdh3z3hq08d88gp7n8c22vqdr6sqyg3uxspk0x77rrr43q284nj62ll7dufxwq4hpx0qw2dgsayw9wzjngh0l00j9kah0mvx25yqmumjessw3k7j4g8esk6u33wk3344x0nfha9cu84lnp649jhdmq7rwxumel7xq6nx9syzs4tn7ncgqrvk83lza285cz6r3gf3j79n4c4pmtn42vsjj2t3f57ceha4kvupct6ss4\",\n    },\n    transfer_public_to_private: {\n        prover: KEY_STORE + \"transfer_public_to_private.prover.67f57fc\",\n        verifier: \"transfer_public_to_private.verifier.f2aaeee\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqqswsqqqqqqqqqpuaqqqqqqqqqqdm9sqqqqqqqqp2pwqyqqqqqqqrp26qqqqqqqqqqvqqqqqqqqqqqdmukmllrvx44ed40um3qe2yq58lmvajsqucq2x8egmls6x8jyeusvn6pzcph4hw25nrsr5p6g60ypayclhdergx3zx4x67unesl33fxv6xkm5tzf5k3ehdf67faut52l5u4npsq0zqlh5w2tk02jaj8hcq4z6fypqg9yh83xwh6z6xcvx3vqpu08whfuvcefk30xg5z7xu3mqleshpmzu6060aucm90jjtfgrsqau7shuwwtgghzgcaxj2ruje6y5jag6jy5nrvgxuyjdawg9t29upzv5qzz2zl6gmpmlzum58du4hqqhnrfc2uvx45c8zp5xa68pqlvhzexmucsujwuvff6f9jrxpg7jtretg9er7n0qsv34jtjjrgpqqzqq50qa7vljmn20lsfu2zc3nnzntrcr5wt880ywdykya5jv23cywlc4nyvdcqsc9wxly77falzt79cq9wuls5euc7d8thyqhnuehnjztfshr5syks9zra6yrt7hk6rvnv5d9jypehqkfhz2m0avcwksaxgqpcgw72pg7edz4fdfp4tfhynzarav9yrjm09gu2wgfcde0cq5kd4uq0znmen5jeu0wmfpden3c50rqpjjdwgyjrsnffzfjnswa7dcacz8dgk7h48q0xtz442hvalaeveyxm86e9t5f437krv5tjrenzr4vqgzm8uag6azkty05y7ngfpwzkra9ytqqhfuvp5h2eush3m4y2cxu3vc77pzc7wmesdhhhtqzhxc0qqujxpatu4p56u3hh4rnzyj7pqnqrc0s2h93vsjnj7uax633d0tk266mls44rwthp7c4y9lxy5naqvqqr8cy3hj46zgjlvkk7arh7vet60gpqz68ynrawxqacrry0k7tu3u8xtkp6xeg5jeumu4g7uaw9mcr7u9qxy9tjqma4r8awswqg9k8306f3u408z3z937pmhtu9gj68qp8h0zpz\",\n    },\n};\n\nconst PRIVATE_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n]);\nconst VALID_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n    \"transfer_public\",\n    \"public\",\n    \"transferPublic\",\n    \"transfer_public_to_private\",\n    \"publicToPrivate\",\n    \"transferPublicToPrivate\",\n]);\nconst PRIVATE_TRANSFER = new Set([\n    \"private\",\n    \"transfer_private\",\n    \"transferPrivate\",\n]);\nconst PRIVATE_TO_PUBLIC_TRANSFER = new Set([\n    \"private_to_public\",\n    \"privateToPublic\",\n    \"transfer_private_to_public\",\n    \"transferPrivateToPublic\",\n]);\nconst PUBLIC_TRANSFER = new Set([\n    \"public\",\n    \"transfer_public\",\n    \"transferPublic\",\n]);\nconst PUBLIC_TO_PRIVATE_TRANSFER = new Set([\n    \"public_to_private\",\n    \"publicToPrivate\",\n    \"transfer_public_to_private\",\n    \"transferPublicToPrivate\",\n]);\n\nfunction logAndThrow(message: string): Error {\n    console.error(message);\n    throw message;\n}\n\nimport { Account } from \"./account\";\nimport { AleoNetworkClient, ProgramImports } from \"./network-client\";\nimport { Block } from \"./models/block\";\nimport { Execution } from \"./models/execution\";\nimport { Input } from \"./models/input\";\nimport { Output } from \"./models/output\";\nimport { Transaction } from \"./models/transaction\";\nimport { Transition } from \"./models/transition\";\nimport {\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    CachedKeyPair,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    KeySearchParams,\n} from \"./function-key-provider\";\nimport {\n    BlockHeightSearch,\n    NetworkRecordProvider,\n    RecordProvider,\n    RecordSearchParams,\n} from \"./record-provider\";\n\n// @TODO: This function is no longer needed, remove it.\nasync function initializeWasm() {\n    console.warn(\"initializeWasm is deprecated, you no longer need to use it\");\n}\n\nexport { createAleoWorker } from \"./managed-worker\";\n\nexport { ProgramManager } from \"./program-manager\";\n\nexport {\n    PrivateKey,\n    ViewKey,\n    Address,\n    PrivateKeyCiphertext,\n    RecordCiphertext,\n    Signature,\n    ProvingKey,\n    VerifyingKey,\n    Program,\n    RecordPlaintext,\n    Transaction as WasmTransaction,\n    ExecutionResponse,\n    ProgramManager as ProgramManagerBase,\n    verifyFunctionExecution,\n    initThreadPool,\n} from \"@aleohq/wasm\";\n\nexport { initializeWasm };\n\nexport {\n    Account,\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    AleoNetworkClient,\n    Block,\n    BlockHeightSearch,\n    CachedKeyPair,\n    Execution,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    Input,\n    KeySearchParams,\n    NetworkRecordProvider,\n    ProgramImports,\n    Output,\n    RecordProvider,\n    RecordSearchParams,\n    Transaction,\n    Transition,\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PRIVATE_TRANSFER_TYPES,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n};\n","function spawnWorker(url, module, memory, address) {\n        return new Promise((resolve) => {\n            const worker = new Worker(url, {\n                type: \"module\",\n            });\n\n            worker.addEventListener(\"message\", (event) => {\n                // When running in Node, this allows the process to exit\n                // even though the Worker is still running.\n                if (worker.unref) {\n                    worker.unref();\n                }\n\n                resolve(worker);\n            }, {\n                capture: true,\n                once: true,\n            });\n\n            worker.postMessage({\n                module,\n                memory,\n                address,\n            });\n        });\n    }\n\nlet wasm;\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); }\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().slice(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_3.get(state.dtor)(a, state.b);\n\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_34(arg0, arg1, arg2) {\n    wasm.wasm_bindgen__convert__closures__invoke1_mut__h47e001539b710464(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachedBigInt64Memory0 = null;\n\nfunction getBigInt64Memory0() {\n    if (cachedBigInt64Memory0 === null || cachedBigInt64Memory0.buffer !== wasm.memory.buffer) {\n        cachedBigInt64Memory0 = new BigInt64Array(wasm.memory.buffer);\n    }\n    return cachedBigInt64Memory0;\n}\n/**\n* Verify an execution with a single function and a single transition. Executions with multiple\n* transitions or functions will fail to verify. Also, this does not verify that the state root of\n* the execution is included in the Aleo Network ledger.\n*\n* @param {Execution} execution The function execution to verify\n* @param {VerifyingKey} verifying_key The verifying key for the function\n* @param {Program} program The program that the function execution belongs to\n* @param {String} function_id The name of the function that was executed\n* @returns {boolean} True if the execution is valid, false otherwise\n* @param {Execution} execution\n* @param {VerifyingKey} verifying_key\n* @param {Program} program\n* @param {string} function_id\n* @returns {boolean}\n*/\nfunction verifyFunctionExecution(execution, verifying_key, program, function_id) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(execution, Execution);\n        _assertClass(verifying_key, VerifyingKey);\n        _assertClass(program, Program);\n        const ptr0 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.verifyFunctionExecution(retptr, execution.__wbg_ptr, verifying_key.__wbg_ptr, program.__wbg_ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return r0 !== 0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {number} receiver\n*/\nfunction runRayonThread(receiver) {\n    wasm.runRayonThread(receiver);\n}\n\n/**\n* @param {URL} url\n* @param {number} num_threads\n* @returns {Promise<void>}\n*/\nfunction initThreadPool(url, num_threads) {\n    const ret = wasm.initThreadPool(addHeapObject(url), num_threads);\n    return takeObject(ret);\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_194(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h02e038df64ba0b9e(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\n/**\n* Public address of an Aleo account\n*/\nclass Address {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Address.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n    * Derive an Aleo address from a private key\n    *\n    * @param {PrivateKey} private_key The private key to derive the address from\n    * @returns {Address} Address corresponding to the private key\n    * @param {PrivateKey} private_key\n    * @returns {Address}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.address_from_private_key(private_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Derive an Aleo address from a view key\n    *\n    * @param {ViewKey} view_key The view key to derive the address from\n    * @returns {Address} Address corresponding to the view key\n    * @param {ViewKey} view_key\n    * @returns {Address}\n    */\n    static from_view_key(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.address_from_view_key(view_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Create an aleo address object from a string representation of an address\n    *\n    * @param {string} address String representation of an addressm\n    * @returns {Address} Address\n    * @param {string} address\n    * @returns {Address}\n    */\n    static from_string(address) {\n        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.address_from_string(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Get a string representation of an Aleo address object\n    *\n    * @param {Address} Address\n    * @returns {string} String representation of the address\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Verify a signature for a message signed by the address\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {boolean} Boolean representing whether or not the signature is valid\n    * @param {Uint8Array} message\n    * @param {Signature} signature\n    * @returns {boolean}\n    */\n    verify(message, signature) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Signature);\n        const ret = wasm.address_verify(this.__wbg_ptr, ptr0, len0, signature.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n* A program that can be executed on the Aleo blockchain.\n*/\nclass Execution {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Execution.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_execution_free(ptr);\n    }\n    /**\n    * Returns the string representation of the execution.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.execution_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates an execution object from a string representation of an execution.\n    * @param {string} execution\n    * @returns {Execution}\n    */\n    static fromString(execution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(execution, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.execution_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Execution.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo function execution response\n*\n* This object is returned by the execution of an Aleo function off-chain. It provides methods for\n* retrieving the outputs of the function execution.\n*/\nclass ExecutionResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ExecutionResponse.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_executionresponse_free(ptr);\n    }\n    /**\n    * Get the outputs of the executed function\n    *\n    * @returns {Array} Array of strings representing the outputs of the function\n    * @returns {Array<any>}\n    */\n    getOutputs() {\n        const ret = wasm.executionresponse_getOutputs(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns the execution object if present, null if otherwise. Please note that this function\n    * removes the WebAssembly object from the response object and will return null if called a\n    * second time.\n    *\n    * @returns {Execution} The execution object if present, null if otherwise\n    * @returns {Execution | undefined}\n    */\n    getExecution() {\n        const ret = wasm.executionresponse_getExecution(this.__wbg_ptr);\n        return ret === 0 ? undefined : Execution.__wrap(ret);\n    }\n    /**\n    * Returns the program keys if present\n    * @param {string} program_id\n    * @param {string} function_name\n    * @returns {KeyPair}\n    */\n    getKeys(program_id, function_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.executionresponse_getKeys(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass KeyPair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeyPair.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keypair_free(ptr);\n    }\n    /**\n    * Create new key pair from proving and verifying keys\n    *\n    * @param {ProvingKey} proving_key Proving key corresponding to a function in an Aleo program\n    * @param {VerifyingKey} verifying_key Verifying key corresponding to a function in an Aleo program\n    * @returns {KeyPair} Key pair object containing both the function proving and verifying keys\n    * @param {ProvingKey} proving_key\n    * @param {VerifyingKey} verifying_key\n    */\n    constructor(proving_key, verifying_key) {\n        _assertClass(proving_key, ProvingKey);\n        var ptr0 = proving_key.__destroy_into_raw();\n        _assertClass(verifying_key, VerifyingKey);\n        var ptr1 = verifying_key.__destroy_into_raw();\n        const ret = wasm.keypair_new(ptr0, ptr1);\n        return KeyPair.__wrap(ret);\n    }\n    /**\n    * Get the proving key. This method will remove the proving key from the key pair\n    *\n    * @returns {ProvingKey | Error}\n    * @returns {ProvingKey}\n    */\n    provingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_provingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the verifying key. This method will remove the verifying key from the key pair\n    *\n    * @returns {VerifyingKey | Error}\n    * @returns {VerifyingKey}\n    */\n    verifyingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_verifyingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Private key of an Aleo account\n*/\nclass PrivateKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * Generate a new private key using a cryptographically secure random number generator\n    *\n    * @returns {PrivateKey}\n    */\n    constructor() {\n        const ret = wasm.privatekey_new();\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a series of unchecked bytes\n    *\n    * @param {Uint8Array} seed Unchecked 32 byte long Uint8Array acting as the seed for the private key\n    * @returns {PrivateKey}\n    * @param {Uint8Array} seed\n    * @returns {PrivateKey}\n    */\n    static from_seed_unchecked(seed) {\n        const ptr0 = passArray8ToWasm0(seed, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_from_seed_unchecked(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a string representation of a private key\n    *\n    * @param {string} seed String representation of a private key\n    * @returns {PrivateKey}\n    * @param {string} private_key\n    * @returns {PrivateKey}\n    */\n    static from_string(private_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(private_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_string(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the private key. This function should be used very carefully\n    * as it exposes the private key plaintext\n    *\n    * @returns {string} String representation of a private key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the view key corresponding to the private key\n    *\n    * @returns {ViewKey}\n    * @returns {ViewKey}\n    */\n    to_view_key() {\n        const ret = wasm.privatekey_to_view_key(this.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get the address corresponding to the private key\n    *\n    * @returns {Address}\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.address_from_private_key(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Sign a message with the private key\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {Signature} Signature generated by signing the message with the address\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    sign(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(this.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a new randomly generated private key ciphertext using a secret. The secret is sensitive\n    * and will be needed to decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext | Error} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static newEncrypted(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_newEncrypted(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt an existing private key with a secret. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext | Error} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    toCiphertext(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get private key from a private key ciphertext and secret originally used to encrypt it\n    *\n    * @param {PrivateKeyCiphertext} ciphertext Ciphertext representation of the private key\n    * @param {string} secret Secret originally used to encrypt the private key\n    * @returns {PrivateKey | Error} Private key\n    * @param {PrivateKeyCiphertext} ciphertext\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    static fromPrivateKeyCiphertext(ciphertext, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(ciphertext, PrivateKeyCiphertext);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_fromPrivateKeyCiphertext(retptr, ciphertext.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Private Key in ciphertext form\n*/\nclass PrivateKeyCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKeyCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekeyciphertext_free(ptr);\n    }\n    /**\n    * Encrypt a private key using a secret string. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {PrivateKey} private_key Private key to encrypt\n    * @param {string} secret Secret to encrypt the private key with\n    * @returns {PrivateKeyCiphertext | Error} Private key ciphertext\n    * @param {PrivateKey} private_key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static encryptPrivateKey(private_key, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, private_key.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypts a private ciphertext using a secret string. This must be the same secret used to\n    * encrypt the private key\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKey | Error} Private key\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    decryptToPrivateKey(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_decryptToPrivateKey(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the ciphertext string\n    *\n    * @returns {string} Ciphertext string\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekeyciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates a PrivateKeyCiphertext from a string\n    *\n    * @param {string} ciphertext Ciphertext string\n    * @returns {PrivateKeyCiphertext | Error} Private key ciphertext\n    * @param {string} ciphertext\n    * @returns {PrivateKeyCiphertext}\n    */\n    static fromString(ciphertext) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo program\n*\n* This object is required to create an Execution or Deployment transaction. It includes several\n* convenience methods for enumerating available functions and each functions' inputs in a\n* javascript object for usage in creation of web forms for input capture.\n*/\nclass Program {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Program.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_program_free(ptr);\n    }\n    /**\n    * Create a program from a program string\n    *\n    * @param {string} program Aleo program source code\n    * @returns {Program | Error} Program object\n    * @param {string} program\n    * @returns {Program}\n    */\n    static fromString(program) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the program\n    *\n    * @returns {string} String containing the program source code\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Determine if a function is present in the program\n    *\n    * @param {string} functionName Name of the function to check for\n    * @returns {boolean} True if the program is valid, false otherwise\n    * @param {string} function_name\n    * @returns {boolean}\n    */\n    hasFunction(function_name) {\n        const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.program_hasFunction(this.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get javascript array of functions names in the program\n    *\n    * @returns {Array} Array of all function names present in the program\n    *\n    * @example\n    * const expected_functions = [\n    *   \"mint\",\n    *   \"transfer_private\",\n    *   \"transfer_private_to_public\",\n    *   \"transfer_public\",\n    *   \"transfer_public_to_private\",\n    *   \"join\",\n    *   \"split\",\n    *   \"fee\"\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_functions = credits_program.getFunctions();\n    * console.log(credits_functions === expected_functions); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getFunctions() {\n        const ret = wasm.program_getFunctions(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get a javascript object representation of the function inputs and types. This can be used\n    * to generate a web form to capture user inputs for an execution of a function.\n    *\n    * @param {string} function_name Name of the function to get inputs for\n    * @returns {Array | Error} Array of function inputs\n    *\n    * @example\n    * const expected_inputs = [\n    *     {\n    *       type:\"record\",\n    *       visibility:\"private\",\n    *       record:\"credits\",\n    *       members:[\n    *         {\n    *           name:\"microcredits\",\n    *           type:\"u64\",\n    *           visibility:\"private\"\n    *         }\n    *       ],\n    *       register:\"r0\"\n    *     },\n    *     {\n    *       type:\"address\",\n    *       visibility:\"private\",\n    *       register:\"r1\"\n    *     },\n    *     {\n    *       type:\"u64\",\n    *       visibility:\"private\",\n    *       register:\"r2\"\n    *     }\n    * ];\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const transfer_function_inputs = credits_program.getFunctionInputs(\"transfer_private\");\n    * console.log(transfer_function_inputs === expected_inputs); // Output should be \"true\"\n    * @param {string} function_name\n    * @returns {Array<any>}\n    */\n    getFunctionInputs(function_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getFunctionInputs(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a the list of a program's mappings and the names/types of their keys and values.\n    *\n    * @returns {Array | Error} - An array of objects representing the mappings in the program\n    * @example\n    * const expected_mappings = [\n    *    {\n    *       name: \"account\",\n    *       key_name: \"owner\",\n    *       key_type: \"address\",\n    *       value_name: \"microcredits\",\n    *       value_type: \"u64\"\n    *    }\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_mappings = credits_program.getMappings();\n    * console.log(credits_mappings === expected_mappings); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getMappings() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_getMappings(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program record and its types\n    *\n    * @param {string} record_name Name of the record to get members for\n    * @returns {Object | Error} Object containing the record name, type, and members\n    *\n    * @example\n    *\n    * const expected_record = {\n    *     type: \"record\",\n    *     record: \"Credits\",\n    *     members: [\n    *       {\n    *         name: \"owner\",\n    *         type: \"address\",\n    *         visibility: \"private\"\n    *       },\n    *       {\n    *         name: \"microcredits\",\n    *         type: \"u64\",\n    *         visibility: \"private\"\n    *       }\n    *     ];\n    *  };\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_record = credits_program.getRecordMembers(\"Credits\");\n    * console.log(credits_record === expected_record); // Output should be \"true\"\n    * @param {string} record_name\n    * @returns {object}\n    */\n    getRecordMembers(record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getRecordMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program struct and its types\n    *\n    * @param {string} struct_name Name of the struct to get members for\n    * @returns {Array | Error} Array containing the struct members\n    *\n    * @example\n    *\n    * const STRUCT_PROGRAM = \"program token_issue.aleo;\n    *\n    * struct token_metadata:\n    *     network as u32;\n    *     version as u32;\n    *\n    * struct token:\n    *     token_id as u32;\n    *     metadata as token_metadata;\n    *\n    * function no_op:\n    *    input r0 as u64;\n    *    output r0 as u64;\"\n    *\n    * const expected_struct_members = [\n    *    {\n    *      name: \"token_id\",\n    *      type: \"u32\",\n    *    },\n    *    {\n    *      name: \"metadata\",\n    *      type: \"struct\",\n    *      struct_id: \"token_metadata\",\n    *      members: [\n    *       {\n    *         name: \"network\",\n    *         type: \"u32\",\n    *       }\n    *       {\n    *         name: \"version\",\n    *         type: \"u32\",\n    *       }\n    *     ]\n    *   }\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(STRUCT_PROGRAM);\n    * const struct_members = program.getStructMembers(\"token\");\n    * console.log(struct_members === expected_struct_members); // Output should be \"true\"\n    * @param {string} struct_name\n    * @returns {Array<any>}\n    */\n    getStructMembers(struct_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(struct_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getStructMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the credits.aleo program\n    *\n    * @returns {Program} The credits.aleo program\n    * @returns {Program}\n    */\n    static getCreditsProgram() {\n        const ret = wasm.program_getCreditsProgram();\n        return Program.__wrap(ret);\n    }\n    /**\n    * Get the id of the program\n    *\n    * @returns {string} The id of the program\n    * @returns {string}\n    */\n    id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_id(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Determine equality with another program\n    *\n    * @param {Program} other The other program to compare\n    * @returns {boolean} True if the programs are equal, false otherwise\n    * @param {Program} other\n    * @returns {boolean}\n    */\n    isEqual(other) {\n        _assertClass(other, Program);\n        const ret = wasm.program_isEqual(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get program_imports\n    *\n    * @returns {Array} The program imports\n    *\n    * @example\n    *\n    * const DOUBLE_TEST = \"import multiply_test.aleo;\n    *\n    * program double_test.aleo;\n    *\n    * function double_it:\n    *     input r0 as u32.private;\n    *     call multiply_test.aleo/multiply 2u32 r0 into r1;\n    *     output r1 as u32.private;\";\n    *\n    * const expected_imports = [\n    *    \"multiply_test.aleo\"\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(DOUBLE_TEST_PROGRAM);\n    * const imports = program.getImports();\n    * console.log(imports === expected_imports); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getImports() {\n        const ret = wasm.program_getImports(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n/**\n*/\nclass ProgramManager {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_programmanager_free(ptr);\n    }\n    /**\n    * Deploy an Aleo program\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being deployed\n    * @param imports A javascript object holding the source code of any imported programs in the\n    * form \\{\"program_name1\": \"program_source_code\", \"program_name2\": \"program_source_code\", ..\\}.\n    * Note that all imported programs must be deployed on chain before the main program in order\n    * for the deployment to succeed\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the program deployment in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} fee_record\n    * @param {string} url\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    static buildDeploymentTransaction(private_key, program, fee_credits, fee_record, url, imports, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        let ptr1 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr1 = fee_record.__destroy_into_raw();\n        }\n        const ptr2 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr3 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr4 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildDeploymentTransaction(private_key.__wbg_ptr, ptr0, len0, fee_credits, ptr1, ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the fee for a program deployment\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The source code of the program being deployed\n    * @param imports (optional) Provide a list of imports to use for the deployment fee estimation\n    * in the form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @returns {u64 | Error}\n    * @param {string} program\n    * @param {object | undefined} imports\n    * @returns {Promise<bigint>}\n    */\n    static estimateDeploymentFee(program, imports) {\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_estimateDeploymentFee(ptr0, len0, isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the component of the deployment cost which comes from the fee for the program name.\n    * Note that this cost does not represent the entire cost of deployment. It is additional to\n    * the cost of the size (in bytes) of the deployment.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param name The name of the program to be deployed\n    * @returns {u64 | Error}\n    * @param {string} name\n    * @returns {bigint}\n    */\n    static estimateProgramNameCost(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateProgramNameCost(retptr, ptr0, len0);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Execute an arbitrary function locally\n    *\n    * @param {PrivateKey} private_key The private key of the sender\n    * @param {string} program The source code of the program being executed\n    * @param {string} function The name of the function to execute\n    * @param {Array} inputs A javascript array of inputs to the function\n    * @param {boolean} prove_execution If true, the execution will be proven and an execution object\n    * containing the proof and the encrypted inputs and outputs needed to verify the proof offline\n    * will be returned.\n    * @param {boolean} cache Cache the proving and verifying keys in the Execution response.\n    * If this is set to 'true' the keys synthesized will be stored in the Execution Response\n    * and the `ProvingKey` and `VerifyingKey` can be retrieved from the response via the `.getKeys()`\n    * method.\n    * @param {Object | undefined} imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param {ProvingKey | undefined} proving_key (optional) Provide a verifying key to use for the function execution\n    * @param {VerifyingKey | undefined} verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {boolean} prove_execution\n    * @param {boolean} cache\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @returns {Promise<ExecutionResponse>}\n    */\n    static executeFunctionOffline(private_key, program, _function, inputs, prove_execution, cache, imports, proving_key, verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr2 = proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr3 = verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_executeFunctionOffline(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), prove_execution, cache, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr2, ptr3);\n        return takeObject(ret);\n    }\n    /**\n    * Execute Aleo function and create an Aleo execution transaction\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being executed\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * If this is set to 'true' the keys synthesized (or passed in as optional parameters via the\n    * `proving_key` and `verifying_key` arguments) will be stored in the ProgramManager's memory\n    * and used for subsequent transactions. If this is set to 'false' the proving and verifying\n    * keys will be deallocated from memory after the transaction is executed.\n    * @param imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the function execution\n    * @param verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} fee_record\n    * @param {string} url\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    static buildExecutionTransaction(private_key, program, _function, inputs, fee_credits, fee_record, url, imports, proving_key, verifying_key, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        const ptr3 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr4 = proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr5 = verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildExecutionTransaction(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), fee_credits, ptr2, ptr3, len3, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr4, ptr5, ptr6, ptr7);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate Fee for Aleo function execution. Note if \"cache\" is set to true, the proving and\n    * verifying keys will be stored in the ProgramManager's memory and used for subsequent\n    * program executions.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program to estimate the execution fee for\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the fee estimation in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the fee estimation\n    * @param verifying_key (optional) Provide a verifying key to use for the fee estimation\n    * @returns {u64 | Error} Fee in microcredits\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {string} url\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @returns {Promise<bigint>}\n    */\n    static estimateExecutionFee(private_key, program, _function, inputs, url, imports, proving_key, verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr3 = proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr4 = verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_estimateExecutionFee(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the finalize fee component for executing a function. This fee is additional to the\n    * size of the execution of the program in bytes. If the function does not have a finalize\n    * step, then the finalize fee is 0.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The program containing the function to estimate the finalize fee for\n    * @param function The function to estimate the finalize fee for\n    * @returns {u64 | Error} Fee in microcredits\n    * @param {string} program\n    * @param {string} _function\n    * @returns {bigint}\n    */\n    static estimateFinalizeFee(program, _function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateFinalizeFee(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Join two records together to create a new record with an amount of credits equal to the sum\n    * of the credits of the two original records\n    *\n    * @param private_key The private key of the sender\n    * @param record_1 The first record to combine\n    * @param record_2 The second record to combine\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param join_proving_key (optional) Provide a proving key to use for the join function\n    * @param join_verifying_key (optional) Provide a verifying key to use for the join function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {RecordPlaintext} record_1\n    * @param {RecordPlaintext} record_2\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} fee_record\n    * @param {string} url\n    * @param {ProvingKey | undefined} join_proving_key\n    * @param {VerifyingKey | undefined} join_verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    static buildJoinTransaction(private_key, record_1, record_2, fee_credits, fee_record, url, join_proving_key, join_verifying_key, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(record_1, RecordPlaintext);\n        var ptr0 = record_1.__destroy_into_raw();\n        _assertClass(record_2, RecordPlaintext);\n        var ptr1 = record_2.__destroy_into_raw();\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        const ptr3 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(join_proving_key)) {\n            _assertClass(join_proving_key, ProvingKey);\n            ptr4 = join_proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(join_verifying_key)) {\n            _assertClass(join_verifying_key, VerifyingKey);\n            ptr5 = join_verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildJoinTransaction(private_key.__wbg_ptr, ptr0, ptr1, fee_credits, ptr2, ptr3, len3, ptr4, ptr5, ptr6, ptr7);\n        return takeObject(ret);\n    }\n    /**\n    * Split an Aleo credits record into two separate records. This function does not require a fee.\n    *\n    * @param private_key The private key of the sender\n    * @param split_amount The amount of the credit split. This amount will be subtracted from the\n    * value of the record and two new records will be created with the split amount and the remainder\n    * @param amount_record The record to split\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param split_proving_key (optional) Provide a proving key to use for the split function\n    * @param split_verifying_key (optional) Provide a verifying key to use for the split function\n    * @returns {Transaction | Error} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {number} split_amount\n    * @param {RecordPlaintext} amount_record\n    * @param {string} url\n    * @param {ProvingKey | undefined} split_proving_key\n    * @param {VerifyingKey | undefined} split_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    static buildSplitTransaction(private_key, split_amount, amount_record, url, split_proving_key, split_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(amount_record, RecordPlaintext);\n        var ptr0 = amount_record.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(split_proving_key)) {\n            _assertClass(split_proving_key, ProvingKey);\n            ptr2 = split_proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(split_verifying_key)) {\n            _assertClass(split_verifying_key, VerifyingKey);\n            ptr3 = split_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildSplitTransaction(private_key.__wbg_ptr, split_amount, ptr0, ptr1, len1, ptr2, ptr3);\n        return takeObject(ret);\n    }\n    /**\n    * Send credits from one Aleo account to another\n    *\n    * @param private_key The private key of the sender\n    * @param amount_credits The amount of credits to send\n    * @param recipient The recipient of the transaction\n    * @param transfer_type The type of the transfer (options: \"private\", \"public\", \"private_to_public\", \"public_to_private\")\n    * @param amount_record The record to fund the amount from\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param transfer_verifying_key (optional) Provide a verifying key to use for the transfer\n    * function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {number} amount_credits\n    * @param {string} recipient\n    * @param {string} transfer_type\n    * @param {RecordPlaintext | undefined} amount_record\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} fee_record\n    * @param {string} url\n    * @param {ProvingKey | undefined} transfer_proving_key\n    * @param {VerifyingKey | undefined} transfer_verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    static buildTransferTransaction(private_key, amount_credits, recipient, transfer_type, amount_record, fee_credits, fee_record, url, transfer_proving_key, transfer_verifying_key, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(transfer_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(amount_record)) {\n            _assertClass(amount_record, RecordPlaintext);\n            ptr2 = amount_record.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr3 = fee_record.__destroy_into_raw();\n        }\n        const ptr4 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(transfer_proving_key)) {\n            _assertClass(transfer_proving_key, ProvingKey);\n            ptr5 = transfer_proving_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(transfer_verifying_key)) {\n            _assertClass(transfer_verifying_key, VerifyingKey);\n            ptr6 = transfer_verifying_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr7 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr8 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildTransferTransaction(private_key.__wbg_ptr, amount_credits, ptr0, len0, ptr1, len1, ptr2, fee_credits, ptr3, ptr4, len4, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Synthesize proving and verifying keys for a program\n    *\n    * @param program {string} The program source code of the program to synthesize keys for\n    * @param function_id {string} The function to synthesize keys for\n    * @param inputs {Array} The inputs to the function\n    * @param imports {Object | undefined} The imports for the program\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} function_id\n    * @param {Array<any>} inputs\n    * @param {object | undefined} imports\n    * @returns {Promise<KeyPair>}\n    */\n    static synthesizeKeyPair(private_key, program, function_id, inputs, imports) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_synthesizeKeyPair(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n}\n/**\n* Proving key for a function within an Aleo program\n*/\nclass ProvingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ProvingKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_provingkey_free(ptr);\n    }\n    /**\n    * Construct a new proving key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte array representation of a proving key\n    * @returns {ProvingKey | Error}\n    * @param {Uint8Array} bytes\n    * @returns {ProvingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the byte representation of a proving key\n    *\n    * @returns {Uint8Array | Error} Byte array representation of a proving key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a copy of the proving key\n    *\n    * @returns {ProvingKey} A copy of the proving key\n    * @returns {ProvingKey}\n    */\n    copy() {\n        const ret = wasm.provingkey_copy(this.__wbg_ptr);\n        return ProvingKey.__wrap(ret);\n    }\n}\n/**\n* Encrypted Aleo record\n*/\nclass RecordCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordciphertext_free(ptr);\n    }\n    /**\n    * Create a record ciphertext from a string\n    *\n    * @param {string} record String representation of a record ciphertext\n    * @returns {RecordCiphertext | Error} Record ciphertext\n    * @param {string} record\n    * @returns {RecordCiphertext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the string reprensentation of the record ciphertext\n    *\n    * @returns {string} String representation of the record ciphertext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Decrypt the record ciphertext into plaintext using the view key. The record will only\n    * decrypt if the record was encrypted by the account corresponding to the view key\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {RecordPlaintext | Error} Record plaintext object\n    * @param {ViewKey} view_key\n    * @returns {RecordPlaintext}\n    */\n    decrypt(view_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(view_key, ViewKey);\n            wasm.recordciphertext_decrypt(retptr, this.__wbg_ptr, view_key.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Determines if the account corresponding to the view key is the owner of the record\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {boolean}\n    * @param {ViewKey} view_key\n    * @returns {boolean}\n    */\n    isOwner(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.recordciphertext_isOwner(this.__wbg_ptr, view_key.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n* Plaintext representation of an Aleo record\n*/\nclass RecordPlaintext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordPlaintext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordplaintext_free(ptr);\n    }\n    /**\n    * Return a record plaintext from a string.\n    *\n    * @param {string} record String representation of a plaintext representation of an Aleo record\n    * @returns {RecordPlaintext | Error} Record plaintext\n    * @param {string} record\n    * @returns {RecordPlaintext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the record plaintext string\n    *\n    * @returns {string} String representation of the record plaintext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the amount of microcredits in the record\n    *\n    * @returns {u64} Amount of microcredits in the record\n    * @returns {bigint}\n    */\n    microcredits() {\n        const ret = wasm.recordplaintext_microcredits(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Returns the nonce of the record. This can be used to uniquely identify a record.\n    *\n    * @returns {string} Nonce of the record\n    * @returns {string}\n    */\n    nonce() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_nonce(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Attempt to get the serial number of a record to determine whether or not is has been spent\n    *\n    * @param {PrivateKey} private_key Private key of the account that owns the record\n    * @param {string} program_id Program ID of the program that the record is associated with\n    * @param {string} record_name Name of the record\n    * @returns {string | Error} Serial number of the record\n    * @param {PrivateKey} private_key\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {string}\n    */\n    serialNumberString(private_key, program_id, record_name) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_serialNumberString(retptr, this.__wbg_ptr, private_key.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr3 = r0;\n            var len3 = r1;\n            if (r3) {\n                ptr3 = 0; len3 = 0;\n                throw takeObject(r2);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n}\n/**\n* Cryptographic signature of a message signed by an Aleo account\n*/\nclass Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr);\n    }\n    /**\n    * Sign a message with a private key\n    *\n    * @param {PrivateKey} private_key The private key to sign the message with\n    * @param {Uint8Array} message Byte representation of the message to sign\n    * @returns {Signature} Signature of the message\n    * @param {PrivateKey} private_key\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    static sign(private_key, message) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(private_key.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Verify a signature of a message with an address\n    *\n    * @param {Address} address The address to verify the signature with\n    * @param {Uint8Array} message Byte representation of the message to verify\n    * @returns {boolean} True if the signature is valid, false otherwise\n    * @param {Address} address\n    * @param {Uint8Array} message\n    * @returns {boolean}\n    */\n    verify(address, message) {\n        _assertClass(address, Address);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_verify(this.__wbg_ptr, address.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get a signature from a string representation of a signature\n    *\n    * @param {string} signature String representation of a signature\n    * @returns {Signature} Signature\n    * @param {string} signature\n    * @returns {Signature}\n    */\n    static from_string(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_from_string(ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a signature\n    *\n    * @returns {string} String representation of a signature\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo transaction\n*\n* This object is created when generating an on-chain function deployment or execution and is the\n* object that should be submitted to the Aleo Network in order to deploy or execute a function.\n*/\nclass Transaction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Transaction.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n    * Create a transaction from a string\n    *\n    * @param {string} transaction String representation of a transaction\n    * @returns {Transaction | Error}\n    * @param {string} transaction\n    * @returns {Transaction}\n    */\n    static fromString(transaction) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(transaction, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transaction_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the transaction as a string. If you want to submit this transaction to the Aleo Network\n    * this function will create the string that should be submitted in the `POST` data.\n    *\n    * @returns {string} String representation of the transaction\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the id of the transaction. This is the merkle root of the transaction's inclusion proof.\n    *\n    * This value can be used to query the status of the transaction on the Aleo Network to see\n    * if it was successful. If successful, the transaction will be included in a block and this\n    * value can be used to lookup the transaction data on-chain.\n    *\n    * @returns {string} Transaction id\n    * @returns {string}\n    */\n    transactionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the type of the transaction (will return \"deploy\" or \"execute\")\n    *\n    * @returns {string} Transaction type\n    * @returns {string}\n    */\n    transactionType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionType(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n/**\n* Verifying key for a function within an Aleo program\n*/\nclass VerifyingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerifyingKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verifyingkey_free(ptr);\n    }\n    /**\n    * Construct a new verifying key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte representation of a verifying key\n    * @returns {VerifyingKey | Error}\n    * @param {Uint8Array} bytes\n    * @returns {VerifyingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a byte array from a verifying key\n    *\n    * @returns {Uint8Array | Error} Byte representation of a verifying key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a verifying key from string\n    *\n    * @param {String} string String representation of a verifying key\n    * @returns {VerifyingKey | Error}\n    * @param {string} string\n    * @returns {VerifyingKey}\n    */\n    static fromString(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the verifying key\n    *\n    * @returns {String} String representation of the verifying key\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a copy of the verifying key\n    *\n    * @returns {VerifyingKey} A copy of the verifying key\n    * @returns {VerifyingKey}\n    */\n    copy() {\n        const ret = wasm.provingkey_copy(this.__wbg_ptr);\n        return VerifyingKey.__wrap(ret);\n    }\n}\n/**\n*/\nclass ViewKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ViewKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_viewkey_free(ptr);\n    }\n    /**\n    * Create a new view key from a private key\n    *\n    * @param {PrivateKey} private_key Private key\n    * @returns {ViewKey} View key\n    * @param {PrivateKey} private_key\n    * @returns {ViewKey}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.privatekey_to_view_key(private_key.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Create a new view key from a string representation of a view key\n    *\n    * @param {string} view_key String representation of a view key\n    * @returns {ViewKey} View key\n    * @param {string} view_key\n    * @returns {ViewKey}\n    */\n    static from_string(view_key) {\n        const ptr0 = passStringToWasm0(view_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.viewkey_from_string(ptr0, len0);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a view key\n    *\n    * @returns {string} String representation of a view key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.viewkey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the address corresponding to a view key\n    *\n    * @returns {Address} Address\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.address_from_view_key(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Decrypt a record ciphertext with a view key\n    *\n    * @param {string} ciphertext String representation of a record ciphertext\n    * @returns {string} String representation of a record plaintext\n    * @param {string} ciphertext\n    * @returns {string}\n    */\n    decrypt(ciphertext) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.viewkey_decrypt(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_new_daafff584c71593b = function() { return handleError(function () {\n        const ret = new XMLHttpRequest();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_overrideMimeType_1a661d17da5f8baf = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).overrideMimeType(getStringFromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_open_56fa1eb95989f6a5 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4, arg5) {\n        getObject(arg0).open(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4), arg5 !== 0);\n    }, arguments) };\n    imports.wbg.__wbg_send_9f5007eae908c72e = function() { return handleError(function (arg0) {\n        getObject(arg0).send();\n    }, arguments) };\n    imports.wbg.__wbg_response_f2acf2ecbe021710 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).response;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_b51585de1b234aff = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_092e06b0f9d71865 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_new_1eead62f64ca15ce = function() { return handleError(function () {\n        const ret = new Headers();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_append_fda9e3432e3e88da = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_new_55c9955722952374 = function() { return handleError(function () {\n        const ret = new AbortController();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_signal_4bd18fb489af2d4c = function(arg0) {\n        const ret = getObject(arg0).signal;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_instanceof_Response_fc4327dbfcdf5ced = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Response;\n        } catch {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_status_ac85a3142a84caa2 = function(arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    };\n    imports.wbg.__wbg_url_8503de97f69da463 = function(arg0, arg1) {\n        const ret = getObject(arg1).url;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_headers_b70de86b8e989bc0 = function(arg0) {\n        const ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_iterator_97f0c81209c6c35a = function() {\n        const ret = Symbol.iterator;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_get_97b561fb56f034b5 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbg_call_cb65541d95d71282 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_next_526fc47e980da008 = function(arg0) {\n        const ret = getObject(arg0).next;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_ddb3312ca1c4e32a = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).next();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_done_5c1f01fb660d73b5 = function(arg0) {\n        const ret = getObject(arg0).done;\n        return ret;\n    };\n    imports.wbg.__wbg_value_1695675138684bd5 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_abort_654b796176d117aa = function(arg0) {\n        getObject(arg0).abort();\n    };\n    imports.wbg.__wbg_stringify_e25465938f3f611f = function() { return handleError(function (arg0) {\n        const ret = JSON.stringify(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_module = function() {\n        const ret = __wbg_init.__wbindgen_wasm_module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_spawnWorker_8ab39e70e73d7518 = function(arg0, arg1, arg2, arg3) {\n        const ret = spawnWorker(getObject(arg0), getObject(arg1), getObject(arg2), arg3);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_01734de55d61e11d = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_bigint_from_u64 = function(arg0) {\n        const ret = BigInt.asUintN(64, arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_executionresponse_new = function(arg0) {\n        const ret = ExecutionResponse.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_transaction_new = function(arg0) {\n        const ret = Transaction.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_log_86eec937c8576a5b = function(arg0, arg1) {\n        console.log(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbg_newwithlength_3ec098a360da1909 = function(arg0) {\n        const ret = new Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_502d29070ea18557 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbg_keypair_new = function(arg0) {\n        const ret = KeyPair.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_arrayBuffer_288fb3538806e85c = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).arrayBuffer();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_8125e318e6245eed = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_72e2208bbc0efc61 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_new_43f1b47c28813cbd = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_194(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return addHeapObject(ret);\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbg_new_898a68150f225f2e = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_push_ca1c26067ef907ac = function(arg0, arg1) {\n        const ret = getObject(arg0).push(getObject(arg1));\n        return ret;\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_abda76e883ba8a5f = function() {\n        const ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_658279fe44541cf6 = function(arg0, arg1) {\n        const ret = getObject(arg1).stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_error_f851667af71bcfc6 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_subarray_13db269f57aa838d = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_37fa2ca9e4e07fab = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_buffer_085ec1f694018c4f = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_5cf90238115182c3 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_6da8e527659b86aa = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_randomFillSync_dc1e9a60c158336d = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).randomFillSync(takeObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_crypto_c48a774b022d20ac = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_process_298734cf255a885d = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_e2e78e134e3e5d01 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_1cd7a5d853dbea79 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbg_msCrypto_bcb970640f50a1e8 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_e5d69174d6984cd7 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_8f08ceecec0f4fee = function() { return handleError(function () {\n        const ret = module.require;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_length_fff51ee6522a1a18 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_get_44be0491f933a435 = function(arg0, arg1) {\n        const ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_1ff1d729e9aae938 = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_5f4faef6c12b79ec = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_1d39714405582d3c = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_651f05c6a0944d1c = function() { return handleError(function () {\n        const ret = global.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_581967eacc0e2604 = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_has_c5fcd020291e56b8 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.has(getObject(arg0), getObject(arg1));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_fetch_8eaf01857a5bb21f = function(arg0, arg1) {\n        const ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_fetch_b5d6bebed1e6c2d2 = function(arg0) {\n        const ret = fetch(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function(arg0) {\n        throw takeObject(arg0);\n    };\n    imports.wbg.__wbg_then_b2267541e2a73865 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_f7e06ee3c11698eb = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_resolve_53698b95aaf7fcf8 = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_60fb5e2e86467e31 = function() {\n        const ret = Atomics.waitAsync;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_a0af68041688e8fd = function(arg0) {\n        const ret = new Int32Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_73fd6eb3bace0a8d = function(arg0, arg1, arg2) {\n        const ret = Atomics.waitAsync(getObject(arg0), arg1, arg2);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_async_e1a2a669aacf35ff = function(arg0) {\n        const ret = getObject(arg0).async;\n        return ret;\n    };\n    imports.wbg.__wbg_value_555e4f564193db05 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_link_22046963fe0b707a = function(arg0) {\n        const ret = \"data:application/javascript,\" + encodeURIComponent(`onmessage = function (ev) {\n            let [ia, index, value] = ev.data;\n            ia = new Int32Array(ia.buffer);\n            let result = Atomics.wait(ia, index, value);\n            postMessage(result);\n        };\n        `);\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_new_8e7322f46d5d019c = function() { return handleError(function (arg0, arg1) {\n        const ret = new Worker(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setonmessage_f0bd0280573b7084 = function(arg0, arg1) {\n        getObject(arg0).onmessage = getObject(arg1);\n    };\n    imports.wbg.__wbg_of_3f69007bb4eeae65 = function(arg0, arg1, arg2) {\n        const ret = Array.of(getObject(arg0), getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_postMessage_8c609e2bde333d9c = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).postMessage(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_data_ab99ae4a2e1e8bc9 = function(arg0) {\n        const ret = getObject(arg0).data;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithstrandinit_cad5cd6038c7ff5d = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_status_114ef6fe27fb8b00 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_responseText_da275667251fd153 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg1).responseText;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    }, arguments) };\n    imports.wbg.__wbindgen_closure_wrapper5451 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 530, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper5474 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 530, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n    imports.wbg.memory = maybe_memory || new WebAssembly.Memory({initial:168,maximum:65536,shared:true});\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedBigInt64Memory0 = null;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nvar exports = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Address: Address,\n    Execution: Execution,\n    ExecutionResponse: ExecutionResponse,\n    KeyPair: KeyPair,\n    PrivateKey: PrivateKey,\n    PrivateKeyCiphertext: PrivateKeyCiphertext,\n    Program: Program,\n    ProgramManager: ProgramManager,\n    ProvingKey: ProvingKey,\n    RecordCiphertext: RecordCiphertext,\n    RecordPlaintext: RecordPlaintext,\n    Signature: Signature,\n    Transaction: Transaction,\n    VerifyingKey: VerifyingKey,\n    ViewKey: ViewKey,\n    default: __wbg_init,\n    initSync: initSync,\n    initThreadPool: initThreadPool,\n    runRayonThread: runRayonThread,\n    verifyFunctionExecution: verifyFunctionExecution\n});\n\nconst wasm_path = \"assets/aleo_wasm.wasm\";\n\n            \n            var Cargo = async (opt = {}) => {\n                let {importHook, serverPath, initializeHook} = opt;\n\n                let final_path = wasm_path;\n\n                if (serverPath != null) {\n                    final_path = serverPath + /[^\\/\\\\]*$/.exec(final_path)[0];\n                }\n\n                if (importHook != null) {\n                    final_path = importHook(final_path);\n                }\n\n                if (initializeHook != null) {\n                    await initializeHook(__wbg_init, final_path);\n\n                } else {\n                    await __wbg_init(final_path);\n                }\n\n                return exports;\n            };\n\nexport { Cargo as default };\n//# sourceMappingURL=wasm.js.map\n","import wasm from \"../dist/wasm.js\";\n\nconst {\n    initThreadPool: wasmInitThreadPool,\n    Address,\n    ExecutionResponse,\n    Private,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    ProgramManager,\n    Signature,\n    Transaction,\n    ViewKey,\n    VerifyingKey,\n    verifyFunctionExecution,\n} = await wasm({\n    importHook: () => {\n        return new URL(\"assets/aleo_wasm.wasm\", import.meta.url);\n    },\n});\n\nasync function initThreadPool(threads) {\n    if (threads == null) {\n        threads = navigator.hardwareConcurrency;\n    }\n\n    console.info(`Spawning ${threads} threads`);\n\n    await wasmInitThreadPool(new URL(\"worker.js\", import.meta.url), threads);\n}\n\nexport {\n    initThreadPool,\n    Address,\n    ExecutionResponse,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    ProgramManager,\n    Signature,\n    Transaction,\n    ViewKey,\n    VerifyingKey,\n    verifyFunctionExecution,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    return createProxy(ep, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        ep.addEventListener(\"message\", function l(ev) {\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\n                return;\n            }\n            ep.removeEventListener(\"message\", l);\n            resolve(ev.data);\n        });\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n"],"names":["Account","_privateKey","_viewKey","_address","constructor","params","this","privateKeyFromParams","e","console","error","Error","ViewKey","from_private_key","Address","fromCiphertext","ciphertext","password","PrivateKeyCiphertext","fromString","PrivateKey","fromPrivateKeyCiphertext","privateKey","to_string","seed","from_seed_unchecked","from_string","viewKey","address","toString","encryptAccount","toCiphertext","decryptRecord","decrypt","decryptRecords","ciphertexts","map","ownsRecordCiphertext","isOwner","RecordCiphertext","sign","message","verify","signature","async","get","url","response","fetch","ok","status","post","options","method","AleoNetworkClient","host","account","setAccount","getAccount","setHost","fetchData","json","findUnspentRecords","startHeight","endHeight","amounts","maxMicrocredits","nonces","records","Array","start","end","resolvedPrivateKey","latestHeight","failures","totalRecordValue","BigInt","to_view_key","blockHeight","getLatestHeight","blocks","getBlockRange","i","length","transactions","j","confirmedTransaction","type","transaction","execution","transitions","k","transition","program","outputs","l","output","record","value","recordPlaintext","nonce","includes","serialNumber","serialNumberString","getTransitionId","push","microcredits","amounts_found","warn","getBlock","height","getLatestBlock","getLatestHash","getProgram","programId","getProgramObject","inputProgram","Program","getProgramImports","imports","importList","getImports","import_id","hasOwnProperty","programSource","nestedImports","key","logAndThrow","getProgramImportNames","getProgramMappingNames","getProgramMappingValue","mappingName","getStateRoot","getTransaction","id","getTransactions","getTransactionsInMempool","transition_id","submitTransaction","transaction_string","Transaction","body","headers","AleoKeyProviderParams","proverUri","verifierUri","cacheKey","AleoKeyProvider","cache","cacheOption","keyUris","fetchBytes","data","arrayBuffer","Uint8Array","KEY_STORE","Map","useCache","clearCache","clear","cacheKeys","keyId","keys","provingKey","verifyingKey","set","toBytes","containsKeys","has","deleteKeys","delete","getKeys","debug","provingKeyBytes","verifyingKeyBytes","ProvingKey","fromBytes","VerifyingKey","functionKeys","proverUrl","verifierUrl","fetchKeys","getVerifyingKey","transferKeys","visibility","PRIVATE_TRANSFER","CREDITS_PROGRAM_KEYS","transfer_private","prover","verifier","PRIVATE_TO_PUBLIC_TRANSFER","transfer_private_to_public","PUBLIC_TRANSFER","transfer_public","PUBLIC_TO_PRIVATE_TRANSFER","transfer_public_to_private","joinKeys","join","splitKeys","split","feePrivateKeys","fee_private","feePublicKeys","fee_public","inclusion","NetworkRecordProvider","networkClient","findCreditsRecords","unspent","searchParameters","undefined","findCreditsRecord","findRecord","findRecords","BlockHeightSearch","singletonWorker","createAleoWorker","worker","Worker","URL","wrap","ProgramManager","keyProvider","recordProvider","setKeyProvider","setRecordProvider","deploy","fee","privateFee","recordSearchParams","feeRecord","programObject","log","feeKeys","deploymentPrivateKey","getCreditsRecord","feeProvingKey","feeVerifyingKey","tx","ProgramManager$1","buildDeploymentTransaction","execute","programName","functionName","inputs","keySearchParams","executionPrivateKey","buildExecutionTransaction","executeOffline","function_name","proveExecution","executeFunctionOffline","recordOne","recordTwo","joinProvingKey","joinVerifyingKey","RecordPlaintext","buildJoinTransaction","splitAmount","amountRecord","splitProvingKey","splitVerifyingKey","buildSplitTransaction","synthesizeKeys","function_id","keyPair","synthesizeKeyPair","transfer","amount","recipient","transferType","validateTransferType","transferProvingKey","transferVerifyingKey","requiresAmountRecord","buildTransferTransaction","createProgramFromSource","creditsProgram","getCreditsProgram","verifyProgram","PRIVATE_TRANSFER_TYPES","VALID_TRANSFER_TYPES","Set","initializeWasm","spawnWorker","module","memory","Promise","resolve","addEventListener","event","unref","capture","once","postMessage","wasm","heap","fill","getObject","idx","heap_next","dropObject","takeObject","ret","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachedUint8Memory0","getUint8Memory0","buffer","getStringFromWasm0","ptr","len","slice","addHeapObject","obj","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encode","encodeString","arg","view","buf","read","written","passStringToWasm0","malloc","realloc","subarray","mem","offset","code","charCodeAt","isLikeNone","x","cachedInt32Memory0","getInt32Memory0","Int32Array","debugString","val","description","name","isArray","builtInMatches","exec","call","className","JSON","stringify","_","stack","makeMutClosure","arg0","arg1","dtor","f","state","a","b","cnt","real","args","__wbindgen_export_3","original","__wbg_adapter_34","arg2","wasm_bindgen__convert__closures__invoke1_mut__h47e001539b710464","_assertClass","instance","klass","passArray8ToWasm0","cachedBigInt64Memory0","getBigInt64Memory0","BigInt64Array","verifyFunctionExecution$1","verifying_key","retptr","__wbindgen_add_to_stack_pointer","Execution","VerifyingKey$1","Program$1","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","verifyFunctionExecution","__wbg_ptr","r0","r1","getArrayU8FromWasm0","runRayonThread","receiver","initThreadPool$1","num_threads","initThreadPool","handleError","apply","__wbindgen_exn_store","__wbg_adapter_194","arg3","wasm_bindgen__convert__closures__invoke2_mut__h02e038df64ba0b9e","__wrap","Object","create","prototype","__destroy_into_raw","free","__wbg_address_free","private_key","PrivateKey$1","address_from_private_key","from_view_key","view_key","ViewKey$1","address_from_view_key","address_from_string","deferred1_0","deferred1_1","address_to_string","__wbindgen_free","Signature$1","address_verify","__wbg_execution_free","execution_toString","execution_fromString","ExecutionResponse","__wbg_executionresponse_free","getOutputs","executionresponse_getOutputs","getExecution","executionresponse_getExecution","program_id","ptr1","len1","executionresponse_getKeys","KeyPair","__wbg_keypair_free","proving_key","ProvingKey$1","keypair_new","keypair_provingKey","keypair_verifyingKey","__wbg_privatekey_free","privatekey_new","privatekey_from_seed_unchecked","privatekey_from_string","privatekey_to_string","privatekey_to_view_key","to_address","Address$1","privatekey_sign","newEncrypted","secret","privatekey_newEncrypted","PrivateKeyCiphertext$1","privatekey_toCiphertext","privatekey_fromPrivateKeyCiphertext","__wbg_privatekeyciphertext_free","encryptPrivateKey","decryptToPrivateKey","privatekeyciphertext_decryptToPrivateKey","privatekeyciphertext_toString","privatekeyciphertext_fromString","__wbg_program_free","program_fromString","program_toString","hasFunction","program_hasFunction","getFunctions","program_getFunctions","getFunctionInputs","program_getFunctionInputs","getMappings","program_getMappings","getRecordMembers","record_name","program_getRecordMembers","getStructMembers","struct_name","program_getStructMembers","program_getCreditsProgram","isEqual","other","program_isEqual","program_getImports","__wbg_programmanager_free","fee_credits","fee_record","fee_proving_key","fee_verifying_key","RecordPlaintext$1","ptr2","len2","ptr3","ptr4","programmanager_buildDeploymentTransaction","estimateDeploymentFee","programmanager_estimateDeploymentFee","estimateProgramNameCost","programmanager_estimateProgramNameCost","r2","asUintN","_function","prove_execution","programmanager_executeFunctionOffline","len3","ptr5","ptr6","ptr7","programmanager_buildExecutionTransaction","estimateExecutionFee","programmanager_estimateExecutionFee","estimateFinalizeFee","programmanager_estimateFinalizeFee","record_1","record_2","join_proving_key","join_verifying_key","programmanager_buildJoinTransaction","split_amount","amount_record","split_proving_key","split_verifying_key","programmanager_buildSplitTransaction","amount_credits","transfer_type","transfer_proving_key","transfer_verifying_key","len4","ptr8","programmanager_buildTransferTransaction","programmanager_synthesizeKeyPair","__wbg_provingkey_free","bytes","provingkey_fromBytes","provingkey_toBytes","v1","copy","provingkey_copy","__wbg_recordciphertext_free","recordciphertext_fromString","recordciphertext_toString","recordciphertext_decrypt","recordciphertext_isOwner","__wbg_recordplaintext_free","recordplaintext_fromString","recordplaintext_toString","recordplaintext_microcredits","recordplaintext_nonce","deferred4_0","deferred4_1","recordplaintext_serialNumberString","r3","Signature","__wbg_signature_free","signature_verify","signature_from_string","signature_to_string","__wbg_transaction_free","transaction_fromString","transaction_toString","transactionId","transaction_transactionId","transactionType","transaction_transactionType","__wbg_verifyingkey_free","verifyingkey_fromBytes","verifyingkey_toBytes","string","verifyingkey_fromString","verifyingkey_toString","__wbg_viewkey_free","viewkey_from_string","viewkey_to_string","deferred3_0","deferred3_1","viewkey_decrypt","__wbg_load","Response","WebAssembly","instantiateStreaming","instantiate","Instance","__wbg_get_imports","wbg","__wbindgen_object_drop_ref","__wbg_new_daafff584c71593b","XMLHttpRequest","arguments","__wbg_overrideMimeType_1a661d17da5f8baf","overrideMimeType","__wbg_open_56fa1eb95989f6a5","arg4","arg5","open","__wbg_send_9f5007eae908c72e","send","__wbg_response_f2acf2ecbe021710","__wbg_new_b51585de1b234aff","__wbindgen_string_new","__wbg_set_092e06b0f9d71865","Reflect","__wbg_new_1eead62f64ca15ce","Headers","__wbindgen_object_clone_ref","__wbg_append_fda9e3432e3e88da","append","__wbg_new_55c9955722952374","AbortController","__wbg_signal_4bd18fb489af2d4c","signal","__wbg_instanceof_Response_fc4327dbfcdf5ced","result","__wbg_status_ac85a3142a84caa2","__wbg_url_8503de97f69da463","__wbg_headers_b70de86b8e989bc0","__wbg_iterator_97f0c81209c6c35a","Symbol","iterator","__wbg_get_97b561fb56f034b5","__wbindgen_is_function","__wbg_call_cb65541d95d71282","__wbindgen_is_object","__wbg_next_526fc47e980da008","next","__wbg_next_ddb3312ca1c4e32a","__wbg_done_5c1f01fb660d73b5","done","__wbg_value_1695675138684bd5","__wbg_abort_654b796176d117aa","abort","__wbg_stringify_e25465938f3f611f","__wbindgen_string_get","__wbindgen_module","__wbg_init","__wbindgen_wasm_module","__wbindgen_memory","__wbg_spawnWorker_8ab39e70e73d7518","__wbg_call_01734de55d61e11d","__wbindgen_bigint_from_u64","__wbg_executionresponse_new","ExecutionResponse$1","__wbg_transaction_new","Transaction$1","__wbg_log_86eec937c8576a5b","__wbg_newwithlength_3ec098a360da1909","__wbg_set_502d29070ea18557","__wbg_keypair_new","__wbindgen_cb_drop","__wbg_arrayBuffer_288fb3538806e85c","__wbg_new_8125e318e6245eed","__wbg_length_72e2208bbc0efc61","__wbg_new_43f1b47c28813cbd","state0","cb0","__wbg_new_898a68150f225f2e","__wbg_push_ca1c26067ef907ac","__wbindgen_number_new","__wbg_new_abda76e883ba8a5f","__wbg_stack_658279fe44541cf6","__wbg_error_f851667af71bcfc6","deferred0_0","deferred0_1","__wbg_subarray_13db269f57aa838d","__wbg_getRandomValues_37fa2ca9e4e07fab","getRandomValues","__wbg_buffer_085ec1f694018c4f","__wbg_set_5cf90238115182c3","__wbg_newwithbyteoffsetandlength_6da8e527659b86aa","__wbg_randomFillSync_dc1e9a60c158336d","randomFillSync","__wbg_crypto_c48a774b022d20ac","crypto","__wbg_process_298734cf255a885d","process","__wbg_versions_e2e78e134e3e5d01","versions","__wbg_node_1cd7a5d853dbea79","node","__wbindgen_is_string","__wbg_msCrypto_bcb970640f50a1e8","msCrypto","__wbg_newwithlength_e5d69174d6984cd7","__wbg_require_8f08ceecec0f4fee","require","__wbg_length_fff51ee6522a1a18","__wbg_get_44be0491f933a435","__wbg_self_1ff1d729e9aae938","self","__wbg_window_5f4faef6c12b79ec","window","__wbg_globalThis_1d39714405582d3c","globalThis","__wbg_global_651f05c6a0944d1c","global","__wbindgen_is_undefined","__wbg_newnoargs_581967eacc0e2604","Function","__wbg_has_c5fcd020291e56b8","__wbg_fetch_8eaf01857a5bb21f","__wbg_fetch_b5d6bebed1e6c2d2","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","__wbg_then_b2267541e2a73865","then","__wbg_then_f7e06ee3c11698eb","__wbg_resolve_53698b95aaf7fcf8","__wbg_waitAsync_60fb5e2e86467e31","Atomics","waitAsync","__wbg_new_a0af68041688e8fd","__wbg_waitAsync_73fd6eb3bace0a8d","__wbg_async_e1a2a669aacf35ff","__wbg_value_555e4f564193db05","__wbindgen_link_22046963fe0b707a","encodeURIComponent","__wbg_new_8e7322f46d5d019c","__wbg_setonmessage_f0bd0280573b7084","onmessage","__wbg_of_3f69007bb4eeae65","of","__wbg_postMessage_8c609e2bde333d9c","__wbg_data_ab99ae4a2e1e8bc9","__wbg_newwithstrandinit_cad5cd6038c7ff5d","Request","__wbg_status_114ef6fe27fb8b00","__wbg_responseText_da275667251fd153","responseText","__wbindgen_closure_wrapper5451","__wbindgen_closure_wrapper5474","__wbg_init_memory","maybe_memory","Memory","initial","maximum","shared","__wbg_finalize_init","exports","__wbindgen_start","initSync","Module","input","freeze","__proto__","RecordCiphertext$1","default","wasm_path","wasmInitThreadPool","Private","opt","importHook","serverPath","initializeHook","final_path","Cargo","threads","navigator","hardwareConcurrency","info","proxyMarker","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","transferHandlers","canHandle","serialize","port1","port2","MessageChannel","expose","deserialize","port","serialized","isError","assign","ep","allowedOrigins","callback","ev","origin","allowedOrigin","RegExp","test","isAllowedOrigin","path","argumentList","fromWireValue","returnValue","parent","reduce","prop","rawValue","proxy","transfers","transferCache","catch","wireValue","transferables","toWireValue","removeEventListener","closeEndPoint","TypeError","endpoint","isMessagePort","close","target","createProxy","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","WeakMap","proxyFinalizers","FinalizationRegistry","newCount","isProxyReleased","Proxy","_target","unregister","unregisterProxy","r","p","bind","_thisArg","rawArgumentList","last","processArguments","construct","register","registerProxy","processed","v","arr","concat","handler","serializedValue","msg","Math","floor","random","Number","MAX_SAFE_INTEGER"],"sourceRoot":""}