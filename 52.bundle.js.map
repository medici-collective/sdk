{"version":3,"file":"52.bundle.js","mappings":"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","sources":["webpack://aleo-website/../src/account.ts","webpack://aleo-website/../src/utils.ts","webpack://aleo-website/../src/network-client.ts","webpack://aleo-website/../src/function-key-provider.ts","webpack://aleo-website/../src/offline-key-provider.ts","webpack://aleo-website/../src/record-provider.ts","webpack://aleo-website/../src/managed-worker.ts","webpack://aleo-website/../src/program-manager.ts","webpack://aleo-website/../src/index.ts","webpack://aleo-website/wasm.js","webpack://aleo-website/../js/index.js","webpack://aleo-website/../node_modules/comlink/dist/esm/comlink.mjs"],"sourcesContent":["import {\n  Address,\n  PrivateKey,\n  Signature,\n  ViewKey,\n  PrivateKeyCiphertext,\n  RecordCiphertext,\n} from \"./index\";\n\ninterface AccountParam {\n  privateKey?: string;\n  seed?: Uint8Array;\n}\n\n/**\n * Key Management class. Enables the creation of a new Aleo Account, importation of an existing account from\n * an existing private key or seed, and message signing and verification functionality.\n *\n * An Aleo Account is generated from a randomly generated seed (number) from which an account private key, view key,\n * and a public account address are derived. The private key lies at the root of an Aleo account. It is a highly\n * sensitive secret and should be protected as it allows for creation of Aleo Program executions and arbitrary value\n * transfers. The View Key allows for decryption of a user's activity on the blockchain. The Address is the public\n * address to which other users of Aleo can send Aleo credits and other records to. This class should only be used\n * environments where the safety of the underlying key material can be assured.\n *\n * @example\n * // Create a new account\n * const myRandomAccount = new Account();\n *\n * // Create an account from a randomly generated seed\n * const seed = new Uint8Array([94, 91, 52, 251, 240, 230, 226, 35, 117, 253, 224, 210, 175, 13, 205, 120, 155, 214, 7, 169, 66, 62, 206, 50, 188, 40, 29, 122, 40, 250, 54, 18]);\n * const mySeededAccount = new Account({seed: seed});\n *\n * // Create an account from an existing private key\n * const myExistingAccount = new Account({privateKey: 'myExistingPrivateKey'})\n *\n * // Sign a message\n * const hello_world = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n * const signature = myRandomAccount.sign(hello_world)\n *\n * // Verify a signature\n * myRandomAccount.verify(hello_world, signature)\n */\nexport class Account {\n  _privateKey: PrivateKey;\n  _viewKey: ViewKey;\n  _address: Address;\n\n  constructor(params: AccountParam = {}) {\n    try {\n      this._privateKey = this.privateKeyFromParams(params);\n    } catch (e) {\n      console.error(\"Wrong parameter\", e);\n      throw new Error(\"Wrong Parameter\");\n    }\n    this._viewKey = ViewKey.from_private_key(this._privateKey);\n    this._address = Address.from_private_key(this._privateKey);\n  }\n\n  /**\n   * Attempts to create an account from a private key ciphertext\n   * @param {PrivateKeyCiphertext | string} ciphertext\n   * @param {string} password\n   * @returns {PrivateKey | Error}\n   *\n   * @example\n   * const ciphertext = PrivateKey.newEncrypted(\"password\");\n   * const account = Account.fromCiphertext(ciphertext, \"password\");\n   */\n  public static fromCiphertext(ciphertext: PrivateKeyCiphertext | string, password: string) {\n    try {\n      ciphertext = (typeof ciphertext === \"string\") ? PrivateKeyCiphertext.fromString(ciphertext) : ciphertext;\n      const _privateKey = PrivateKey.fromPrivateKeyCiphertext(ciphertext, password);\n      return new Account({ privateKey: _privateKey.to_string() });\n    } catch(e) {\n      throw new Error(\"Wrong password or invalid ciphertext\");\n    }\n  }\n\n  private privateKeyFromParams(params: AccountParam) {\n    if (params.seed) {\n      return PrivateKey.from_seed_unchecked(params.seed);\n    }\n    if (params.privateKey) {\n      return PrivateKey.from_string(params.privateKey);\n    }\n    return new PrivateKey();\n  }\n\n  privateKey() {\n    return this._privateKey;\n  }\n\n  viewKey() {\n    return this._viewKey;\n  }\n\n  address() {\n    return this._address;\n  }\n\n  toString() {\n    return this.address().to_string()\n  }\n\n  /**\n   * Encrypt the account's private key with a password\n   * @param {string} ciphertext\n   * @returns {PrivateKeyCiphertext}\n   *\n   * @example\n   * const account = new Account();\n   * const ciphertext = account.encryptAccount(\"password\");\n   */\n  encryptAccount(password: string) {\n    return this._privateKey.toCiphertext(password);\n  }\n\n  /**\n   * Decrypts a Record in ciphertext form into plaintext\n   * @param {string} ciphertext\n   * @returns {Record}\n   *\n   * @example\n   * const account = new Account();\n   * const record = account.decryptRecord(\"record1ciphertext\");\n   */\n  decryptRecord(ciphertext: string) {\n    return this._viewKey.decrypt(ciphertext);\n  }\n\n  /**\n   * Decrypts an array of Records in ciphertext form into plaintext\n   * @param {string[]} ciphertexts\n   * @returns {Record[]}\n   *\n   * @example\n   * const account = new Account();\n   * const record = account.decryptRecords([\"record1ciphertext\", \"record2ciphertext\"]);\n   */\n  decryptRecords(ciphertexts: string[]) {\n    return ciphertexts.map((ciphertext) => this._viewKey.decrypt(ciphertext));\n  }\n\n  /**\n   * Determines whether the account owns a ciphertext record\n   * @param {RecordCipherText | string} ciphertext\n   * @returns {boolean}\n   *\n   * @example\n   * // Create a connection to the Aleo network and an account\n   * const connection = new NodeConnection(\"vm.aleo.org/api\");\n   * const account = Account.fromCiphertext(\"ciphertext\", \"password\");\n   *\n   * // Get a record from the network\n   * const record = connection.getBlock(1234);\n   * const recordCipherText = record.transactions[0].execution.transitions[0].id;\n   *\n   * // Check if the account owns the record\n   * if account.ownsRecord(recordCipherText) {\n   *     // Then one can do something like:\n   *     // Decrypt the record and check if it's spent\n   *     // Store the record in a local database\n   *     // Etc.\n   * }\n   */\n  ownsRecordCiphertext(ciphertext: RecordCiphertext | string) {\n    if (typeof ciphertext === 'string') {\n      try {\n        const ciphertextObject = RecordCiphertext.fromString(ciphertext);\n        return ciphertextObject.isOwner(this._viewKey);\n      }\n      catch (e) {\n        return false;\n      }\n    }\n    else {\n      return ciphertext.isOwner(this._viewKey);\n    }\n  }\n\n  /**\n   * Signs a message with the account's private key.\n   * Returns a Signature.\n   *\n   * @param {Uint8Array} message\n   * @returns {Signature}\n   *\n   * @example\n   * const account = new Account();\n   * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n   * account.sign(message);\n   */\n  sign(message: Uint8Array) {\n    return this._privateKey.sign(message);\n  }\n\n  /**\n   * Verifies the Signature on a message.\n   *\n   * @param {Uint8Array} message\n   * @param {Signature} signature\n   * @returns {boolean}\n   *\n   * @example\n   * const account = new Account();\n   * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n   * const signature = account.sign(message);\n   * account.verify(message, signature);\n   */\n  verify(message: Uint8Array, signature: Signature) {\n    return this._address.verify(message, signature);\n  }\n\n}\n","export async function get(url: URL | string, options?: RequestInit) {\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not get URL \" + url);\n    }\n\n    return response;\n}\n\n\nexport async function post(url: URL | string, options: RequestInit) {\n    options.method = \"POST\";\n\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not post URL \" + url);\n    }\n\n    return response;\n}\n","import { get, post } from \"./utils\";\nimport {\n  Account,\n  Block,\n  RecordCiphertext,\n  Program,\n  RecordPlaintext,\n  PrivateKey,\n  Transaction,\n  TransactionModel,\n  logAndThrow\n} from \"./index\";\n\ntype ProgramImports = { [key: string]: string | Program };\n\ninterface AleoNetworkClientOptions {\n  headers?: { [key: string]: string };\n}\n\n/**\n * Client library that encapsulates REST calls to publicly exposed endpoints of Aleo nodes. The methods provided in this\n * allow users to query public information from the Aleo blockchain and submit transactions to the network.\n *\n * @param {string} host\n * @example\n * // Connection to a local node\n * const localNetworkClient = new AleoNetworkClient(\"http://localhost:3030\");\n *\n * // Connection to a public beacon node\n * const publicnetworkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n */\nclass AleoNetworkClient {\n  host: string;\n  headers: { [key: string]: string };\n  account: Account | undefined;\n\n  constructor(host: string, options?: AleoNetworkClientOptions) {\n    this.host = host + \"/testnet3\";\n\n    if (options && options.headers) {\n      this.headers = options.headers;\n\n    } else {\n      this.headers = {\n        // This is replaced by the actual version by a Rollup plugin\n        \"X-Aleo-SDK-Version\": \"%%VERSION%%\",\n      };\n    }\n  }\n\n  /**\n   * Set an account to use in networkClient calls\n   *\n   * @param {Account} account\n   * @example\n   * const account = new Account();\n   * networkClient.setAccount(account);\n   */\n  setAccount(account: Account) {\n    this.account = account;\n  }\n\n  /**\n   * Return the Aleo account used in the networkClient\n   *\n   * @example\n   * const account = networkClient.getAccount();\n   */\n  getAccount(): Account | undefined {\n    return this.account;\n  }\n\n  /**\n   * Set a new host for the networkClient\n   *\n   * @param {string} host The address of a node hosting the Aleo API\n   * @param host\n   */\n  setHost(host: string) {\n    this.host = host + \"/testnet3\";\n  }\n\n  async fetchData<Type>(\n      url = \"/\",\n  ): Promise<Type> {\n    try {\n      const response = await get(this.host + url, {\n        headers: this.headers\n      });\n\n      return await response.json();\n\n    } catch (error) {\n      throw new Error(\"Error fetching data.\");\n    }\n  }\n\n  /**\n   * Attempts to find unspent records in the Aleo blockchain for a specified private key\n   * @param {number} startHeight - The height at which to start searching for unspent records\n   * @param {number} endHeight - The height at which to stop searching for unspent records\n   * @param {string | PrivateKey} privateKey - The private key to use to find unspent records\n   * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])\n   * @param {number} maxMicrocredits - The maximum number of microcredits to search for\n   * @param {string[]} nonces - The nonces of already found records to exclude from the search\n   *\n   * @example\n   * // Find all unspent records\n   * const privateKey = \"[PRIVATE_KEY]\";\n   * const records = networkClient.findUnspentRecords(0, undefined, privateKey);\n   *\n   * // Find specific amounts\n   * const startHeight = 500000;\n   * const amounts = [600000, 1000000];\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, amounts);\n   *\n   * // Find specific amounts with a maximum number of cumulative microcredits\n   * const maxMicrocredits = 100000;\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, undefined, maxMicrocredits);\n   */\n  async findUnspentRecords(\n      startHeight: number,\n      endHeight: number | undefined,\n      privateKey: string | PrivateKey | undefined,\n      amounts: number[] | undefined,\n      maxMicrocredits?: number | undefined,\n      nonces?: string[] | undefined,\n  ): Promise<Array<RecordPlaintext> | Error> {\n    nonces = nonces || [];\n    // Ensure start height is not negative\n    if (startHeight < 0) {\n      throw new Error(\"Start height must be greater than or equal to 0\");\n    }\n\n    // Initialize search parameters\n    const records = new Array<RecordPlaintext>();\n    let start;\n    let end;\n    let resolvedPrivateKey: PrivateKey;\n    let failures = 0;\n    let totalRecordValue = BigInt(0);\n    let latestHeight: number;\n\n    // Ensure a private key is present to find owned records\n    if (typeof privateKey === \"undefined\") {\n      if (typeof this.account === \"undefined\") {\n        throw new Error(\"Private key must be specified in an argument to findOwnedRecords or set in the AleoNetworkClient\");\n      } else {\n        resolvedPrivateKey = this.account._privateKey;\n      }\n    } else {\n      try {\n        resolvedPrivateKey = privateKey instanceof PrivateKey ? privateKey : PrivateKey.from_string(privateKey);\n      } catch (error) {\n        throw new Error(\"Error parsing private key provided.\");\n      }\n    }\n    const viewKey = resolvedPrivateKey.to_view_key();\n\n    // Get the latest height to ensure the range being searched is valid\n    try {\n      const blockHeight = await this.getLatestHeight();\n      if (typeof blockHeight === \"number\") {\n        latestHeight = blockHeight;\n      } else {\n        throw new Error(\"Error fetching latest block height.\");\n      }\n    } catch (error) {\n      throw new Error(\"Error fetching latest block height.\");\n    }\n\n    // If no end height is specified or is greater than the latest height, set the end height to the latest height\n    if (typeof endHeight === \"number\" && endHeight <= latestHeight) {\n      end = endHeight\n    } else {\n      end = latestHeight;\n    }\n\n    // If the starting is greater than the ending height, return an error\n    if (startHeight > end) {\n      throw new Error(\"Start height must be less than or equal to end height.\");\n    }\n\n    // Iterate through blocks in reverse order in chunks of 50\n    while (end > startHeight) {\n      start = end - 50;\n      if (start < startHeight) {\n        start = startHeight;\n      }\n      try {\n        // Get 50 blocks (or the difference between the start and end if less than 50)\n        const blocks = await this.getBlockRange(start, end);\n        end = start;\n        if (!(blocks instanceof Error)) {\n          // Iterate through blocks to find unspent records\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const transactions = block.transactions;\n            if (!(typeof transactions === \"undefined\")) {\n              for (let j = 0; j < transactions.length; j++) {\n                const confirmedTransaction = transactions[j];\n                // Search for unspent records in execute transactions of credits.aleo\n                if (confirmedTransaction.type == \"execute\") {\n                  const transaction = confirmedTransaction.transaction;\n                  if (transaction.execution && !(typeof transaction.execution.transitions == \"undefined\")) {\n                    for (let k = 0; k < transaction.execution.transitions.length; k++) {\n                      const transition = transaction.execution.transitions[k];\n                      // Only search for unspent records in credits.aleo (for now)\n                      if (transition.program !== \"credits.aleo\") {\n                        continue;\n                      }\n                      if (!(typeof transition.outputs == \"undefined\")) {\n                        for (let l = 0; l < transition.outputs.length; l++) {\n                          const output = transition.outputs[l];\n                          if (output.type === \"record\") {\n                            try {\n                              // Create a wasm record ciphertext object from the found output\n                              const record = RecordCiphertext.fromString(output.value);\n                              // Determine if the record is owned by the specified view key\n                              if (record.isOwner(viewKey)) {\n                                // Decrypt the record and get the serial number\n                                const recordPlaintext = record.decrypt(viewKey);\n\n                                // If the record has already been found, skip it\n                                const nonce = recordPlaintext.nonce();\n                                if (nonces.includes(nonce)) {\n                                  continue;\n                                }\n\n                                // Otherwise record the nonce that has been found\n                                const serialNumber = recordPlaintext.serialNumberString(resolvedPrivateKey, \"credits.aleo\", \"credits\");\n                                // Attempt to see if the serial number is spent\n                                try {\n                                  await this.getTransitionId(serialNumber);\n                                } catch (error) {\n                                  // If it's not found, add it to the list of unspent records\n                                  if (!amounts) {\n                                    records.push(recordPlaintext);\n                                    // If the user specified a maximum number of microcredits, check if the search has found enough\n                                    if (typeof maxMicrocredits === \"number\") {\n                                      totalRecordValue += recordPlaintext.microcredits();\n                                      // Exit if the search has found the amount specified\n                                      if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                        return records;\n                                      }\n                                    }\n                                  }\n                                  // If the user specified a list of amounts, check if the search has found them\n                                  if (!(typeof amounts === \"undefined\") && amounts.length > 0) {\n                                    let amounts_found = 0;\n                                    if (recordPlaintext.microcredits() > amounts[amounts_found]) {\n                                        amounts_found += 1;\n                                        records.push(recordPlaintext);\n                                        // If the user specified a maximum number of microcredits, check if the search has found enough\n                                        if (typeof maxMicrocredits === \"number\") {\n                                          totalRecordValue += recordPlaintext.microcredits();\n                                          // Exit if the search has found the amount specified\n                                          if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                            return records;\n                                          }\n                                        }\n                                        if (records.length >= amounts.length) {\n                                          return records;\n                                        }\n                                    }\n                                  }\n                                }\n                              }\n                            } catch (error) {\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // If there is an error fetching blocks, log it and keep searching\n        console.warn(\"Error fetching blocks in range: \" + start.toString() + \"-\" + end.toString());\n        console.warn(\"Error: \", error);\n        failures += 1;\n        if (failures > 10) {\n          console.warn(\"10 failures fetching records reached. Returning records fetched so far\");\n          return records;\n        }\n      }\n    }\n    return records;\n  }\n\n  /**\n   * Returns the contents of the block at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const block = networkClient.getBlock(1234);\n   */\n  async getBlock(height: number): Promise<Block | Error> {\n    try {\n      const block = await this.fetchData<Block>(\"/block/\" + height);\n      return block;\n    } catch (error) {\n      throw new Error(\"Error fetching block.\");\n    }\n  }\n\n  /**\n   * Returns a range of blocks between the specified block heights\n   *\n   * @param {number} start\n   * @param {number} end\n   * @example\n   * const blockRange = networkClient.getBlockRange(2050, 2100);\n   */\n  async getBlockRange(start: number, end: number): Promise<Array<Block> | Error> {\n    try {\n      return await this.fetchData<Array<Block>>(\"/blocks?start=\" + start + \"&end=\" + end);\n    } catch (error) {\n      const errorMessage = \"Error fetching blocks between \" + start + \" and \" + end + \".\"\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Returns the deployment transaction id associated with the specified program\n   *\n   * @param {Program | string} program\n   * @returns {TransactionModel | Error}\n   */\n  async getDeploymentTransactionIDForProgram(program: Program | string): Promise<string | Error> {\n    if (program instanceof Program) {\n      program = program.toString();\n    }\n    try {\n      const id = await this.fetchData<string>(\"/find/transactionID/deployment/\" + program);\n      return id.replace(\"\\\"\", \"\")\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the deployment transaction associated with a specified program\n   *\n   * @param {Program | string} program\n   * @returns {TransactionModel | Error}\n   */\n  async getDeploymentTransactionForProgram(program: Program | string): Promise<TransactionModel | Error> {\n    try {\n      const transaction_id = <string>await this.getDeploymentTransactionIDForProgram(program);\n      return <TransactionModel>await this.getTransaction(transaction_id);\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the contents of the latest block\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestBlock();\n   */\n  async getLatestBlock(): Promise<Block | Error> {\n    try {\n      return await this.fetchData<Block>(\"/latest/block\") as Block;\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest committee\n   *\n   * @returns {Promise<object>} A javascript object containing the latest committee\n   */\n  async getLatestCommittee(): Promise<object | Error> {\n    try {\n      return await this.fetchData<object>(\"/committee/latest\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest block height\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestHeight();\n   */\n  async getLatestHeight(): Promise<number | Error> {\n    try {\n      return await this.fetchData<number>(\"/latest/height\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest height.\");\n    }\n  }\n\n  /**\n   * Returns the source code of a program given a program ID\n   *\n   * @param {string} programId The program ID of a program deployed to the Aleo Network\n   * @return {Promise<string>} Source code of the program\n   *\n   * @example\n   * const program = networkClient.getProgram(\"hello_hello.aleo\");\n   * const expectedSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * assert.equal(program, expectedSource);\n   */\n  async getProgram(programId: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId)\n    } catch (error) {\n      throw new Error(\"Error fetching program\");\n    }\n  }\n\n  /**\n   * Returns a program object from a program ID or program source code\n   *\n   * @param {string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @return {Promise<Program | Error>} Source code of the program\n   *\n   * @example\n   * const programID = \"hello_hello.aleo\";\n   * const programSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   *\n   * // Get program object from program ID or program source code\n   * const programObjectFromID = await networkClient.getProgramObject(programID);\n   * const programObjectFromSource = await networkClient.getProgramObject(programSource);\n   *\n   * // Both program objects should be equal\n   * assert.equal(programObjectFromID.to_string(), programObjectFromSource.to_string());\n   */\n  async getProgramObject(inputProgram: string): Promise<Program | Error> {\n    try {\n      return Program.fromString(inputProgram);\n    } catch (error) {\n      try {\n        return Program.fromString(<string>(await this.getProgram(inputProgram)));\n      } catch (error) {\n        throw new Error(`${inputProgram} is neither a program name or a valid program`);\n      }\n    }\n  }\n\n  /**\n   *  Returns an object containing the source code of a program and the source code of all programs it imports\n   *\n   * @param {Program | string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @returns {Promise<ProgramImports>} Object of the form { \"program_id\": \"program_source\", .. } containing program id & source code for all program imports\n   *\n   * @example\n   * const double_test_source = \"import multiply_test.aleo;\\n\\nprogram double_test.aleo;\\n\\nfunction double_it:\\n    input r0 as u32.private;\\n    call multiply_test.aleo/multiply 2u32 r0 into r1;\\n    output r1 as u32.private;\\n\"\n   * const double_test = Program.fromString(double_test_source);\n   * const expectedImports = {\n   *     \"multiply_test.aleo\": \"program multiply_test.aleo;\\n\\nfunction multiply:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    mul r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * }\n   *\n   * // Imports can be fetched using the program ID, source code, or program object\n   * let programImports = await networkClient.getProgramImports(\"double_test.aleo\");\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program source code\n   * programImports = await networkClient.getProgramImports(double_test_source);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program object\n   * programImports = await networkClient.getProgramImports(double_test);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   */\n  async getProgramImports(inputProgram: Program | string): Promise<ProgramImports | Error> {\n    try {\n      const imports: ProgramImports = {};\n\n      // Get the program object or fail if the program is not valid or does not exist\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n\n      // Get the list of programs that the program imports\n      const importList = program.getImports();\n\n      // Recursively get any imports that the imported programs have in a depth first search order\n      for (let i = 0; i < importList.length; i++) {\n        const import_id = importList[i];\n        if (!imports.hasOwnProperty(import_id)) {\n          const programSource = <string>await this.getProgram(import_id);\n          const nestedImports = <ProgramImports>await this.getProgramImports(import_id);\n          for (const key in nestedImports) {\n            if (!imports.hasOwnProperty(key)) {\n              imports[key] = nestedImports[key];\n            }\n          }\n          imports[import_id] = programSource;\n        }\n      }\n      return imports;\n    } catch (error) {\n      throw logAndThrow(\"Error fetching program imports: \" + error)\n    }\n  }\n\n  /**\n   * Get a list of the program names that a program imports\n   *\n   * @param {Program | string} inputProgram - The program id or program source code to get the imports of\n   * @returns {string[]} - The list of program names that the program imports\n   *\n   * @example\n   * const programImportsNames = networkClient.getProgramImports(\"double_test.aleo\");\n   * const expectedImportsNames = [\"multiply_test.aleo\"];\n   * assert.deepStrictEqual(programImportsNames, expectedImportsNames);\n   */\n  async getProgramImportNames(inputProgram: Program | string): Promise<string[] | Error> {\n    try {\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n      return program.getImports();\n    } catch (error) {\n      throw new Error(\"Error fetching program imports with error: \" + error);\n    }\n  }\n\n  /**\n   * Returns the names of the mappings of a program\n   *\n   * @param {string} programId - The program ID to get the mappings of (e.g. \"credits.aleo\")\n   * @example\n   * const mappings = networkClient.getProgramMappingNames(\"credits.aleo\");\n   * const expectedMappings = [\"account\"];\n   * assert.deepStrictEqual(mappings, expectedMappings);\n   */\n  async getProgramMappingNames(programId: string): Promise<Array<string> | Error> {\n    try {\n      return await this.fetchData<Array<string>>(\"/program/\" + programId + \"/mappings\")\n    } catch (error) {\n      throw new Error(\"Error fetching program mappings - ensure the program exists on chain before trying again\");\n    }\n  }\n\n  /**\n   * Returns the value of a program's mapping for a specific key\n   *\n   * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n   * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"account\")\n   * @param {string} key - The key of the mapping to get the value of (e.g. \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\")\n   * @return {Promise<string>} String representation of the value of the mapping\n   *\n   * @example\n   * // Get public balance of an account\n   * const mappingValue = networkClient.getMappingValue(\"credits.aleo\", \"account\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n   * const expectedValue = \"0u64\";\n   * assert.equal(mappingValue, expectedValue);\n   */\n  async getProgramMappingValue(programId: string, mappingName: string, key: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId + \"/mapping/\" + mappingName + \"/\" + key)\n    } catch (error) {\n      throw new Error(\"Error fetching mapping value - ensure the mapping exists and the key is correct\");\n    }\n  }\n\n  /**\n   * Returns the latest state/merkle root of the Aleo blockchain\n   *\n   * @example\n   * const stateRoot = networkClient.getStateRoot();\n   */\n  async getStateRoot(): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/latest/stateRoot\");\n    } catch (error) {\n      throw new Error(\"Error fetching Aleo state root\");\n    }\n  }\n\n  /**\n   * Returns a transaction by its unique identifier\n   *\n   * @param {string} id\n   * @example\n   * const transaction = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n   */\n  async getTransaction(id: string): Promise<TransactionModel | Error> {\n    try {\n      return await this.fetchData<TransactionModel>(\"/transaction/\" + id);\n    } catch (error) {\n      throw new Error(\"Error fetching transaction.\");\n    }\n\n  }\n\n  /**\n   * Returns the transactions present at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const transactions = networkClient.getTransactions(654);\n   */\n  async getTransactions(height: number): Promise<Array<TransactionModel> | Error> {\n    try {\n      return await this.fetchData<Array<TransactionModel>>(\"/block/\" + height.toString() + \"/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions.\");\n    }\n  }\n\n  /**\n   * Returns the transactions in the memory pool.\n   *\n   * @example\n   * const transactions = networkClient.getTransactionsInMempool();\n   */\n  async getTransactionsInMempool(): Promise<Array<TransactionModel> | Error> {\n    try {\n      return await this.fetchData<Array<TransactionModel>>(\"/memoryPool/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions from mempool.\");\n    }\n  }\n\n  /**\n   * Returns the transition ID of the transition corresponding to the ID of the input or output.\n   * @param {string} inputOrOutputID - ID of the input or output.\n   *\n   * @example\n   * const transitionId = networkClient.getTransitionId(\"2429232855236830926144356377868449890830704336664550203176918782554219952323field\");\n   */\n  async getTransitionId(inputOrOutputID: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/find/transitionID/\" + inputOrOutputID);\n    } catch (error) {\n      throw new Error(\"Error fetching transition ID.\");\n    }\n  }\n\n  /**\n   * Submit an execute or deployment transaction to the Aleo network\n   *\n   * @param {Transaction | string} transaction  - The transaction to submit to the network\n   * @returns {string | Error} - The transaction id of the submitted transaction or the resulting error\n   */\n  async submitTransaction(transaction: Transaction | string): Promise<string | Error> {\n    const transaction_string = transaction instanceof Transaction ? transaction.toString() : transaction;\n    try {\n      const response = await post(this.host + \"/transaction/broadcast\", {\n        body: transaction_string,\n        headers: Object.assign({}, this.headers, {\n          \"Content-Type\": \"application/json\",\n        }),\n      });\n\n      try {\n        return await response.json();\n\n      } catch (error) {\n        throw new Error(`Error posting transaction. Aleo network response: ${(error as Error).message}`);\n      }\n    } catch (error) {\n      throw new Error(`Error posting transaction: No response received: ${(error as Error).message}`);\n    }\n  }\n}\n\nexport { AleoNetworkClient, AleoNetworkClientOptions, ProgramImports }\n","import { ProvingKey, VerifyingKey, CREDITS_PROGRAM_KEYS, KEY_STORE, PRIVATE_TRANSFER, PRIVATE_TO_PUBLIC_TRANSFER, PUBLIC_TRANSFER, PUBLIC_TO_PRIVATE_TRANSFER} from \"./index\";\nimport { get } from \"./utils\";\n\ntype FunctionKeyPair = [ProvingKey, VerifyingKey];\ntype CachedKeyPair = [Uint8Array, Uint8Array];\ntype AleoKeyProviderInitParams = {\n    proverUri?: string;\n    verifierUri?: string;\n    cacheKey?: string;\n};\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface KeySearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * AleoKeyProviderParams search parameter for the AleoKeyProvider. It allows for the specification of a proverUri and\n * verifierUri to fetch keys via HTTP from a remote resource as well as a unique cacheKey to store the keys in memory.\n */\nclass AleoKeyProviderParams implements KeySearchParams {\n    proverUri: string | undefined;\n    verifierUri: string | undefined;\n    cacheKey: string | undefined;\n\n    /**\n     * Create a new AleoKeyProviderParams object which implements the KeySearchParams interface. Users can optionally\n     * specify a url for the proverUri & verifierUri to fetch keys via HTTP from a remote resource as well as a unique\n     * cacheKey to store the keys in memory for future use. If no proverUri or verifierUri is specified, a cachekey must\n     * be provided.\n     *\n     * @param { AleoKeyProviderInitParams } params - Optional search parameters\n     */\n    constructor(params: {proverUri?: string, verifierUri?: string, cacheKey?: string}) {\n        this.proverUri = params.proverUri;\n        this.verifierUri = params.verifierUri;\n        this.cacheKey = params.cacheKey;\n    }\n}\n\n/**\n * KeyProvider interface. Enables the retrieval of public proving and verifying keys for Aleo Programs.\n */\ninterface FunctionKeyProvider {\n    /**\n     * Get bond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the bond_public function\n     */\n    bondPublicKeys(): Promise<FunctionKeyPair | Error>;\n\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void;\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the unbond_public function\n     */\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a search object which implements the KeySearchParams interface\n     * class IndexDbSearch implements KeySearchParams {\n     *     db: string\n     *     keyId: string\n     *     constructor(params: {db: string, keyId: string}) {\n     *         this.db = params.db;\n     *         this.keyId = params.keyId;\n     *     }\n     * }\n     *\n     * // Create a new object which implements the KeyProvider interface\n     * class IndexDbKeyProvider implements FunctionKeyProvider {\n     *     async functionKeys(params: KeySearchParams): Promise<FunctionKeyPair | Error> {\n     *         return new Promise((resolve, reject) => {\n     *             const request = indexedDB.open(params.db, 1);\n     *\n     *             request.onupgradeneeded = function(e) {\n     *                 const db = e.target.result;\n     *                 if (!db.objectStoreNames.contains('keys')) {\n     *                     db.createObjectStore('keys', { keyPath: 'id' });\n     *                 }\n     *             };\n     *\n     *             request.onsuccess = function(e) {\n     *                 const db = e.target.result;\n     *                 const transaction = db.transaction([\"keys\"], \"readonly\");\n     *                 const store = transaction.objectStore(\"keys\");\n     *                 const request = store.get(params.keyId);\n     *                 request.onsuccess = function(e) {\n     *                     if (request.result) {\n     *                         resolve(request.result as FunctionKeyPair);\n     *                     } else {\n     *                         reject(new Error(\"Key not found\"));\n     *                     }\n     *                 };\n     *                 request.onerror = function(e) { reject(new Error(\"Error fetching key\")); };\n     *             };\n     *\n     *             request.onerror = function(e) { reject(new Error(\"Error opening database\")); };\n     *         });\n     *     }\n     *\n     *     // implement the other methods...\n     * }\n     *\n     *\n     * const keyProvider = new AleoKeyProvider();\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const searchParams = new IndexDbSearch({db: \"keys\", keyId: \"credits.aleo:transferPrivate\"});\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(searchParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_private function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get join function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get split function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    unBondPublicKeys(): Promise<FunctionKeyPair | Error>;\n\n}\n\n\n/**\n * AleoKeyProvider class. Implements the KeyProvider interface. Enables the retrieval of Aleo program proving and\n * verifying keys for the credits.aleo program over http from official Aleo sources and storing and retrieving function\n * keys from a local memory cache.\n */\nclass AleoKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n    cacheOption: boolean;\n    keyUris: string;\n\n    async fetchBytes(\n        url = \"/\",\n    ): Promise<Uint8Array> {\n        try {\n            const response = await get(url);\n            const data = await response.arrayBuffer();\n            return new Uint8Array(data);\n        } catch (error) {\n            throw new Error(\"Error fetching data.\" + error);\n        }\n    }\n\n    constructor() {\n        this.keyUris = KEY_STORE;\n        this.cache = new Map<string, CachedKeyPair>();\n        this.cacheOption = false;\n    }\n\n    /**\n     * Use local memory to store keys\n     *\n     * @param {boolean} useCache whether to store keys in local memory\n     */\n    useCache(useCache: boolean) {\n        this.cacheOption = useCache;\n    }\n\n    /**\n     * Clear the key cache\n     */\n    clearCache() {\n        this.cache.clear();\n    }\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair) {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    }\n\n    /**\n     * Determine if a keyId exists in the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair\n     * @returns {boolean} true if the keyId exists in the cache, false otherwise\n     */\n    containsKeys(keyId: string): boolean {\n        return this.cache.has(keyId)\n    }\n\n    /**\n     * Delete a set of keys from the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair to delete from memory\n     * @returns {boolean} true if the keyId exists in the cache and was deleted, false if the key did not exist\n     */\n    deleteKeys(keyId: string): boolean {\n        return this.cache.delete(keyId)\n    }\n\n    /**\n     * Get a set of keys from the cache\n     * @param keyId keyId of a proving and verifying key pair\n     *\n     * @returns {FunctionKeyPair | Error} Proving and verifying keys for the specified program\n     */\n    getKeys(keyId: string): FunctionKeyPair | Error {\n        console.debug(`Checking if key exists in cache. KeyId: ${keyId}`)\n        if (this.cache.has(keyId)) {\n            const [provingKeyBytes, verifyingKeyBytes] = <CachedKeyPair>this.cache.get(keyId);\n            return [ProvingKey.fromBytes(provingKeyBytes), VerifyingKey.fromBytes(verifyingKeyBytes)];\n        } else {\n            return new Error(\"Key not found in cache.\");\n        }\n    }\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams} params parameters for the key search in form of: {proverUri: string, verifierUri: string, cacheKey: string}\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * const AleoProviderParams = new AleoProviderParams(\"https://testnet3.parameters.aleo.org/transfer_private.\");\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually using the key provider\n     * const keySearchParams = { \"cacheKey\": \"myProgram:myFunction\" };\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(keySearchParams);\n     */\n    async functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error> {\n        if (params) {\n            let proverUrl;\n            let verifierUrl;\n            let cacheKey;\n            if (\"proverUri\" in params && typeof params[\"proverUri\"] == \"string\") {\n                proverUrl = params[\"proverUri\"];\n            }\n\n            if (\"verifierUri\" in params && typeof params[\"verifierUri\"] == \"string\") {\n                verifierUrl = params[\"verifierUri\"];\n            }\n\n            if (\"cacheKey\" in params && typeof params[\"cacheKey\"] == \"string\") {\n                cacheKey = params[\"cacheKey\"];\n            }\n\n            if (proverUrl && verifierUrl) {\n                return await this.fetchKeys(proverUrl, verifierUrl, cacheKey);\n            }\n\n            if (cacheKey) {\n                return this.getKeys(cacheKey);\n            }\n        }\n        throw Error(\"Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl\");\n    }\n\n    /**\n     * Returns the proving and verifying keys for a specified program from a specified url.\n     *\n     * @param {string} verifierUrl Url of the proving key\n     * @param {string} proverUrl Url the verifying key\n     * @param {string} cacheKey Key to store the keys in the cache\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new AleoKeyProvider object\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.fetchKeys(\"https://testnet3.parameters.aleo.org/transfer_private.prover.2a9a6f2\", \"https://testnet3.parameters.aleo.org/transfer_private.verifier.3a59762\");\n     */\n    async fetchKeys(proverUrl: string, verifierUrl: string, cacheKey?: string): Promise<FunctionKeyPair | Error> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return [ProvingKey.fromBytes(value[0]), VerifyingKey.fromBytes(value[1])];\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                    console.debug(\"Fetching verifying keys \" + verifierUrl);\n                    const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                    this.cache.set(cacheKey, [provingKey.toBytes(), verifyingKey.toBytes()]);\n                    return [provingKey, verifyingKey];\n                }\n            }\n            else {\n                // If cache is disabled, fetch the keys and return them\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                return [provingKey, verifyingKey];\n            }\n        } catch (error) {\n            throw new Error(`Error: ${error} fetching fee proving and verifying keys from ${proverUrl} and ${verifierUrl}.`);\n        }\n    }\n\n    bondPublicKeys(): Promise<FunctionKeyPair | Error> {\n        return this.fetchKeys(CREDITS_PROGRAM_KEYS.bond_public.prover, CREDITS_PROGRAM_KEYS.bond_public.verifier, CREDITS_PROGRAM_KEYS.bond_public.locator)\n    }\n\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair | Error> {\n        return this.fetchKeys(CREDITS_PROGRAM_KEYS.claim_unbond_public.prover, CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier, CREDITS_PROGRAM_KEYS.claim_unbond_public.locator)\n    }\n\n    /**\n     * Returns the proving and verifying keys for the transfer functions in the credits.aleo program\n     * @param {string} visibility Visibility of the transfer function\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the transfer functions\n     *\n     * @example\n     * // Create a new AleoKeyProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    async transferKeys(visibility: string): Promise<FunctionKeyPair | Error> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private.prover, CREDITS_PROGRAM_KEYS.transfer_private.verifier, CREDITS_PROGRAM_KEYS.transfer_private.locator);\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private_to_public.prover, CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier, CREDITS_PROGRAM_KEYS.transfer_private_to_public.locator);\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public.prover, CREDITS_PROGRAM_KEYS.transfer_public.verifier, CREDITS_PROGRAM_KEYS.transfer_public.locator);\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public_to_private.prover, CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier, CREDITS_PROGRAM_KEYS.transfer_public_to_private.locator);\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the join function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    async joinKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.join.prover, CREDITS_PROGRAM_KEYS.join.verifier, CREDITS_PROGRAM_KEYS.join.locator);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the split function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the split function\n     * */\n    async splitKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.split.prover, CREDITS_PROGRAM_KEYS.split.verifier, CREDITS_PROGRAM_KEYS.split.locator);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_private function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePrivateKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_private.prover, CREDITS_PROGRAM_KEYS.fee_private.verifier, CREDITS_PROGRAM_KEYS.fee_private.locator);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_public function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePublicKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_public.prover, CREDITS_PROGRAM_KEYS.fee_public.verifier, CREDITS_PROGRAM_KEYS.fee_public.locator);\n    }\n\n    /**\n     * Gets a verifying key. If the verifying key is for a credits.aleo function, get it from the wasm cache otherwise\n     *\n     * @returns {Promise<VerifyingKey | Error>} Verifying key for the function\n     */\n    // attempt to fetch it from the network\n    async getVerifyingKey(verifierUri: string): Promise<VerifyingKey | Error> {\n        switch (verifierUri) {\n            case CREDITS_PROGRAM_KEYS.bond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.bond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.claim_unbond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_private.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_public.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.inclusion.verifier:\n                return CREDITS_PROGRAM_KEYS.inclusion.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.join.verifier:\n                return CREDITS_PROGRAM_KEYS.join.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.set_validator_state.verifier:\n                return CREDITS_PROGRAM_KEYS.set_validator_state.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.split.verifier:\n                return CREDITS_PROGRAM_KEYS.split.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.unbond_delegator_as_validator.verifier:\n                return CREDITS_PROGRAM_KEYS.unbond_delegator_as_validator.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.unbond_public.verifyingKey();\n            default:\n                try {\n                    /// Try to fetch the verifying key from the network as a string\n                    const response = await get(verifierUri);\n                    const text = await response.text();\n                    return <VerifyingKey>VerifyingKey.fromString(text);\n                } catch (e) {\n                    /// If that fails, try to fetch the verifying key from the network as bytes\n                    try {\n                        return <VerifyingKey>VerifyingKey.fromBytes(await this.fetchBytes(verifierUri));\n                    } catch (inner) {\n                        return new Error(\"Invalid verifying key. Error: \" + inner);\n                    }\n                }\n        }\n    }\n\n    unBondPublicKeys(): Promise<FunctionKeyPair | Error> {\n        return this.fetchKeys(CREDITS_PROGRAM_KEYS.unbond_public.prover, CREDITS_PROGRAM_KEYS.unbond_public.verifier, CREDITS_PROGRAM_KEYS.unbond_public.locator);\n    }\n}\n\nexport {AleoKeyProvider, AleoKeyProviderParams, AleoKeyProviderInitParams, CachedKeyPair, FunctionKeyPair, FunctionKeyProvider, KeySearchParams}\n","import { FunctionKeyProvider, KeySearchParams, FunctionKeyPair, CachedKeyPair, ProvingKey, VerifyingKey, CREDITS_PROGRAM_KEYS, PRIVATE_TRANSFER, PRIVATE_TO_PUBLIC_TRANSFER, PUBLIC_TRANSFER, PUBLIC_TO_PRIVATE_TRANSFER} from \"./index\";\n\n/**\n * Search parameters for the offline key provider. This class implements the KeySearchParams interface and includes\n * a convenience method for creating a new instance of this class for each function of the credits.aleo program.\n *\n * @example\n * // If storing a key for a custom program function\n * offlineSearchParams = new OfflineSearchParams(\"myprogram.aleo/myfunction\");\n *\n * // If storing a key for a credits.aleo program function\n * unbondDelegatorAsValidatorSearchParams = OfflineSearchParams.unbondDelegatorAsValidatorKeyParams();\n */\nclass OfflineSearchParams implements KeySearchParams {\n    cacheKey: string | undefined;\n    verifyCreditsKeys: boolean | undefined;\n\n    /**\n     * Create a new OfflineSearchParams instance.\n     *\n     * @param {string} cacheKey - Key used to store the local function proving & verifying keys. This should be stored\n     * under the naming convention \"programName/functionName\" (i.e. \"myprogram.aleo/myfunction\")\n     * @param {boolean} verifyCreditsKeys - Whether to verify the keys against the credits.aleo program,\n     * defaults to false, but should be set to true if using keys from the credits.aleo program\n     */\n    constructor(cacheKey: string, verifyCreditsKeys = false) {\n        this.cacheKey = cacheKey;\n        this.verifyCreditsKeys = verifyCreditsKeys;\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the bond_public function of the credits.aleo program.\n     */\n    static bondPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.bond_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the claim_unbond_public function of the\n     */\n    static claimUnbondPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.claim_unbond_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the fee_private function of the credits.aleo program.\n     */\n    static feePrivateKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.fee_private.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the fee_public function of the credits.aleo program.\n     */\n    static feePublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.fee_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the inclusion prover function.\n     */\n    static inclusionKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.inclusion.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the join function of the credits.aleo program.\n     */\n    static joinKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.join.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the set_validator_state function of the credits.aleo program.\n     */\n    static setValidatorStateKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.set_validator_state.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the split function of the credits.aleo program.\n     */\n    static splitKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.split.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_private function of the credits.aleo program.\n     */\n    static transferPrivateKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_private.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_private_to_public function of the credits.aleo program.\n     */\n    static transferPrivateToPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_private_to_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_public function of the credits.aleo program.\n     */\n    static transferPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_public_to_private function of the credits.aleo program.\n     */\n    static transferPublicToPrivateKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_public_to_private.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the unbond_delegator_as_validator function of the credits.aleo program.\n     */\n    static unbondDelegatorAsValidatorKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.unbond_delegator_as_validator.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the unbond_delegator function of the credits.aleo program.\n     */\n    static unbondPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.unbond_public.locator, true);\n    }\n}\n\n/**\n * A key provider meant for building transactions offline on devices such as hardware wallets. This key provider is not\n * able to contact the internet for key material and instead relies on the user to insert Aleo function proving &\n * verifying keys from local storage prior to usage.\n *\n * @example\n * // Create an offline program manager\n * const programManager = new ProgramManager();\n *\n * // Create a temporary account for the execution of the program\n * const account = new Account();\n * programManager.setAccount(account);\n *\n * // Create the proving keys from the key bytes on the offline machine\n * console.log(\"Creating proving keys from local key files\");\n * const program = \"program hello_hello.aleo; function hello: input r0 as u32.public; input r1 as u32.private; add r0 r1 into r2; output r2 as u32.private;\";\n * const myFunctionProver = await getLocalKey(\"/path/to/my/function/hello_hello.prover\");\n * const myFunctionVerifier = await getLocalKey(\"/path/to/my/function/hello_hello.verifier\");\n * const feePublicProvingKeyBytes = await getLocalKey(\"/path/to/credits.aleo/feePublic.prover\");\n *\n * myFunctionProvingKey = ProvingKey.fromBytes(myFunctionProver);\n * myFunctionVerifyingKey = VerifyingKey.fromBytes(myFunctionVerifier);\n * const feePublicProvingKey = ProvingKey.fromBytes(feePublicKeyBytes);\n *\n * // Create an offline key provider\n * console.log(\"Creating offline key provider\");\n * const offlineKeyProvider = new OfflineKeyProvider();\n *\n * // Cache the keys\n * // Cache the proving and verifying keys for the custom hello function\n * OfflineKeyProvider.cacheKeys(\"hello_hello.aleo/hello\", myFunctionProvingKey, myFunctionVerifyingKey);\n *\n * // Cache the proving key for the fee_public function (the verifying key is automatically cached)\n * OfflineKeyProvider.insertFeePublicKey(feePublicProvingKey);\n *\n * // Create an offline query using the latest state root in order to create the inclusion proof\n * const offlineQuery = new OfflineQuery(\"latestStateRoot\");\n *\n * // Insert the key provider into the program manager\n * programManager.setKeyProvider(offlineKeyProvider);\n *\n * // Create the offline search params\n * const offlineSearchParams = new OfflineSearchParams(\"hello_hello.aleo/hello\");\n *\n * // Create the offline transaction\n * const offlineExecuteTx = <Transaction>await this.buildExecutionTransaction(\"hello_hello.aleo\", \"hello\", 1, false, [\"5u32\", \"5u32\"], undefined, offlineSearchParams, undefined, undefined, undefined, undefined, offlineQuery, program);\n *\n * // Broadcast the transaction later on a machine with internet access\n * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n * const txId = await networkClient.broadcastTransaction(offlineExecuteTx);\n */\nclass OfflineKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n\n    constructor() {\n        this.cache = new Map<string, CachedKeyPair>();\n    }\n\n    /**\n     * Get bond_public function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the bond_public function\n     */\n    bondPublicKeys(): Promise<FunctionKeyPair | Error> {\n        return this.functionKeys(OfflineSearchParams.bondPublicKeyParams());\n    };\n\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    };\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the unbond_public function\n     */\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair | Error> {\n        return this.functionKeys(OfflineSearchParams.claimUnbondPublicKeyParams());\n    };\n\n    /**\n     * Get arbitrary function key from the offline key provider cache.\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * /// First cache the keys from local offline resources\n     * const offlineKeyProvider = new OfflineKeyProvider();\n     * const myFunctionVerifyingKey = VerifyingKey.fromString(\"verifier...\");\n     * const myFunctionProvingKeyBytes = await readBinaryFile('./resources/myfunction.prover');\n     * const myFunctionProvingKey = ProvingKey.fromBytes(myFunctionProvingKeyBytes);\n     *\n     * /// Cache the keys for future use with a memorable locator\n     * offlineKeyProvider.cacheKeys(\"myprogram.aleo/myfunction\", [myFunctionProvingKey, myFunctionVerifyingKey]);\n     *\n     * /// When they're needed, retrieve the keys from the cache\n     *\n     * /// First create a search parameter object with the same locator used to cache the keys\n     * const keyParams = new OfflineSearchParams(\"myprogram.aleo/myfunction\");\n     *\n     * /// Then retrieve the keys\n     * const [myFunctionProver, myFunctionVerifier] = await offlineKeyProvider.functionKeys(keyParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error> {\n        return new Promise((resolve, reject) => {\n            if (params === undefined) {\n                reject(new Error(\"No search parameters provided, cannot retrieve keys\"));\n            } else {\n                const keyId = params.cacheKey;\n                const verifyCreditsKeys = params.verifyCreditsKeys;\n                if (this.cache.has(keyId)) {\n                    const [provingKeyBytes, verifyingKeyBytes] = this.cache.get(keyId) as CachedKeyPair;\n                    const provingKey = ProvingKey.fromBytes(provingKeyBytes);\n                    const verifyingKey = VerifyingKey.fromBytes(verifyingKeyBytes);\n                    if (verifyCreditsKeys) {\n                        const keysMatchExpected = this.verifyCreditsKeys(keyId, provingKey, verifyingKey)\n                        if (!keysMatchExpected) {\n                            reject (new Error(`Cached keys do not match expected keys for ${keyId}`));\n                        }\n                    }\n                    resolve([provingKey, verifyingKey]);\n                } else {\n                    reject(new Error(\"Keys not found in cache for \" + keyId));\n                }\n            }\n        });\n    };\n\n    /**\n     * Determines if the keys for a given credits function match the expected keys.\n     *\n     * @returns {boolean} Whether the keys match the expected keys\n     */\n    verifyCreditsKeys(locator: string, provingKey: ProvingKey, verifyingKey: VerifyingKey): boolean {\n        switch (locator) {\n            case CREDITS_PROGRAM_KEYS.bond_public.locator:\n                return provingKey.isBondPublicProver() && verifyingKey.isBondPublicVerifier();\n            case CREDITS_PROGRAM_KEYS.claim_unbond_public.locator:\n                return provingKey.isClaimUnbondPublicProver() && verifyingKey.isClaimUnbondPublicVerifier();\n            case CREDITS_PROGRAM_KEYS.fee_private.locator:\n                return provingKey.isFeePrivateProver() && verifyingKey.isFeePrivateVerifier();\n            case CREDITS_PROGRAM_KEYS.fee_public.locator:\n                return provingKey.isFeePublicProver() && verifyingKey.isFeePublicVerifier();\n            case CREDITS_PROGRAM_KEYS.inclusion.locator:\n                return provingKey.isInclusionProver() && verifyingKey.isInclusionVerifier();\n            case CREDITS_PROGRAM_KEYS.join.locator:\n                return provingKey.isJoinProver() && verifyingKey.isJoinVerifier();\n            case CREDITS_PROGRAM_KEYS.set_validator_state.locator:\n                return provingKey.isSetValidatorStateProver() && verifyingKey.isSetValidatorStateVerifier();\n            case CREDITS_PROGRAM_KEYS.split.locator:\n                return provingKey.isSplitProver() && verifyingKey.isSplitVerifier();\n            case CREDITS_PROGRAM_KEYS.transfer_private.locator:\n                return provingKey.isTransferPrivateProver() && verifyingKey.isTransferPrivateVerifier();\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.locator:\n                return provingKey.isTransferPrivateToPublicProver() && verifyingKey.isTransferPrivateToPublicVerifier();\n            case CREDITS_PROGRAM_KEYS.transfer_public.locator:\n                return provingKey.isTransferPublicProver() && verifyingKey.isTransferPublicVerifier();\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.locator:\n                return provingKey.isTransferPublicToPrivateProver() && verifyingKey.isTransferPublicToPrivateVerifier();\n            case CREDITS_PROGRAM_KEYS.unbond_delegator_as_validator.locator:\n                return provingKey.isUnbondDelegatorAsValidatorProver() && verifyingKey.isUnbondDelegatorAsValidatorVerifier();\n            case CREDITS_PROGRAM_KEYS.unbond_public.locator:\n                return provingKey.isUnbondPublicProver() && verifyingKey.isUnbondPublicVerifier();\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * Get fee_private function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair | Error> {\n        return this.functionKeys(OfflineSearchParams.feePrivateKeyParams());\n    };\n\n    /**\n     * Get fee_public function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair | Error> {\n        return this.functionKeys(OfflineSearchParams.feePublicKeyParams());\n    };\n\n    /**\n     * Get join function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair | Error> {\n        return this.functionKeys(OfflineSearchParams.joinKeyParams());\n    };\n\n    /**\n     * Get split function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair | Error> {\n        return this.functionKeys(OfflineSearchParams.splitKeyParams());\n    };\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program.\n     *\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new OfflineKeyProvider\n     * const offlineKeyProvider = new OfflineKeyProvider();\n     *\n     * // Cache the keys for future use with the official locator\n     * const transferPublicProvingKeyBytes = await readBinaryFile('./resources/transfer_public.prover.a74565e');\n     * const transferPublicProvingKey = ProvingKey.fromBytes(transferPublicProvingKeyBytes);\n     *\n     * // Cache the transfer_public keys for future use with the OfflinKeyProvider's convenience method for\n     * // transfer_public (the verifying key will be cached automatically)\n     * offlineKeyProvider.insertTransferPublicKeys(transferPublicProvingKey);\n     *\n     * /// When they're needed, retrieve the keys from the cache\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair | Error> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPrivateKeyParams());\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPrivateToPublicKeyParams());\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPublicKeyParams());\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPublicToPrivateKeyParams());\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    };\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    async unBondPublicKeys(): Promise<FunctionKeyPair | Error> {\n        return this.functionKeys(OfflineSearchParams.unbondPublicKeyParams());\n    };\n\n    /**\n     * Insert the proving and verifying keys for the bond_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for bond_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertBondPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isBondPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.bond_public.locator, [provingKey.toBytes(), VerifyingKey.bondPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for bond_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the claim_unbond_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for claim_unbond_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertClaimUnbondPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isClaimUnbondPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.claim_unbond_public.locator, [provingKey.toBytes(), VerifyingKey.claimUnbondPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for claim_unbond_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the fee_private function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for fee_private before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertFeePrivateKeys(provingKey: ProvingKey) {\n        if (provingKey.isFeePrivateProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.fee_private.locator, [provingKey.toBytes(), VerifyingKey.feePrivateVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for fee_private\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the fee_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for fee_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertFeePublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isFeePublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.fee_public.locator, [provingKey.toBytes(), VerifyingKey.feePublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for fee_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the join function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for join before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertJoinKeys(provingKey: ProvingKey) {\n        if (provingKey.isJoinProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.join.locator, [provingKey.toBytes(), VerifyingKey.joinVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for join\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the set_validator_state function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for set_validator_state before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertSetValidatorStateKeys(provingKey: ProvingKey) {\n        if (provingKey.isSetValidatorStateProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.set_validator_state.locator, [provingKey.toBytes(), VerifyingKey.setValidatorStateVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for set_validator_state\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the split function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for split before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertSplitKeys(provingKey: ProvingKey) {\n        if (provingKey.isSplitProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.split.locator, [provingKey.toBytes(), VerifyingKey.splitVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for split\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the transfer_private function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_private before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPrivateKeys(provingKey: ProvingKey) {\n        if (provingKey.isTransferPrivateProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.transfer_private.locator, [provingKey.toBytes(), VerifyingKey.transferPrivateVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_private\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the transfer_private_to_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_private_to_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPrivateToPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isTransferPrivateToPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.transfer_private_to_public.locator, [provingKey.toBytes(), VerifyingKey.transferPrivateToPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_private_to_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the transfer_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isTransferPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.transfer_public.locator, [provingKey.toBytes(), VerifyingKey.transferPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the transfer_public_to_private function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_public_to_private before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPublicToPrivateKeys(provingKey: ProvingKey) {\n        if (provingKey.isTransferPublicToPrivateProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.transfer_public_to_private.locator, [provingKey.toBytes(), VerifyingKey.transferPublicToPrivateVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_public_to_private\");\n        }\n    }\n\n    insertUnbondDelegatorAsValidatorKeys(provingKey: ProvingKey) {\n        if (provingKey.isUnbondDelegatorAsValidatorProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.unbond_delegator_as_validator.locator, [provingKey.toBytes(), VerifyingKey.unbondDelegatorAsValidatorVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for unbond_delegator_as_validator\");\n        }\n    }\n\n    insertUnbondPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isUnbondPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.unbond_public.locator, [provingKey.toBytes(), VerifyingKey.unbondPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for unbond_public\");\n        }\n    }\n}\n\n\nexport {OfflineKeyProvider, OfflineSearchParams}\n","import { logAndThrow, RecordPlaintext } from \"./index\";\nimport { Account } from \"./account\";\nimport { AleoNetworkClient } from \"./network-client\";\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface RecordSearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * Interface for a record provider. A record provider is used to find records for use in deployment and execution\n * transactions on the Aleo Network. A default implementation is provided by the NetworkRecordProvider class. However,\n * a custom implementation can be provided (say if records are synced locally to a database from the network) by\n * implementing this interface.\n */\ninterface RecordProvider {\n    account: Account\n\n    /**\n     * Find a credits.aleo record with a given number of microcredits from the chosen provider\n     *\n     * @param {number} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // A class implementing record provider can be used to find a record with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, its nonce should be added to the nonces array so that it is not\n     * // found again if a subsequent search is performed\n     * const record2 = await recordProvider.findCreditsRecord(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    findCreditsRecord(microcredits: number, unspent: boolean,  nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error>;\n\n    /**\n     * Find a list of credit.aleo records with a given number of microcredits from the chosen provider\n     *\n     * @param {number} microcreditAmounts A list of separate microcredit amounts to search for (e.g. [5000, 100000])\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext[] | Error>} A list of records with a value greater or equal to the amounts specified if such records exist, otherwise an error\n     *\n     * @example\n     * // A class implementing record provider can be used to find a record with a given number of microcredits\n     * const records = await recordProvider.findCreditsRecords([5000, 5000], true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces array so that it is not\n     * // found again if a subsequent search is performed\n     * const nonces = [];\n     * records.forEach(record => { nonces.push(record.nonce()) });\n     * const records2 = await recordProvider.findCreditsRecord(5000, true, nonces);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    findCreditsRecords(microcreditAmounts: number[], unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error>;\n\n    /**\n     * Find an arbitrary record\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // The RecordSearchParams interface can be used to create parameters for custom record searches which can then\n     * // be passed to the record provider. An example of how this would be done for the credits.aleo program is shown\n     * // below.\n     *\n     * class CustomRecordSearch implements RecordSearchParams {\n     *     startHeight: number;\n     *     endHeight: number;\n     *     amount: number;\n     *     program: string;\n     *     recordName: string;\n     *     constructor(startHeight: number, endHeight: number, credits: number, maxRecords: number, programName: string, recordName: string) {\n     *         this.startHeight = startHeight;\n     *         this.endHeight = endHeight;\n     *         this.amount = amount;\n     *         this.program = programName;\n     *         this.recordName = recordName;\n     *     }\n     * }\n     *\n     * const params = new CustomRecordSearch(0, 100, 5000, \"credits.aleo\", \"credits\");\n     *\n     * const record = await recordProvider.findRecord(true, [], params);\n     */\n    findRecord(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error>;\n\n    /**\n     * Find multiple records from arbitrary programs\n     *\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * // The RecordSearchParams interface can be used to create parameters for custom record searches which can then\n     * // be passed to the record provider. An example of how this would be done for the credits.aleo program is shown\n     * // below.\n     *\n     * class CustomRecordSearch implements RecordSearchParams {\n     *     startHeight: number;\n     *     endHeight: number;\n     *     amount: number;\n     *     maxRecords: number;\n     *     programName: string;\n     *     recordName: string;\n     *     constructor(startHeight: number, endHeight: number, credits: number, maxRecords: number, programName: string, recordName: string) {\n     *         this.startHeight = startHeight;\n     *         this.endHeight = endHeight;\n     *         this.amount = amount;\n     *         this.maxRecords = maxRecords;\n     *         this.programName = programName;\n     *         this.recordName = recordName;\n     *     }\n     * }\n     *\n     * const params = new CustomRecordSearch(0, 100, 5000, 2, \"credits.aleo\", \"credits\");\n     * const records = await recordProvider.findRecord(true, [], params);\n     */\n    findRecords(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error>;\n}\n\n/**\n * A record provider implementation that uses the official Aleo API to find records for usage in program execution and\n * deployment, wallet functionality, and other use cases.\n */\nclass NetworkRecordProvider implements RecordProvider {\n    account: Account;\n    networkClient: AleoNetworkClient;\n    constructor(account: Account, networkClient: AleoNetworkClient) {\n        this.account = account;\n        this.networkClient = networkClient;\n    }\n\n    /**\n     * Set the account used to search for records\n     *\n     * @param {Account} account The account to use for searching for records\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Find a list of credit records with a given number of microcredits by via the official Aleo API\n     *\n     * @param {number[]} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // Create a new NetworkRecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // The record provider can be used to find records with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not\n     * // found again if a subsequent search is performed\n     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * */\n    async findCreditsRecords(microcredits: number[], unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error> {\n        let startHeight = 0;\n        let endHeight = 0;\n\n        if (searchParameters) {\n            if (\"startHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                startHeight = searchParameters[\"startHeight\"];\n            }\n\n            if (\"endHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                endHeight = searchParameters[\"endHeight\"];\n            }\n        }\n\n        // If the end height is not specified, use the current block height\n        if (endHeight == 0) {\n            const end = await this.networkClient.getLatestHeight();\n            if (end instanceof Error) {\n                throw logAndThrow(\"Unable to get current block height from the network\")\n            }\n            endHeight = end;\n        }\n\n        // If the start height is greater than the end height, throw an error\n        if (startHeight >= endHeight) {\n            throw logAndThrow(\"Start height must be less than end height\");\n        }\n\n        return await this.networkClient.findUnspentRecords(startHeight, endHeight, this.account.privateKey(), microcredits, undefined, nonces);\n    }\n\n    /**\n     * Find a credit record with a given number of microcredits by via the official Aleo API\n     *\n     * @param {number} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // Create a new NetworkRecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // The record provider can be used to find records with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not\n     * // found again if a subsequent search is performed\n     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    async findCreditsRecord(microcredits: number, unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        const records = await this.findCreditsRecords([microcredits], unspent, nonces, searchParameters);\n        if (!(records instanceof Error) && records.length > 0) {\n            return records[0];\n        }\n        console.error(\"Record not found with error:\", records);\n        return new Error(\"Record not found\");\n    }\n\n    /**\n     * Find an arbitrary record. WARNING: This function is not implemented yet and will throw an error.\n     */\n    async findRecord(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Find multiple arbitrary records. WARNING: This function is not implemented yet and will throw an error.\n     */\n    async findRecords(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n}\n\n/**\n * BlockHeightSearch is a RecordSearchParams implementation that allows for searching for records within a given\n * block height range.\n *\n * @example\n * // Create a new BlockHeightSearch\n * const params = new BlockHeightSearch(89995, 99995);\n *\n * // Create a new NetworkRecordProvider\n * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n * const keyProvider = new AleoKeyProvider();\n * const recordProvider = new NetworkRecordProvider(account, networkClient);\n *\n * // The record provider can be used to find records with a given number of microcredits and the block height search\n * // can be used to find records within a given block height range\n * const record = await recordProvider.findCreditsRecord(5000, true, [], params);\n *\n */\nclass BlockHeightSearch implements RecordSearchParams {\n    startHeight: number;\n    endHeight: number;\n    constructor(startHeight: number, endHeight: number) {\n        this.startHeight = startHeight;\n        this.endHeight = endHeight;\n    }\n}\n\nexport { BlockHeightSearch, NetworkRecordProvider, RecordProvider, RecordSearchParams};\n","// Experimental example where SDK manages worker\n\nimport { wrap } from \"comlink\";\nimport { WorkerAPI } from './worker';\n\nlet singletonWorker: WorkerAPI | null = null;\n\nconst createAleoWorker = (): WorkerAPI => {\n    if (!singletonWorker) {\n        const worker = new Worker(new URL(\"worker.js\", import.meta.url), {\n            type: \"module\",\n        });\n        singletonWorker = wrap<WorkerAPI>(worker);\n    }\n    return singletonWorker;\n};\n\nexport { createAleoWorker };","import {\n    Account,\n    AleoKeyProvider,\n    AleoNetworkClient,\n    ExecutionResponse,\n    FunctionKeyProvider,\n    FunctionKeyPair,\n    OfflineQuery,\n    KeySearchParams,\n    RecordPlaintext,\n    RecordProvider,\n    RecordSearchParams,\n    PrivateKey,\n    Program,\n    ProgramImports,\n    ProvingKey,\n    VerifyingKey,\n    Transaction,\n    PRIVATE_TRANSFER_TYPES,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n    ProgramManagerBase as WasmProgramManager, verifyFunctionExecution, AleoKeyProviderParams, CREDITS_PROGRAM_KEYS,\n} from \"./index\";\nimport {Execution} from \"@aleohq/wasm/dist/crates/aleo_wasm\";\n\n/**\n * Represents the options for executing a transaction in the Aleo network.\n * This interface is used to specify the parameters required for building and submitting an execution transaction.\n *\n * @property {string} programName - The name of the program containing the function to be executed.\n * @property {string} functionName - The name of the function to execute within the program.\n * @property {number} fee - The fee to be paid for the transaction.\n * @property {boolean} privateFee - If true, uses a private record to pay the fee; otherwise, uses the account's public credit balance.\n * @property {string[]} inputs - The inputs to the function being executed.\n * @property {RecordSearchParams} [recordSearchParams] - Optional parameters for searching for a record to pay the execution transaction fee.\n * @property {KeySearchParams} [keySearchParams] - Optional parameters for finding the matching proving & verifying keys for the function.\n * @property {string | RecordPlaintext} [feeRecord] - Optional fee record to use for the transaction.\n * @property {ProvingKey} [provingKey] - Optional proving key to use for the transaction.\n * @property {VerifyingKey} [verifyingKey] - Optional verifying key to use for the transaction.\n * @property {PrivateKey} [privateKey] - Optional private key to use for the transaction.\n * @property {OfflineQuery} [offlineQuery] - Optional offline query if creating transactions in an offline environment.\n * @property {string | Program} [program] - Optional program source code to use for the transaction.\n * @property {ProgramImports} [imports] - Optional programs that the program being executed imports.\n */\ninterface ExecuteOptions {\n    programName: string;\n    functionName: string;\n    fee: number;\n    privateFee: boolean;\n    inputs: string[];\n    recordSearchParams?: RecordSearchParams;\n    keySearchParams?: KeySearchParams;\n    feeRecord?: string | RecordPlaintext;\n    provingKey?: ProvingKey;\n    verifyingKey?: VerifyingKey;\n    privateKey?: PrivateKey;\n    offlineQuery?: OfflineQuery;\n    program?: string | Program;\n    imports?: ProgramImports;\n}\n\n/**\n * The ProgramManager class is used to execute and deploy programs on the Aleo network and create value transfers.\n */\nclass ProgramManager {\n    account: Account | undefined;\n    keyProvider: FunctionKeyProvider;\n    host: string;\n    networkClient: AleoNetworkClient;\n    recordProvider: RecordProvider | undefined;\n\n    /** Create a new instance of the ProgramManager\n     *\n     * @param { string | undefined } host A host uri running the official Aleo API\n     * @param { FunctionKeyProvider | undefined } keyProvider A key provider that implements {@link FunctionKeyProvider} interface\n     * @param { RecordProvider | undefined } recordProvider A record provider that implements {@link RecordProvider} interface\n     */\n    constructor(host?: string | undefined, keyProvider?: FunctionKeyProvider | undefined, recordProvider?: RecordProvider | undefined) {\n        this.host = host ? host : 'https://api.explorer.aleo.org/v1';\n        this.networkClient = new AleoNetworkClient(this.host);\n        \n        this.keyProvider = keyProvider ? keyProvider : new AleoKeyProvider();\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Set the account to use for transaction submission to the Aleo network\n     *\n     * @param {Account} account Account to use for transaction submission\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Set the key provider that provides the proving and verifying keys for programs\n     *\n     * @param {FunctionKeyProvider} keyProvider\n     */\n    setKeyProvider(keyProvider: FunctionKeyProvider) {\n        this.keyProvider = keyProvider;\n    }\n\n    /**\n     * Set the host peer to use for transaction submission to the Aleo network\n     *\n     * @param host {string} Peer url to use for transaction submission\n     */\n    setHost(host: string) {\n        this.host = host;\n        this.networkClient.setHost(host);\n    }\n\n    /**\n     * Set the record provider that provides records for transactions\n     *\n     * @param {RecordProvider} recordProvider\n     */\n    setRecordProvider(recordProvider: RecordProvider) {\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Deploy an Aleo program to the Aleo network\n     *\n     * @param {string} program Program source code\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to use\n     * pay the deployment fee\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {string | Error} The transaction id of the deployed program or a failure message from the network\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for deployments\n     * const program = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     *\n     * // Define a fee in credits\n     * const fee = 1.2;\n     *\n     * // Deploy the program\n     * const tx_id = await programManager.deploy(program, fee);\n     *\n     * // Verify the transaction was successful\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async deploy(\n        program: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        feeRecord?: string | RecordPlaintext,\n        privateKey?: PrivateKey,\n    ): Promise<string | Error> {\n        // Ensure the program is valid and does not exist on the network\n        try {\n            const programObject = Program.fromString(program);\n            let programSource;\n            try {\n                programSource = await this.networkClient.getProgram(programObject.id());\n            } catch (e) {\n                // Program does not exist on the network, deployment can proceed\n                console.log(`Program ${programObject.id()} does not exist on the network, deploying...`);\n            }\n            if (typeof programSource == \"string\") {\n                throw (`Program ${programObject.id()} already exists on the network, please rename your program`);\n            }\n        } catch (e) {\n            throw logAndThrow(`Error validating program: ${e}`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let deploymentPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            deploymentPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof deploymentPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n        } catch (e) {\n            throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build a deployment transaction and submit it to the network\n        const tx = await WasmProgramManager.buildDeploymentTransaction(deploymentPrivateKey, program, fee, feeRecord, this.host, imports, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction | Error>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const transaction = await programManager.buildExecutionTransaction({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   fee: 0.020,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async buildExecutionTransaction(options: ExecuteOptions): Promise<Transaction | Error> {\n        // Destructure the options object to access the parameters\n        const {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            recordSearchParams,\n            keySearchParams,\n            privateKey,\n            offlineQuery\n        } = options;\n\n        let feeRecord = options.feeRecord;\n        let provingKey = options.provingKey;\n        let verifyingKey = options.verifyingKey;\n        let program = options.program;\n        let imports = options.imports;\n\n        // Ensure the function exists on the network\n        if (program === undefined) {\n            try {\n                program = <string>(await this.networkClient.getProgram(programName));\n            } catch (e) {\n                throw logAndThrow(`Error finding ${programName}. Network response: '${e}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`);\n            }\n        } else if (program instanceof Program) {\n            program = program.toString();\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the fee proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Resolve the program imports if they exist\n        const numberOfImports = Program.fromString(program).getImports().length;\n        if (numberOfImports > 0 && !imports) {\n            try {\n                imports = <ProgramImports>await this.networkClient.getProgramImports(programName);\n            } catch (e) {\n                throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n            }\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildExecutionTransaction(executionPrivateKey, program, functionName, inputs, fee, feeRecord, this.host, imports, provingKey, verifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction | Error>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const transaction = await programManager.execute({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   fee: 0.020,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async execute(options: ExecuteOptions): Promise<string | Error> {\n        const tx = <Transaction>await this.buildExecutionTransaction(options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Run an Aleo program in offline mode\n     *\n     * @param {string} program Program source code containing the function to be executed\n     * @param {string} function_name Function name to execute\n     * @param {string[]} inputs Inputs to the function\n     * @param {number} proveExecution Whether to prove the execution of the function and return an execution transcript\n     * that contains the proof.\n     * @param {string[] | undefined} imports Optional imports to the program\n     * @param {KeySearchParams | undefined} keySearchParams Optional parameters for finding the matching proving &\n     * verifying keys for the function\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * import { Account, Program } from '@aleohq/sdk';\n     *\n     * /// Create the source for the \"helloworld\" program\n     * const program = \"program helloworld.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager();\n     *\n     * /// Create a temporary account for the execution of the program\n     * const account = new Account();\n     * programManager.setAccount(account);\n     *\n     * /// Get the response and ensure that the program executed correctly\n     * const executionResponse = await programManager.executeOffline(program, \"hello\", [\"5u32\", \"5u32\"]);\n     * const result = executionResponse.getOutputs();\n     * assert(result === [\"10u32\"]);\n     */\n    async run(\n        program: string,\n        function_name: string,\n        inputs: string[],\n        proveExecution: boolean,\n        imports?: ProgramImports,\n        keySearchParams?: KeySearchParams,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<ExecutionResponse> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Run the program offline and return the result\n        console.log(\"Running program offline\")\n        console.log(\"Proving key: \", provingKey);\n        console.log(\"Verifying key: \", verifyingKey);\n        return WasmProgramManager.executeFunctionOffline(executionPrivateKey, program, function_name, inputs, proveExecution, false, imports, provingKey, verifyingKey, this.host, offlineQuery);\n    }\n\n    /**\n     * Join two credits records into a single credits record\n     *\n     * @param {RecordPlaintext | string} recordOne First credits record to join\n     * @param {RecordPlaintext | string} recordTwo Second credits record to join\n     * @param {number} fee Fee in credits pay for the join transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the fee record to use\n     * to pay the fee for the join transaction\n     * @param {RecordPlaintext | string | undefined} feeRecord Fee record to use for the join transaction\n     * @param {PrivateKey | undefined} privateKey Private key to use for the join transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     */\n    async join(\n        recordOne: RecordPlaintext | string,\n        recordTwo: RecordPlaintext | string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams | undefined,\n        feeRecord?: RecordPlaintext | string | undefined,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let joinKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            joinKeys = <FunctionKeyPair>await this.keyProvider.joinKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [joinProvingKey, joinVerifyingKey] = joinKeys;\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Validate the records provided are valid plaintext records\n        try {\n            recordOne = recordOne instanceof RecordPlaintext ? recordOne : RecordPlaintext.fromString(recordOne);\n            recordTwo = recordTwo instanceof RecordPlaintext ? recordTwo : RecordPlaintext.fromString(recordTwo);\n        } catch (e) {\n            throw logAndThrow('Records provided are not valid. Please ensure they are valid plaintext records.')\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildJoinTransaction(executionPrivateKey, recordOne, recordTwo, fee, feeRecord, this.host, joinProvingKey, joinVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Split credits into two new credits records\n     *\n     * @param {number} splitAmount Amount in microcredits to split from the original credits record\n     * @param {RecordPlaintext | string} amountRecord Amount record to use for the split transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the split transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * const record = \"{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 4106205762862305308495708971985748592380064201230396559307556388725936304984group.public}\"\n     * const tx_id = await programManager.split(25000000, record);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async split(splitAmount: number, amountRecord: RecordPlaintext | string, privateKey?: PrivateKey, offlineQuery?: OfflineQuery): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the split keys from the key provider\n        let splitKeys;\n        try {\n            splitKeys = <FunctionKeyPair>await this.keyProvider.splitKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [splitProvingKey, splitVerifyingKey] = splitKeys;\n\n        // Validate the record to be split\n        try {\n            amountRecord = amountRecord instanceof RecordPlaintext ? amountRecord : RecordPlaintext.fromString(amountRecord);\n        } catch (e) {\n            throw logAndThrow(\"Record provided is not valid. Please ensure it is a valid plaintext record.\");\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildSplitTransaction(executionPrivateKey, splitAmount, amountRecord, this.host, splitProvingKey, splitVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Pre-synthesize proving and verifying keys for a program\n     *\n     * @param program {string} The program source code to synthesize keys for\n     * @param function_id {string} The function id to synthesize keys for\n     * @param inputs {Array<string>}  Sample inputs to the function\n     * @param privateKey {PrivateKey | undefined} Optional private key to use for the key synthesis\n     *\n     * @returns {Promise<FunctionKeyPair | Error>}\n     */\n    async synthesizeKeys(\n        program: string,\n        function_id: string,\n        inputs: Array<string>,\n        privateKey?: PrivateKey,\n    ): Promise<FunctionKeyPair | Error> {\n        // Resolve the program imports if they exist\n        let imports;\n\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\") {\n            if (typeof this.account !== \"undefined\") {\n                executionPrivateKey = this.account.privateKey();\n            } else {\n                executionPrivateKey = new PrivateKey();\n            }\n        }\n\n        // Attempt to run an offline execution of the program and extract the proving and verifying keys\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n            const keyPair = await WasmProgramManager.synthesizeKeyPair(\n                executionPrivateKey,\n                program,\n                function_id,\n                inputs,\n                imports\n            );\n            return [<ProvingKey>keyPair.provingKey(), <VerifyingKey>keyPair.verifyingKey()];\n        } catch (e) {\n            throw logAndThrow(`Could not synthesize keys - error ${e}. Please ensure the program is valid and the inputs are correct.`);\n        }\n    }\n\n    /**\n     * Build a transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async buildTransferTransaction(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction | Error> {\n        // Validate the transfer type\n        transferType = <string>validateTransferType(transferType);\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let transferKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            transferKeys = <FunctionKeyPair>await this.keyProvider.transferKeys(transferType);\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [transferProvingKey, transferVerifyingKey] = transferKeys;\n\n        // Get the amount and fee record from the account if it is not provided in the parameters\n        try {\n            // Track the nonces of the records found so no duplicate records are used\n            const nonces: string[] = [];\n            if (requiresAmountRecord(transferType)) {\n                // If the transfer type is private and requires an amount record, get it from the record provider\n                amountRecord = <RecordPlaintext>await this.getCreditsRecord(fee, [], amountRecord, recordSearchParams);\n                nonces.push(amountRecord.nonce());\n            } else {\n                amountRecord = undefined;\n            }\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, nonces, feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildTransferTransaction(executionPrivateKey, amount, recipient, transferType, amountRecord, fee, feeRecord, this.host, transferProvingKey, transferVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Build a transfer_public transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async buildTransferPublicTransaction(\n        amount: number,\n        recipient: string,\n        fee: number,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction | Error> {\n        return this.buildTransferTransaction(amount, recipient, \"public\", fee, false, undefined, undefined, undefined, privateKey, offlineQuery);\n    }\n\n    /**\n     * Transfer credits to another account\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async transfer(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<string | Error> {\n        const tx = <Transaction>await this.buildTransferTransaction(amount, recipient, transferType, fee, privateFee, recordSearchParams, amountRecord, feeRecord, privateKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build transaction to bond credits to a staking committee for later submission to the Aleo Network\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondPublic(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", 2000000);\n     *\n     * @returns string\n     * @param {string} address Address of the validator to bond to, if this address is the same as the signer (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 1,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {number} amount The amount of credits to bond\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async buildBondPublicTransaction(address: string, amount: number, options: Partial<ExecuteOptions> = {}) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"bond_public\",\n            fee = options.fee || 0.86,\n            privateFee = false,\n            inputs = [address, `${scaledAmount.toString()}u64`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.bond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.bond_public.verifier,\n                cacheKey: \"credits.aleo/bond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Bond credits to a staking committee\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondPublic(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", 2000000);\n     *\n     * @returns string\n     * @param {string} address Address of the validator to bond to, if this address is the same as the signer (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 1,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {number} amount The amount of credits to bond\n     * @param {Options} options Options for the execution\n     */\n    async bondPublic(address: string, amount: number, options: Partial<ExecuteOptions> = {}) {\n        const tx = <Transaction>await this.buildBondPublicTransaction(address, amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to unbond public credits in the Aleo network.\n     *\n     * @param {number} amount - The amount of credits to unbond (scaled by 1,000,000).\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction | Error>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * const transaction = await programManager.buildUnbondPublicTransaction(2000000);\n     * console.log(transaction);\n     */\n    async buildUnbondPublicTransaction(amount: number, options: Partial<ExecuteOptions> = {}): Promise<Transaction | Error> {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"unbond_public\",\n            fee = options.fee || 1.3,\n            privateFee = false,\n            inputs = [`${scaledAmount.toString()}u64`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.unbond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.unbond_public.verifier,\n                cacheKey: \"credits.aleo/unbond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Unbond a specified amount of staked credits to be used later\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.unbondPublic(10);\n     *\n     * @returns string\n     * @param {number} amount Amount of credits to unbond. If the address of the executor of this function is an\n     * existing validator, it will subtract this amount of credits from the validator's staked credits. If there are\n     * less than 1,000,000 credits staked pool after the unbond, the validator will be removed from the validator set.\n     * If the address of the executor of this function is not a validator and has credits bonded as a delegator, it will\n     * subtract this amount of credits from the delegator's staked credits. If there are less than 10 credits bonded\n     * after the unbond operation, the delegator will be removed from the validator's staking pool.\n     * @param {Options} options Options for the execution\n     */\n    async unbondPublic(amount: number, options: Partial<ExecuteOptions> = {}): Promise<string | Error> {\n        const tx = <Transaction>await this.buildUnbondPublicTransaction(amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to claim unbonded public credits in the Aleo network.\n     *\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction | Error>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * const transaction = await programManager.buildClaimUnbondPublicTransaction();\n     * console.log(transaction);\n     */\n    async buildClaimUnbondPublicTransaction(options: Partial<ExecuteOptions> = {}): Promise<Transaction | Error> {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"claim_unbond_public\",\n            fee = options.fee || 2,\n            privateFee = false,\n            inputs = [],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier,\n                cacheKey: \"credits.aleo/claim_unbond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Claim unbonded credits. If credits have been unbonded by the account executing this function, this method will\n     * claim them and add them to the public balance of the account.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.claimUnbondPublic();\n     *\n     * @returns string\n     * @param {Options} options\n     */\n    async claimUnbondPublic(options: Partial<ExecuteOptions> = {}): Promise<string | Error> {\n        const tx = <Transaction>await this.buildClaimUnbondPublicTransaction(options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Set Validator State\n     * @returns string\n     * @param {boolean} validator_state\n     * @param {Partial<ExecuteOptions>} options - Override default execution options\n     */\n    async setValidatorState(validator_state: boolean, options: Partial<ExecuteOptions> = {}) {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"set_validator_state\",\n            fee = 1,\n            privateFee = false,\n            inputs = [validator_state.toString()],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.set_validator_state.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.set_validator_state.verifier,\n                cacheKey: \"credits.aleo/set_validator_state\"\n            }),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.execute(executeOptions);\n    }\n\n    /**\n     * Unbond Delegator As Validator\n     * @returns {Promise<string | Error>} A promise that resolves to the transaction ID or an error message.\n     * @param {string} address - The address of the delegator.\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async unbondDelegatorAsValidator(address: string, options: Partial<ExecuteOptions> = {}) {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"unbond_delegator_as_validator\",\n            fee = 1,\n            privateFee = false,\n            inputs = [address],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.unbond_delegator_as_validator.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.unbond_delegator_as_validator.verifier,\n                cacheKey: \"credits.aleo/unbond_delegator_as_validator\"\n            }),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.execute(executeOptions);\n    }\n\n\n\n    /**\n     * Verify a proof of execution from an offline execution\n     *\n     * @param {executionResponse} executionResponse\n     * @returns {boolean} True if the proof is valid, false otherwise\n     */\n    verifyExecution(executionResponse: ExecutionResponse): boolean {\n        try {\n            const execution = <Execution>executionResponse.getExecution();\n            const function_id = executionResponse.getFunctionId();\n            const program = executionResponse.getProgram();\n            const verifyingKey = executionResponse.getVerifyingKey();\n            return verifyFunctionExecution(execution, verifyingKey, program, function_id);\n        } catch(e) {\n            console.warn(\"The execution was not found in the response, cannot verify the execution\");\n            return false;\n        }\n    }\n\n    /**\n     * Create a program object from a program's source code\n     *\n     * @param {string} program Program source code\n     * @returns {Program | Error} The program object\n     */\n    createProgramFromSource(program: string): Program | Error {\n        return Program.fromString(program);\n    }\n\n    /**\n     * Get the credits program object\n     *\n     * @returns {Program} The credits program object\n     */\n    creditsProgram(): Program {\n        return Program.getCreditsProgram();\n    }\n\n    /**\n     * Verify a program is valid\n     *\n     * @param {string} program The program source code\n     */\n    verifyProgram(program: string): boolean {\n        try {\n            <Program>Program.fromString(program);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // Internal utility function for getting a credits.aleo record\n    async getCreditsRecord(amount: number, nonces: string[], record?: RecordPlaintext | string, params?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        try {\n            return record instanceof RecordPlaintext ? record : RecordPlaintext.fromString(<string>record);\n        } catch (e) {\n            try {\n                const recordProvider = <RecordProvider>this.recordProvider;\n                return <RecordPlaintext>(await recordProvider.findCreditsRecord(amount, true, nonces, params))\n            } catch (e) {\n                throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n            }\n        }\n    }\n}\n\n// Ensure the transfer type requires an amount record\nfunction requiresAmountRecord(transferType: string): boolean {\n    return PRIVATE_TRANSFER_TYPES.has(transferType);\n}\n\n// Validate the transfer type\nfunction validateTransferType(transferType: string): string | Error {\n    return VALID_TRANSFER_TYPES.has(transferType) ? transferType :\n        logAndThrow(`Invalid transfer type '${transferType}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`);\n}\n\nexport { ProgramManager }\n","import {VerifyingKey} from \"@aleohq/wasm\";\nconst KEY_STORE = \"https://testnet3.parameters.aleo.org/\";\n\nconst CREDITS_PROGRAM_KEYS = {\n    bond_public: {\n        locator: \"credits.aleo/bond_public\",\n        prover: KEY_STORE + \"bond_public.prover.9c3547d\",\n        verifier: \"bond_public.verifier.10315ae\",\n        verifyingKey: VerifyingKey.bondPublicVerifier\n    },\n    claim_unbond_public: {\n        locator: \"credits.aleo/claim_unbond_public\",\n        prover: KEY_STORE + \"claim_unbond_public.prover.f8b64aa\",\n        verifier: \"claim_unbond_public.verifier.8fd7445\",\n        verifyingKey: VerifyingKey.claimUnbondPublicVerifier\n    },\n    fee_private: {\n        locator: \"credits.aleo/fee_private\",\n        prover: KEY_STORE + \"fee_private.prover.43fab98\",\n        verifier: \"fee_private.verifier.f3dfefc\",\n        verifyingKey: VerifyingKey.feePrivateVerifier\n    },\n    fee_public: {\n        locator: \"credits.aleo/fee_public\",\n        prover: KEY_STORE + \"fee_public.prover.634f153\",\n        verifier: \"fee_public.verifier.09eeb4f\",\n        verifyingKey: VerifyingKey.feePublicVerifier\n    },\n    inclusion: {\n        locator: \"inclusion\",\n        prover: KEY_STORE + \"inclusion.prover.cd85cc5\",\n        verifier: \"inclusion.verifier.e6f3add\",\n        verifyingKey: VerifyingKey.inclusionVerifier\n    },\n    join: {\n        locator: \"credits.aleo/join\",\n        prover: KEY_STORE + \"join.prover.1a76fe8\",\n        verifier: \"join.verifier.4f1701b\",\n        verifyingKey: VerifyingKey.joinVerifier\n    },\n    set_validator_state: {\n        locator: \"credits.aleo/set_validator_state\",\n        prover: KEY_STORE + \"set_validator_state.prover.5ce19be\",\n        verifier: \"set_validator_state.verifier.730d95b\",\n        verifyingKey: VerifyingKey.setValidatorStateVerifier\n    },\n    split: {\n        locator: \"credits.aleo/split\",\n        prover: KEY_STORE + \"split.prover.e6d12b9\",\n        verifier: \"split.verifier.2f9733d\",\n        verifyingKey: VerifyingKey.splitVerifier\n    },\n    transfer_private: {\n        locator: \"credits.aleo/transfer_private\",\n        prover: KEY_STORE + \"transfer_private.prover.2b487c0\",\n        verifier: \"transfer_private.verifier.3a3cbba\",\n        verifyingKey: VerifyingKey.transferPrivateVerifier\n    },\n    transfer_private_to_public: {\n        locator: \"credits.aleo/transfer_private_to_public\",\n        prover: KEY_STORE + \"transfer_private_to_public.prover.1ff64cb\",\n        verifier: \"transfer_private_to_public.verifier.d5b60de\",\n        verifyingKey: VerifyingKey.transferPrivateToPublicVerifier\n    },\n    transfer_public: {\n        locator: \"credits.aleo/transfer_public\",\n        prover: KEY_STORE + \"transfer_public.prover.a74565e\",\n        verifier: \"transfer_public.verifier.a4c2906\",\n        verifyingKey: VerifyingKey.transferPublicVerifier\n    },\n    transfer_public_to_private: {\n        locator: \"credits.aleo/transfer_public_to_private\",\n        prover: KEY_STORE + \"transfer_public_to_private.prover.1bcddf9\",\n        verifier: \"transfer_public_to_private.verifier.b094554\",\n        verifyingKey: VerifyingKey.transferPublicToPrivateVerifier\n    },\n    unbond_delegator_as_validator: {\n        locator: \"credits.aleo/unbond_delegator_as_validator\",\n        prover: KEY_STORE + \"unbond_delegator_as_validator.prover.115a86b\",\n        verifier: \"unbond_delegator_as_validator.verifier.9585609\",\n        verifyingKey: VerifyingKey.unbondDelegatorAsValidatorVerifier\n    },\n    unbond_public: {\n        locator: \"credits.aleo/unbond_public\",\n        prover: KEY_STORE + \"unbond_public.prover.9547c05\",\n        verifier: \"unbond_public.verifier.09873cd\",\n        verifyingKey: VerifyingKey.unbondPublicVerifier\n    },\n};\n\nconst PRIVATE_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n]);\nconst VALID_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n    \"transfer_public\",\n    \"public\",\n    \"transferPublic\",\n    \"transfer_public_to_private\",\n    \"publicToPrivate\",\n    \"transferPublicToPrivate\",\n]);\nconst PRIVATE_TRANSFER = new Set([\n    \"private\",\n    \"transfer_private\",\n    \"transferPrivate\",\n]);\nconst PRIVATE_TO_PUBLIC_TRANSFER = new Set([\n    \"private_to_public\",\n    \"privateToPublic\",\n    \"transfer_private_to_public\",\n    \"transferPrivateToPublic\",\n]);\nconst PUBLIC_TRANSFER = new Set([\n    \"public\",\n    \"transfer_public\",\n    \"transferPublic\",\n]);\nconst PUBLIC_TO_PRIVATE_TRANSFER = new Set([\n    \"public_to_private\",\n    \"publicToPrivate\",\n    \"transfer_public_to_private\",\n    \"transferPublicToPrivate\",\n]);\n\nfunction logAndThrow(message: string): Error {\n    console.error(message);\n    throw message;\n}\n\nimport { Account } from \"./account\";\nimport { AleoNetworkClient, ProgramImports } from \"./network-client\";\nimport { Block } from \"./models/block\";\nimport { Execution } from \"./models/execution\";\nimport { Input } from \"./models/input\";\nimport { Output } from \"./models/output\";\nimport { TransactionModel } from \"./models/transactionModel\";\nimport { Transition } from \"./models/transition\";\nimport {\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    CachedKeyPair,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    KeySearchParams,\n} from \"./function-key-provider\";\nimport {\n    OfflineKeyProvider,\n    OfflineSearchParams\n} from \"./offline-key-provider\";\nimport {\n    BlockHeightSearch,\n    NetworkRecordProvider,\n    RecordProvider,\n    RecordSearchParams,\n} from \"./record-provider\";\n\n// @TODO: This function is no longer needed, remove it.\nasync function initializeWasm() {\n    console.warn(\"initializeWasm is deprecated, you no longer need to use it\");\n}\n\nexport { createAleoWorker } from \"./managed-worker\";\n\nexport { ProgramManager } from \"./program-manager\";\n\nexport {\n    Address,\n    Execution as FunctionExecution,\n    ExecutionResponse,\n    Field,\n    OfflineQuery,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProgramManager as ProgramManagerBase,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    Signature,\n    Transaction,\n    VerifyingKey,\n    ViewKey,\n    initThreadPool,\n    verifyFunctionExecution,\n} from \"@aleohq/wasm\";\n\nexport { initializeWasm };\n\nexport {\n    Account,\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    AleoNetworkClient,\n    Block,\n    BlockHeightSearch,\n    CachedKeyPair,\n    Execution,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    Input,\n    KeySearchParams,\n    NetworkRecordProvider,\n    ProgramImports,\n    OfflineKeyProvider,\n    OfflineSearchParams,\n    Output,\n    RecordProvider,\n    RecordSearchParams,\n    TransactionModel,\n    Transition,\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PRIVATE_TRANSFER_TYPES,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n};\n","function spawnWorker(url, module, memory, address) {\n        return new Promise((resolve) => {\n            const worker = new Worker(url, {\n                type: \"module\",\n            });\n\n            worker.addEventListener(\"message\", (event) => {\n                // This is needed in Node to wait one extra tick, so that way\n                // the Worker can fully initialize before we return.\n                setTimeout(() => {\n                    resolve(worker);\n\n                    // When running in Node, this allows the process to exit\n                    // even though the Worker is still running.\n                    if (worker.unref) {\n                        worker.unref();\n                    }\n                }, 0);\n            }, {\n                capture: true,\n                once: true,\n            });\n\n            worker.postMessage({\n                module,\n                memory,\n                address,\n            });\n        });\n    }\n\nlet wasm;\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); }\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().slice(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_3.get(state.dtor)(a, state.b);\n\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_34(arg0, arg1, arg2) {\n    wasm.wasm_bindgen__convert__closures__invoke1_mut__h47e001539b710464(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* Verify an execution with a single function and a single transition. Executions with multiple\n* transitions or functions will fail to verify. Also, this does not verify that the state root of\n* the execution is included in the Aleo Network ledger.\n*\n* @param {Execution} execution The function execution to verify\n* @param {VerifyingKey} verifying_key The verifying key for the function\n* @param {Program} program The program that the function execution belongs to\n* @param {String} function_id The name of the function that was executed\n* @returns {boolean} True if the execution is valid, false otherwise\n* @param {Execution} execution\n* @param {VerifyingKey} verifying_key\n* @param {Program} program\n* @param {string} function_id\n* @returns {boolean}\n*/\nfunction verifyFunctionExecution(execution, verifying_key, program, function_id) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(execution, Execution);\n        _assertClass(verifying_key, VerifyingKey);\n        _assertClass(program, Program);\n        const ptr0 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.verifyFunctionExecution(retptr, execution.__wbg_ptr, verifying_key.__wbg_ptr, program.__wbg_ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return r0 !== 0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nlet cachedBigInt64Memory0 = null;\n\nfunction getBigInt64Memory0() {\n    if (cachedBigInt64Memory0 === null || cachedBigInt64Memory0.buffer !== wasm.memory.buffer) {\n        cachedBigInt64Memory0 = new BigInt64Array(wasm.memory.buffer);\n    }\n    return cachedBigInt64Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {number} receiver\n*/\nfunction runRayonThread(receiver) {\n    wasm.runRayonThread(receiver);\n}\n\n/**\n* @param {URL} url\n* @param {number} num_threads\n* @returns {Promise<void>}\n*/\nfunction initThreadPool(url, num_threads) {\n    const ret = wasm.initThreadPool(addHeapObject(url), num_threads);\n    return takeObject(ret);\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_252(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h02e038df64ba0b9e(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\n/**\n* Public address of an Aleo account\n*/\nclass Address {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Address.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n    * Derive an Aleo address from a private key\n    *\n    * @param {PrivateKey} private_key The private key to derive the address from\n    * @returns {Address} Address corresponding to the private key\n    * @param {PrivateKey} private_key\n    * @returns {Address}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.address_from_private_key(private_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Derive an Aleo address from a view key\n    *\n    * @param {ViewKey} view_key The view key to derive the address from\n    * @returns {Address} Address corresponding to the view key\n    * @param {ViewKey} view_key\n    * @returns {Address}\n    */\n    static from_view_key(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.address_from_view_key(view_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Create an aleo address object from a string representation of an address\n    *\n    * @param {string} address String representation of an addressm\n    * @returns {Address} Address\n    * @param {string} address\n    * @returns {Address}\n    */\n    static from_string(address) {\n        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.address_from_string(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Get a string representation of an Aleo address object\n    *\n    * @param {Address} Address\n    * @returns {string} String representation of the address\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Verify a signature for a message signed by the address\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {boolean} Boolean representing whether or not the signature is valid\n    * @param {Uint8Array} message\n    * @param {Signature} signature\n    * @returns {boolean}\n    */\n    verify(message, signature) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Signature);\n        const ret = wasm.address_verify(this.__wbg_ptr, ptr0, len0, signature.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n* Execution of an Aleo program.\n*/\nclass Execution {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Execution.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_execution_free(ptr);\n    }\n    /**\n    * Returns the string representation of the execution.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.execution_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates an execution object from a string representation of an execution.\n    * @param {string} execution\n    * @returns {Execution}\n    */\n    static fromString(execution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(execution, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.execution_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Execution.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo function execution response\n*\n* This object is returned by the execution of an Aleo function off-chain. It provides methods for\n* retrieving the outputs of the function execution.\n*/\nclass ExecutionResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ExecutionResponse.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_executionresponse_free(ptr);\n    }\n    /**\n    * Get the outputs of the executed function\n    *\n    * @returns {Array} Array of strings representing the outputs of the function\n    * @returns {Array<any>}\n    */\n    getOutputs() {\n        const ret = wasm.executionresponse_getOutputs(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns the execution object if present, null if otherwise.\n    *\n    * @returns {Execution | undefined} The execution object if present, null if otherwise\n    * @returns {Execution | undefined}\n    */\n    getExecution() {\n        const ret = wasm.executionresponse_getExecution(this.__wbg_ptr);\n        return ret === 0 ? undefined : Execution.__wrap(ret);\n    }\n    /**\n    * Returns the program keys if present\n    * @returns {KeyPair}\n    */\n    getKeys() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.executionresponse_getKeys(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the proving_key if the proving key was cached in the Execution response.\n    * Note the proving key is removed from the response object after the first call to this\n    * function. Subsequent calls will return null.\n    *\n    * @returns {ProvingKey | undefined} The proving key\n    * @returns {ProvingKey | undefined}\n    */\n    getProvingKey() {\n        const ret = wasm.executionresponse_getProvingKey(this.__wbg_ptr);\n        return ret === 0 ? undefined : ProvingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying_key associated with the program\n    *\n    * @returns {VerifyingKey} The verifying key\n    * @returns {VerifyingKey}\n    */\n    getVerifyingKey() {\n        const ret = wasm.executionresponse_getVerifyingKey(this.__wbg_ptr);\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the function identifier\n    * @returns {string}\n    */\n    getFunctionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.executionresponse_getFunctionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the program\n    * @returns {Program}\n    */\n    getProgram() {\n        const ret = wasm.executionresponse_getProgram(this.__wbg_ptr);\n        return Program.__wrap(ret);\n    }\n}\n/**\n*/\nclass Field {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Field.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_field_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.field_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} field\n    * @returns {Field}\n    */\n    static fromString(field) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(field, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.field_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Field.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Key pair object containing both the function proving and verifying keys\n*/\nclass KeyPair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeyPair.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keypair_free(ptr);\n    }\n    /**\n    * Create new key pair from proving and verifying keys\n    *\n    * @param {ProvingKey} proving_key Proving key corresponding to a function in an Aleo program\n    * @param {VerifyingKey} verifying_key Verifying key corresponding to a function in an Aleo program\n    * @returns {KeyPair} Key pair object containing both the function proving and verifying keys\n    * @param {ProvingKey} proving_key\n    * @param {VerifyingKey} verifying_key\n    */\n    constructor(proving_key, verifying_key) {\n        _assertClass(proving_key, ProvingKey);\n        var ptr0 = proving_key.__destroy_into_raw();\n        _assertClass(verifying_key, VerifyingKey);\n        var ptr1 = verifying_key.__destroy_into_raw();\n        const ret = wasm.keypair_new(ptr0, ptr1);\n        return KeyPair.__wrap(ret);\n    }\n    /**\n    * Get the proving key. This method will remove the proving key from the key pair\n    *\n    * @returns {ProvingKey | Error}\n    * @returns {ProvingKey}\n    */\n    provingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_provingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the verifying key. This method will remove the verifying key from the key pair\n    *\n    * @returns {VerifyingKey | Error}\n    * @returns {VerifyingKey}\n    */\n    verifyingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_verifyingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* An offline query object used to insert the global state root and state paths needed to create\n* a valid inclusion proof offline.\n*/\nclass OfflineQuery {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OfflineQuery.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_offlinequery_free(ptr);\n    }\n    /**\n    * Creates a new offline query object. The state root is required to be passed in as a string\n    * @param {string} state_root\n    */\n    constructor(state_root) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(state_root, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.offlinequery_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OfflineQuery.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Add a new state path to the offline query object.\n    *\n    * @param {string} commitment: The commitment corresponding to a record inpout\n    * @param {string} state_path: The state path corresponding to the commitment\n    * @param {string} commitment\n    * @param {string} state_path\n    */\n    addStatePath(commitment, state_path) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(commitment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(state_path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.offlinequery_addStatePath(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a json string representation of the offline query object\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.offlinequery_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create an offline query object from a json string representation\n    * @param {string} s\n    * @returns {OfflineQuery}\n    */\n    static fromString(s) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.offlinequery_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OfflineQuery.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Private key of an Aleo account\n*/\nclass PrivateKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * Generate a new private key using a cryptographically secure random number generator\n    *\n    * @returns {PrivateKey}\n    */\n    constructor() {\n        const ret = wasm.privatekey_new();\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a series of unchecked bytes\n    *\n    * @param {Uint8Array} seed Unchecked 32 byte long Uint8Array acting as the seed for the private key\n    * @returns {PrivateKey}\n    * @param {Uint8Array} seed\n    * @returns {PrivateKey}\n    */\n    static from_seed_unchecked(seed) {\n        const ptr0 = passArray8ToWasm0(seed, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_from_seed_unchecked(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a string representation of a private key\n    *\n    * @param {string} seed String representation of a private key\n    * @returns {PrivateKey}\n    * @param {string} private_key\n    * @returns {PrivateKey}\n    */\n    static from_string(private_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(private_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_string(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the private key. This function should be used very carefully\n    * as it exposes the private key plaintext\n    *\n    * @returns {string} String representation of a private key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the view key corresponding to the private key\n    *\n    * @returns {ViewKey}\n    * @returns {ViewKey}\n    */\n    to_view_key() {\n        const ret = wasm.privatekey_to_view_key(this.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get the address corresponding to the private key\n    *\n    * @returns {Address}\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.address_from_private_key(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Sign a message with the private key\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {Signature} Signature generated by signing the message with the address\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    sign(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(this.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a new randomly generated private key ciphertext using a secret. The secret is sensitive\n    * and will be needed to decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext | Error} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static newEncrypted(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_newEncrypted(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt an existing private key with a secret. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext | Error} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    toCiphertext(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get private key from a private key ciphertext and secret originally used to encrypt it\n    *\n    * @param {PrivateKeyCiphertext} ciphertext Ciphertext representation of the private key\n    * @param {string} secret Secret originally used to encrypt the private key\n    * @returns {PrivateKey | Error} Private key\n    * @param {PrivateKeyCiphertext} ciphertext\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    static fromPrivateKeyCiphertext(ciphertext, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(ciphertext, PrivateKeyCiphertext);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_fromPrivateKeyCiphertext(retptr, ciphertext.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Private Key in ciphertext form\n*/\nclass PrivateKeyCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKeyCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekeyciphertext_free(ptr);\n    }\n    /**\n    * Encrypt a private key using a secret string. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {PrivateKey} private_key Private key to encrypt\n    * @param {string} secret Secret to encrypt the private key with\n    * @returns {PrivateKeyCiphertext | Error} Private key ciphertext\n    * @param {PrivateKey} private_key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static encryptPrivateKey(private_key, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, private_key.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypts a private ciphertext using a secret string. This must be the same secret used to\n    * encrypt the private key\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKey | Error} Private key\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    decryptToPrivateKey(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_decryptToPrivateKey(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the ciphertext string\n    *\n    * @returns {string} Ciphertext string\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekeyciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates a PrivateKeyCiphertext from a string\n    *\n    * @param {string} ciphertext Ciphertext string\n    * @returns {PrivateKeyCiphertext | Error} Private key ciphertext\n    * @param {string} ciphertext\n    * @returns {PrivateKeyCiphertext}\n    */\n    static fromString(ciphertext) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo program\n*/\nclass Program {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Program.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_program_free(ptr);\n    }\n    /**\n    * Create a program from a program string\n    *\n    * @param {string} program Aleo program source code\n    * @returns {Program | Error} Program object\n    * @param {string} program\n    * @returns {Program}\n    */\n    static fromString(program) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the program\n    *\n    * @returns {string} String containing the program source code\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Determine if a function is present in the program\n    *\n    * @param {string} functionName Name of the function to check for\n    * @returns {boolean} True if the program is valid, false otherwise\n    * @param {string} function_name\n    * @returns {boolean}\n    */\n    hasFunction(function_name) {\n        const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.program_hasFunction(this.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get javascript array of functions names in the program\n    *\n    * @returns {Array} Array of all function names present in the program\n    *\n    * @example\n    * const expected_functions = [\n    *   \"mint\",\n    *   \"transfer_private\",\n    *   \"transfer_private_to_public\",\n    *   \"transfer_public\",\n    *   \"transfer_public_to_private\",\n    *   \"join\",\n    *   \"split\",\n    *   \"fee\"\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_functions = credits_program.getFunctions();\n    * console.log(credits_functions === expected_functions); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getFunctions() {\n        const ret = wasm.program_getFunctions(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get a javascript object representation of the function inputs and types. This can be used\n    * to generate a web form to capture user inputs for an execution of a function.\n    *\n    * @param {string} function_name Name of the function to get inputs for\n    * @returns {Array | Error} Array of function inputs\n    *\n    * @example\n    * const expected_inputs = [\n    *     {\n    *       type:\"record\",\n    *       visibility:\"private\",\n    *       record:\"credits\",\n    *       members:[\n    *         {\n    *           name:\"microcredits\",\n    *           type:\"u64\",\n    *           visibility:\"private\"\n    *         }\n    *       ],\n    *       register:\"r0\"\n    *     },\n    *     {\n    *       type:\"address\",\n    *       visibility:\"private\",\n    *       register:\"r1\"\n    *     },\n    *     {\n    *       type:\"u64\",\n    *       visibility:\"private\",\n    *       register:\"r2\"\n    *     }\n    * ];\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const transfer_function_inputs = credits_program.getFunctionInputs(\"transfer_private\");\n    * console.log(transfer_function_inputs === expected_inputs); // Output should be \"true\"\n    * @param {string} function_name\n    * @returns {Array<any>}\n    */\n    getFunctionInputs(function_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getFunctionInputs(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a the list of a program's mappings and the names/types of their keys and values.\n    *\n    * @returns {Array | Error} - An array of objects representing the mappings in the program\n    * @example\n    * const expected_mappings = [\n    *    {\n    *       name: \"account\",\n    *       key_name: \"owner\",\n    *       key_type: \"address\",\n    *       value_name: \"microcredits\",\n    *       value_type: \"u64\"\n    *    }\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_mappings = credits_program.getMappings();\n    * console.log(credits_mappings === expected_mappings); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getMappings() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_getMappings(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program record and its types\n    *\n    * @param {string} record_name Name of the record to get members for\n    * @returns {Object | Error} Object containing the record name, type, and members\n    *\n    * @example\n    *\n    * const expected_record = {\n    *     type: \"record\",\n    *     record: \"Credits\",\n    *     members: [\n    *       {\n    *         name: \"owner\",\n    *         type: \"address\",\n    *         visibility: \"private\"\n    *       },\n    *       {\n    *         name: \"microcredits\",\n    *         type: \"u64\",\n    *         visibility: \"private\"\n    *       }\n    *     ];\n    *  };\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_record = credits_program.getRecordMembers(\"Credits\");\n    * console.log(credits_record === expected_record); // Output should be \"true\"\n    * @param {string} record_name\n    * @returns {object}\n    */\n    getRecordMembers(record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getRecordMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program struct and its types\n    *\n    * @param {string} struct_name Name of the struct to get members for\n    * @returns {Array | Error} Array containing the struct members\n    *\n    * @example\n    *\n    * const STRUCT_PROGRAM = \"program token_issue.aleo;\n    *\n    * struct token_metadata:\n    *     network as u32;\n    *     version as u32;\n    *\n    * struct token:\n    *     token_id as u32;\n    *     metadata as token_metadata;\n    *\n    * function no_op:\n    *    input r0 as u64;\n    *    output r0 as u64;\"\n    *\n    * const expected_struct_members = [\n    *    {\n    *      name: \"token_id\",\n    *      type: \"u32\",\n    *    },\n    *    {\n    *      name: \"metadata\",\n    *      type: \"struct\",\n    *      struct_id: \"token_metadata\",\n    *      members: [\n    *       {\n    *         name: \"network\",\n    *         type: \"u32\",\n    *       }\n    *       {\n    *         name: \"version\",\n    *         type: \"u32\",\n    *       }\n    *     ]\n    *   }\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(STRUCT_PROGRAM);\n    * const struct_members = program.getStructMembers(\"token\");\n    * console.log(struct_members === expected_struct_members); // Output should be \"true\"\n    * @param {string} struct_name\n    * @returns {Array<any>}\n    */\n    getStructMembers(struct_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(struct_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getStructMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the credits.aleo program\n    *\n    * @returns {Program} The credits.aleo program\n    * @returns {Program}\n    */\n    static getCreditsProgram() {\n        const ret = wasm.program_getCreditsProgram();\n        return Program.__wrap(ret);\n    }\n    /**\n    * Get the id of the program\n    *\n    * @returns {string} The id of the program\n    * @returns {string}\n    */\n    id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_id(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get a unique address of the program\n    *\n    * @returns {Address} The address of the program\n    * @returns {Address}\n    */\n    address() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_address(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Address.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Determine equality with another program\n    *\n    * @param {Program} other The other program to compare\n    * @returns {boolean} True if the programs are equal, false otherwise\n    * @param {Program} other\n    * @returns {boolean}\n    */\n    isEqual(other) {\n        _assertClass(other, Program);\n        const ret = wasm.program_isEqual(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get program_imports\n    *\n    * @returns {Array} The program imports\n    *\n    * @example\n    *\n    * const DOUBLE_TEST = \"import multiply_test.aleo;\n    *\n    * program double_test.aleo;\n    *\n    * function double_it:\n    *     input r0 as u32.private;\n    *     call multiply_test.aleo/multiply 2u32 r0 into r1;\n    *     output r1 as u32.private;\";\n    *\n    * const expected_imports = [\n    *    \"multiply_test.aleo\"\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(DOUBLE_TEST_PROGRAM);\n    * const imports = program.getImports();\n    * console.log(imports === expected_imports); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getImports() {\n        const ret = wasm.program_getImports(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n/**\n*/\nclass ProgramManager {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_programmanager_free(ptr);\n    }\n    /**\n    * Deploy an Aleo program\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being deployed\n    * @param imports A javascript object holding the source code of any imported programs in the\n    * form \\{\"program_name1\": \"program_source_code\", \"program_name2\": \"program_source_code\", ..\\}.\n    * Note that all imported programs must be deployed on chain before the main program in order\n    * for the deployment to succeed\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the program deployment in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} fee_record\n    * @param {string | undefined} url\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<Transaction>}\n    */\n    static buildDeploymentTransaction(private_key, program, fee_credits, fee_record, url, imports, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        let ptr1 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr1 = fee_record.__destroy_into_raw();\n        }\n        var ptr2 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr3 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr4 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildDeploymentTransaction(private_key.__wbg_ptr, ptr0, len0, fee_credits, ptr1, ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the fee for a program deployment\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The source code of the program being deployed\n    * @param imports (optional) Provide a list of imports to use for the deployment fee estimation\n    * in the form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @returns {u64 | Error}\n    * @param {string} program\n    * @param {object | undefined} imports\n    * @returns {Promise<bigint>}\n    */\n    static estimateDeploymentFee(program, imports) {\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_estimateDeploymentFee(ptr0, len0, isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the component of the deployment cost which comes from the fee for the program name.\n    * Note that this cost does not represent the entire cost of deployment. It is additional to\n    * the cost of the size (in bytes) of the deployment.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param name The name of the program to be deployed\n    * @returns {u64 | Error}\n    * @param {string} name\n    * @returns {bigint}\n    */\n    static estimateProgramNameCost(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateProgramNameCost(retptr, ptr0, len0);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Execute an arbitrary function locally\n    *\n    * @param {PrivateKey} private_key The private key of the sender\n    * @param {string} program The source code of the program being executed\n    * @param {string} function The name of the function to execute\n    * @param {Array} inputs A javascript array of inputs to the function\n    * @param {boolean} prove_execution If true, the execution will be proven and an execution object\n    * containing the proof and the encrypted inputs and outputs needed to verify the proof offline\n    * will be returned.\n    * @param {boolean} cache Cache the proving and verifying keys in the Execution response.\n    * If this is set to 'true' the keys synthesized will be stored in the Execution Response\n    * and the `ProvingKey` and `VerifyingKey` can be retrieved from the response via the `.getKeys()`\n    * method.\n    * @param {Object | undefined} imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param {ProvingKey | undefined} proving_key (optional) Provide a verifying key to use for the function execution\n    * @param {VerifyingKey | undefined} verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {boolean} prove_execution\n    * @param {boolean} cache\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @param {string | undefined} url\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<ExecutionResponse>}\n    */\n    static executeFunctionOffline(private_key, program, _function, inputs, prove_execution, cache, imports, proving_key, verifying_key, url, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr2 = proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr3 = verifying_key.__destroy_into_raw();\n        }\n        var ptr4 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_executeFunctionOffline(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), prove_execution, cache, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr2, ptr3, ptr4, len4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Execute Aleo function and create an Aleo execution transaction\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being executed\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * If this is set to 'true' the keys synthesized (or passed in as optional parameters via the\n    * `proving_key` and `verifying_key` arguments) will be stored in the ProgramManager's memory\n    * and used for subsequent transactions. If this is set to 'false' the proving and verifying\n    * keys will be deallocated from memory after the transaction is executed.\n    * @param imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the function execution\n    * @param verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} fee_record\n    * @param {string | undefined} url\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<Transaction>}\n    */\n    static buildExecutionTransaction(private_key, program, _function, inputs, fee_credits, fee_record, url, imports, proving_key, verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        var ptr3 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr4 = proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr5 = verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr8 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildExecutionTransaction(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), fee_credits, ptr2, ptr3, len3, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr4, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate Fee for Aleo function execution. Note if \"cache\" is set to true, the proving and\n    * verifying keys will be stored in the ProgramManager's memory and used for subsequent\n    * program executions.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program to estimate the execution fee for\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the fee estimation in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the fee estimation\n    * @param verifying_key (optional) Provide a verifying key to use for the fee estimation\n    * @returns {u64 | Error} Fee in microcredits\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {string | undefined} url\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<bigint>}\n    */\n    static estimateExecutionFee(private_key, program, _function, inputs, url, imports, proving_key, verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr3 = proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr4 = verifying_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_estimateExecutionFee(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the finalize fee component for executing a function. This fee is additional to the\n    * size of the execution of the program in bytes. If the function does not have a finalize\n    * step, then the finalize fee is 0.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The program containing the function to estimate the finalize fee for\n    * @param function The function to estimate the finalize fee for\n    * @returns {u64 | Error} Fee in microcredits\n    * @param {string} program\n    * @param {string} _function\n    * @returns {bigint}\n    */\n    static estimateFinalizeFee(program, _function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateFinalizeFee(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Join two records together to create a new record with an amount of credits equal to the sum\n    * of the credits of the two original records\n    *\n    * @param private_key The private key of the sender\n    * @param record_1 The first record to combine\n    * @param record_2 The second record to combine\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param join_proving_key (optional) Provide a proving key to use for the join function\n    * @param join_verifying_key (optional) Provide a verifying key to use for the join function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {RecordPlaintext} record_1\n    * @param {RecordPlaintext} record_2\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} fee_record\n    * @param {string | undefined} url\n    * @param {ProvingKey | undefined} join_proving_key\n    * @param {VerifyingKey | undefined} join_verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<Transaction>}\n    */\n    static buildJoinTransaction(private_key, record_1, record_2, fee_credits, fee_record, url, join_proving_key, join_verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(record_1, RecordPlaintext);\n        var ptr0 = record_1.__destroy_into_raw();\n        _assertClass(record_2, RecordPlaintext);\n        var ptr1 = record_2.__destroy_into_raw();\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        var ptr3 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(join_proving_key)) {\n            _assertClass(join_proving_key, ProvingKey);\n            ptr4 = join_proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(join_verifying_key)) {\n            _assertClass(join_verifying_key, VerifyingKey);\n            ptr5 = join_verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr8 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildJoinTransaction(private_key.__wbg_ptr, ptr0, ptr1, fee_credits, ptr2, ptr3, len3, ptr4, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Split an Aleo credits record into two separate records. This function does not require a fee.\n    *\n    * @param private_key The private key of the sender\n    * @param split_amount The amount of the credit split. This amount will be subtracted from the\n    * value of the record and two new records will be created with the split amount and the remainder\n    * @param amount_record The record to split\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param split_proving_key (optional) Provide a proving key to use for the split function\n    * @param split_verifying_key (optional) Provide a verifying key to use for the split function\n    * @returns {Transaction | Error} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {number} split_amount\n    * @param {RecordPlaintext} amount_record\n    * @param {string | undefined} url\n    * @param {ProvingKey | undefined} split_proving_key\n    * @param {VerifyingKey | undefined} split_verifying_key\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<Transaction>}\n    */\n    static buildSplitTransaction(private_key, split_amount, amount_record, url, split_proving_key, split_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(amount_record, RecordPlaintext);\n        var ptr0 = amount_record.__destroy_into_raw();\n        var ptr1 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(split_proving_key)) {\n            _assertClass(split_proving_key, ProvingKey);\n            ptr2 = split_proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(split_verifying_key)) {\n            _assertClass(split_verifying_key, VerifyingKey);\n            ptr3 = split_verifying_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr4 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildSplitTransaction(private_key.__wbg_ptr, split_amount, ptr0, ptr1, len1, ptr2, ptr3, ptr4);\n        return takeObject(ret);\n    }\n    /**\n    * Send credits from one Aleo account to another\n    *\n    * @param private_key The private key of the sender\n    * @param amount_credits The amount of credits to send\n    * @param recipient The recipient of the transaction\n    * @param transfer_type The type of the transfer (options: \"private\", \"public\", \"private_to_public\", \"public_to_private\")\n    * @param amount_record The record to fund the amount from\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param transfer_verifying_key (optional) Provide a verifying key to use for the transfer\n    * function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {number} amount_credits\n    * @param {string} recipient\n    * @param {string} transfer_type\n    * @param {RecordPlaintext | undefined} amount_record\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} fee_record\n    * @param {string | undefined} url\n    * @param {ProvingKey | undefined} transfer_proving_key\n    * @param {VerifyingKey | undefined} transfer_verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<Transaction>}\n    */\n    static buildTransferTransaction(private_key, amount_credits, recipient, transfer_type, amount_record, fee_credits, fee_record, url, transfer_proving_key, transfer_verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(transfer_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(amount_record)) {\n            _assertClass(amount_record, RecordPlaintext);\n            ptr2 = amount_record.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr3 = fee_record.__destroy_into_raw();\n        }\n        var ptr4 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(transfer_proving_key)) {\n            _assertClass(transfer_proving_key, ProvingKey);\n            ptr5 = transfer_proving_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(transfer_verifying_key)) {\n            _assertClass(transfer_verifying_key, VerifyingKey);\n            ptr6 = transfer_verifying_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr7 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr8 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr9 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr9 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildTransferTransaction(private_key.__wbg_ptr, amount_credits, ptr0, len0, ptr1, len1, ptr2, fee_credits, ptr3, ptr4, len4, ptr5, ptr6, ptr7, ptr8, ptr9);\n        return takeObject(ret);\n    }\n    /**\n    * Synthesize proving and verifying keys for a program\n    *\n    * @param program {string} The program source code of the program to synthesize keys for\n    * @param function_id {string} The function to synthesize keys for\n    * @param inputs {Array} The inputs to the function\n    * @param imports {Object | undefined} The imports for the program\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} function_id\n    * @param {Array<any>} inputs\n    * @param {object | undefined} imports\n    * @returns {Promise<KeyPair>}\n    */\n    static synthesizeKeyPair(private_key, program, function_id, inputs, imports) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_synthesizeKeyPair(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n}\n/**\n* Proving key for a function within an Aleo program\n*/\nclass ProvingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ProvingKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_provingkey_free(ptr);\n    }\n    /**\n    * Verify if the proving key is for the bond_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"bond_public_proving_key.bin\");\n    * provingKey.isBondPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the bond_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isBondPublicProver() {\n        const ret = wasm.provingkey_isBondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the claim_unbond function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"claim_unbond_proving_key.bin\");\n    * provingKey.isClaimUnbondProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the claim_unbond function, false if otherwise\n    * @returns {boolean}\n    */\n    isClaimUnbondPublicProver() {\n        const ret = wasm.provingkey_isClaimUnbondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the fee_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"fee_private_proving_key.bin\");\n    * provingKey.isFeePrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the fee_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isFeePrivateProver() {\n        const ret = wasm.provingkey_isFeePrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the fee_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"fee_public_proving_key.bin\");\n    * provingKey.isFeePublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the fee_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isFeePublicProver() {\n        const ret = wasm.provingkey_isFeePublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the inclusion function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"inclusion_proving_key.bin\");\n    * provingKey.isInclusionProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the inclusion function, false if otherwise\n    * @returns {boolean}\n    */\n    isInclusionProver() {\n        const ret = wasm.provingkey_isInclusionProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the join function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"join_proving_key.bin\");\n    * provingKey.isJoinProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the join function, false if otherwise\n    * @returns {boolean}\n    */\n    isJoinProver() {\n        const ret = wasm.provingkey_isJoinProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the set_validator_state function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"set_validator_set_proving_key.bin\");\n    * provingKey.isSetValidatorStateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the set_validator_state function, false if otherwise\n    * @returns {boolean}\n    */\n    isSetValidatorStateProver() {\n        const ret = wasm.provingkey_isSetValidatorStateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the split function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"split_proving_key.bin\");\n    * provingKey.isSplitProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the split function, false if otherwise\n    * @returns {boolean}\n    */\n    isSplitProver() {\n        const ret = wasm.provingkey_isSplitProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_private_proving_key.bin\");\n    * provingKey.isTransferPrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPrivateProver() {\n        const ret = wasm.provingkey_isTransferPrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_private_to_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_private_to_public_proving_key.bin\");\n    * provingKey.isTransferPrivateToPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_private_to_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPrivateToPublicProver() {\n        const ret = wasm.provingkey_isTransferPrivateToPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_public_proving_key.bin\");\n    * provingKey.isTransferPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPublicProver() {\n        const ret = wasm.provingkey_isTransferPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_public_to_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_public_to_private_proving_key.bin\");\n    * provingKey.isTransferPublicToPrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_public_to_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPublicToPrivateProver() {\n        const ret = wasm.provingkey_isTransferPublicToPrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the unbond_delegator_as_validator function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"unbond_delegator_as_validator_proving_key.bin\");\n    * provingKey.isUnbondDelegatorAsValidatorProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the unbond_delegator_as_validator function, false if otherwise\n    * @returns {boolean}\n    */\n    isUnbondDelegatorAsValidatorProver() {\n        const ret = wasm.provingkey_isUnbondDelegatorAsValidatorProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the unbond_delegator_as_delegator function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"unbond_delegator_as_delegator_proving_key.bin\");\n    * provingKey.isUnbondDelegatorAsDelegatorProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the unbond_delegator_as_delegator function, false if otherwise\n    * @returns {boolean}\n    */\n    isUnbondPublicProver() {\n        const ret = wasm.provingkey_isUnbondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Return the checksum of the proving key\n    *\n    * @returns {string} Checksum of the proving key\n    * @returns {string}\n    */\n    checksum() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_checksum(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a copy of the proving key\n    *\n    * @returns {ProvingKey} A copy of the proving key\n    * @returns {ProvingKey}\n    */\n    copy() {\n        const ret = wasm.provingkey_copy(this.__wbg_ptr);\n        return ProvingKey.__wrap(ret);\n    }\n    /**\n    * Construct a new proving key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte array representation of a proving key\n    * @returns {ProvingKey | Error}\n    * @param {Uint8Array} bytes\n    * @returns {ProvingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a proving key from string\n    *\n    * @param {string | Error} String representation of the proving key\n    * @param {string} string\n    * @returns {ProvingKey}\n    */\n    static fromString(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the byte representation of a proving key\n    *\n    * @returns {Uint8Array | Error} Byte array representation of a proving key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the proving key\n    *\n    * @returns {string} String representation of the proving key\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n/**\n* Encrypted Aleo record\n*/\nclass RecordCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordciphertext_free(ptr);\n    }\n    /**\n    * Create a record ciphertext from a string\n    *\n    * @param {string} record String representation of a record ciphertext\n    * @returns {RecordCiphertext | Error} Record ciphertext\n    * @param {string} record\n    * @returns {RecordCiphertext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the string reprensentation of the record ciphertext\n    *\n    * @returns {string} String representation of the record ciphertext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Decrypt the record ciphertext into plaintext using the view key. The record will only\n    * decrypt if the record was encrypted by the account corresponding to the view key\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {RecordPlaintext | Error} Record plaintext object\n    * @param {ViewKey} view_key\n    * @returns {RecordPlaintext}\n    */\n    decrypt(view_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(view_key, ViewKey);\n            wasm.recordciphertext_decrypt(retptr, this.__wbg_ptr, view_key.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Determines if the account corresponding to the view key is the owner of the record\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {boolean}\n    * @param {ViewKey} view_key\n    * @returns {boolean}\n    */\n    isOwner(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.recordciphertext_isOwner(this.__wbg_ptr, view_key.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n* Plaintext representation of an Aleo record\n*/\nclass RecordPlaintext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordPlaintext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordplaintext_free(ptr);\n    }\n    /**\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {Field}\n    */\n    commitment(program_id, record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_commitment(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Field.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return a record plaintext from a string.\n    *\n    * @param {string} record String representation of a plaintext representation of an Aleo record\n    * @returns {RecordPlaintext | Error} Record plaintext\n    * @param {string} record\n    * @returns {RecordPlaintext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the record plaintext string\n    *\n    * @returns {string} String representation of the record plaintext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the amount of microcredits in the record\n    *\n    * @returns {u64} Amount of microcredits in the record\n    * @returns {bigint}\n    */\n    microcredits() {\n        const ret = wasm.recordplaintext_microcredits(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Returns the nonce of the record. This can be used to uniquely identify a record.\n    *\n    * @returns {string} Nonce of the record\n    * @returns {string}\n    */\n    nonce() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_nonce(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Attempt to get the serial number of a record to determine whether or not is has been spent\n    *\n    * @param {PrivateKey} private_key Private key of the account that owns the record\n    * @param {string} program_id Program ID of the program that the record is associated with\n    * @param {string} record_name Name of the record\n    * @returns {string | Error} Serial number of the record\n    * @param {PrivateKey} private_key\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {string}\n    */\n    serialNumberString(private_key, program_id, record_name) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_serialNumberString(retptr, this.__wbg_ptr, private_key.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr3 = r0;\n            var len3 = r1;\n            if (r3) {\n                ptr3 = 0; len3 = 0;\n                throw takeObject(r2);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n}\n/**\n* Cryptographic signature of a message signed by an Aleo account\n*/\nclass Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr);\n    }\n    /**\n    * Sign a message with a private key\n    *\n    * @param {PrivateKey} private_key The private key to sign the message with\n    * @param {Uint8Array} message Byte representation of the message to sign\n    * @returns {Signature} Signature of the message\n    * @param {PrivateKey} private_key\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    static sign(private_key, message) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(private_key.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Verify a signature of a message with an address\n    *\n    * @param {Address} address The address to verify the signature with\n    * @param {Uint8Array} message Byte representation of the message to verify\n    * @returns {boolean} True if the signature is valid, false otherwise\n    * @param {Address} address\n    * @param {Uint8Array} message\n    * @returns {boolean}\n    */\n    verify(address, message) {\n        _assertClass(address, Address);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_verify(this.__wbg_ptr, address.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get a signature from a string representation of a signature\n    *\n    * @param {string} signature String representation of a signature\n    * @returns {Signature} Signature\n    * @param {string} signature\n    * @returns {Signature}\n    */\n    static from_string(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_from_string(ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a signature\n    *\n    * @returns {string} String representation of a signature\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo transaction\n*\n* This object is created when generating an on-chain function deployment or execution and is the\n* object that should be submitted to the Aleo Network in order to deploy or execute a function.\n*/\nclass Transaction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Transaction.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n    * Create a transaction from a string\n    *\n    * @param {string} transaction String representation of a transaction\n    * @returns {Transaction | Error}\n    * @param {string} transaction\n    * @returns {Transaction}\n    */\n    static fromString(transaction) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(transaction, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transaction_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the transaction as a string. If you want to submit this transaction to the Aleo Network\n    * this function will create the string that should be submitted in the `POST` data.\n    *\n    * @returns {string} String representation of the transaction\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the id of the transaction. This is the merkle root of the transaction's inclusion proof.\n    *\n    * This value can be used to query the status of the transaction on the Aleo Network to see\n    * if it was successful. If successful, the transaction will be included in a block and this\n    * value can be used to lookup the transaction data on-chain.\n    *\n    * @returns {string} Transaction id\n    * @returns {string}\n    */\n    transactionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the type of the transaction (will return \"deploy\" or \"execute\")\n    *\n    * @returns {string} Transaction type\n    * @returns {string}\n    */\n    transactionType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionType(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n/**\n* Verifying key for a function within an Aleo program\n*/\nclass VerifyingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerifyingKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verifyingkey_free(ptr);\n    }\n    /**\n    * Returns the verifying key for the bond_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_public function\n    * @returns {VerifyingKey}\n    */\n    static bondPublicVerifier() {\n        const ret = wasm.verifyingkey_bondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the claim_delegator function\n    *\n    * @returns {VerifyingKey} Verifying key for the claim_unbond_public function\n    * @returns {VerifyingKey}\n    */\n    static claimUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_claimUnbondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the fee_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the fee_private function\n    * @returns {VerifyingKey}\n    */\n    static feePrivateVerifier() {\n        const ret = wasm.verifyingkey_feePrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the fee_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the fee_public function\n    * @returns {VerifyingKey}\n    */\n    static feePublicVerifier() {\n        const ret = wasm.verifyingkey_feePublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the inclusion function\n    *\n    * @returns {VerifyingKey} Verifying key for the inclusion function\n    * @returns {VerifyingKey}\n    */\n    static inclusionVerifier() {\n        const ret = wasm.verifyingkey_inclusionVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the join function\n    *\n    * @returns {VerifyingKey} Verifying key for the join function\n    * @returns {VerifyingKey}\n    */\n    static joinVerifier() {\n        const ret = wasm.verifyingkey_joinVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the set_validator_state function\n    *\n    * @returns {VerifyingKey} Verifying key for the set_validator_state function\n    * @returns {VerifyingKey}\n    */\n    static setValidatorStateVerifier() {\n        const ret = wasm.verifyingkey_setValidatorStateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the split function\n    *\n    * @returns {VerifyingKey} Verifying key for the split function\n    * @returns {VerifyingKey}\n    */\n    static splitVerifier() {\n        const ret = wasm.verifyingkey_splitVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_private function\n    * @returns {VerifyingKey}\n    */\n    static transferPrivateVerifier() {\n        const ret = wasm.verifyingkey_transferPrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_private_to_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_private_to_public function\n    * @returns {VerifyingKey}\n    */\n    static transferPrivateToPublicVerifier() {\n        const ret = wasm.verifyingkey_transferPrivateToPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_public function\n    * @returns {VerifyingKey}\n    */\n    static transferPublicVerifier() {\n        const ret = wasm.verifyingkey_transferPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_public_to_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_public_to_private function\n    * @returns {VerifyingKey}\n    */\n    static transferPublicToPrivateVerifier() {\n        const ret = wasm.verifyingkey_transferPublicToPrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the unbond_delegator_as_delegator function\n    *\n    * @returns {VerifyingKey} Verifying key for the unbond_delegator_as_delegator function\n    * @returns {VerifyingKey}\n    */\n    static unbondDelegatorAsValidatorVerifier() {\n        const ret = wasm.verifyingkey_unbondDelegatorAsValidatorVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the unbond_delegator_as_delegator function\n    *\n    * @returns {VerifyingKey} Verifying key for the unbond_delegator_as_delegator function\n    * @returns {VerifyingKey}\n    */\n    static unbondPublicVerifier() {\n        const ret = wasm.verifyingkey_unbondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the bond_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_public function\n    * @returns {boolean}\n    */\n    isBondPublicVerifier() {\n        const ret = wasm.verifyingkey_isBondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the claim_delegator function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isClaimUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_isClaimUnbondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the fee_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isFeePrivateVerifier() {\n        const ret = wasm.verifyingkey_isFeePrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the fee_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isFeePublicVerifier() {\n        const ret = wasm.verifyingkey_isFeePublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the inclusion function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isInclusionVerifier() {\n        const ret = wasm.verifyingkey_isInclusionVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the join function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isJoinVerifier() {\n        const ret = wasm.verifyingkey_isJoinVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the set_validator_state function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isSetValidatorStateVerifier() {\n        const ret = wasm.verifyingkey_isSetValidatorStateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the split function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isSplitVerifier() {\n        const ret = wasm.verifyingkey_isSplitVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPrivateVerifier() {\n        const ret = wasm.verifyingkey_isTransferPrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_private_to_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPrivateToPublicVerifier() {\n        const ret = wasm.verifyingkey_isTransferPrivateToPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPublicVerifier() {\n        const ret = wasm.verifyingkey_isTransferPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_public_to_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPublicToPrivateVerifier() {\n        const ret = wasm.verifyingkey_isTransferPublicToPrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the unbond_delegator_as_delegator function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isUnbondDelegatorAsValidatorVerifier() {\n        const ret = wasm.verifyingkey_isUnbondDelegatorAsValidatorVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the unbond_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_isUnbondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get the checksum of the verifying key\n    *\n    * @returns {string} Checksum of the verifying key\n    * @returns {string}\n    */\n    checksum() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_checksum(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a copy of the verifying key\n    *\n    * @returns {VerifyingKey} A copy of the verifying key\n    * @returns {VerifyingKey}\n    */\n    copy() {\n        const ret = wasm.provingkey_copy(this.__wbg_ptr);\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Construct a new verifying key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte representation of a verifying key\n    * @returns {VerifyingKey | Error}\n    * @param {Uint8Array} bytes\n    * @returns {VerifyingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a verifying key from string\n    *\n    * @param {String} string String representation of a verifying key\n    * @returns {VerifyingKey | Error}\n    * @param {string} string\n    * @returns {VerifyingKey}\n    */\n    static fromString(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a byte array from a verifying key\n    *\n    * @returns {Uint8Array | Error} Byte representation of a verifying key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the verifying key\n    *\n    * @returns {String} String representation of the verifying key\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n/**\n*/\nclass ViewKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ViewKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_viewkey_free(ptr);\n    }\n    /**\n    * Create a new view key from a private key\n    *\n    * @param {PrivateKey} private_key Private key\n    * @returns {ViewKey} View key\n    * @param {PrivateKey} private_key\n    * @returns {ViewKey}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.privatekey_to_view_key(private_key.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Create a new view key from a string representation of a view key\n    *\n    * @param {string} view_key String representation of a view key\n    * @returns {ViewKey} View key\n    * @param {string} view_key\n    * @returns {ViewKey}\n    */\n    static from_string(view_key) {\n        const ptr0 = passStringToWasm0(view_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.viewkey_from_string(ptr0, len0);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a view key\n    *\n    * @returns {string} String representation of a view key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.viewkey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the address corresponding to a view key\n    *\n    * @returns {Address} Address\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.address_from_view_key(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Decrypt a record ciphertext with a view key\n    *\n    * @param {string} ciphertext String representation of a record ciphertext\n    * @returns {string} String representation of a record plaintext\n    * @param {string} ciphertext\n    * @returns {string}\n    */\n    decrypt(ciphertext) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.viewkey_decrypt(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_new_daafff584c71593b = function() { return handleError(function () {\n        const ret = new XMLHttpRequest();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_overrideMimeType_1a661d17da5f8baf = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).overrideMimeType(getStringFromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_open_56fa1eb95989f6a5 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4, arg5) {\n        getObject(arg0).open(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4), arg5 !== 0);\n    }, arguments) };\n    imports.wbg.__wbg_send_9f5007eae908c72e = function() { return handleError(function (arg0) {\n        getObject(arg0).send();\n    }, arguments) };\n    imports.wbg.__wbg_response_f2acf2ecbe021710 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).response;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_b51585de1b234aff = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_092e06b0f9d71865 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_new_1eead62f64ca15ce = function() { return handleError(function () {\n        const ret = new Headers();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_append_fda9e3432e3e88da = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_new_55c9955722952374 = function() { return handleError(function () {\n        const ret = new AbortController();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_signal_4bd18fb489af2d4c = function(arg0) {\n        const ret = getObject(arg0).signal;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_instanceof_Response_fc4327dbfcdf5ced = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Response;\n        } catch {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_status_ac85a3142a84caa2 = function(arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    };\n    imports.wbg.__wbg_url_8503de97f69da463 = function(arg0, arg1) {\n        const ret = getObject(arg1).url;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_headers_b70de86b8e989bc0 = function(arg0) {\n        const ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_iterator_97f0c81209c6c35a = function() {\n        const ret = Symbol.iterator;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_get_97b561fb56f034b5 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbg_call_cb65541d95d71282 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_next_526fc47e980da008 = function(arg0) {\n        const ret = getObject(arg0).next;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_ddb3312ca1c4e32a = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).next();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_done_5c1f01fb660d73b5 = function(arg0) {\n        const ret = getObject(arg0).done;\n        return ret;\n    };\n    imports.wbg.__wbg_value_1695675138684bd5 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_abort_654b796176d117aa = function(arg0) {\n        getObject(arg0).abort();\n    };\n    imports.wbg.__wbg_stringify_e25465938f3f611f = function() { return handleError(function (arg0) {\n        const ret = JSON.stringify(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_call_01734de55d61e11d = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_executionresponse_new = function(arg0) {\n        const ret = ExecutionResponse.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_bigint_from_u64 = function(arg0) {\n        const ret = BigInt.asUintN(64, arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_log_0159ca40cddf5b15 = function(arg0, arg1) {\n        console.log(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbg_transaction_new = function(arg0) {\n        const ret = Transaction.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_module = function() {\n        const ret = __wbg_init.__wbindgen_wasm_module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_spawnWorker_f6acaddb2e29dc4a = function(arg0, arg1, arg2, arg3) {\n        const ret = spawnWorker(getObject(arg0), getObject(arg1), getObject(arg2), arg3);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_3ec098a360da1909 = function(arg0) {\n        const ret = new Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_502d29070ea18557 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbg_keypair_new = function(arg0) {\n        const ret = KeyPair.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_arrayBuffer_288fb3538806e85c = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).arrayBuffer();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_8125e318e6245eed = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_72e2208bbc0efc61 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_new_43f1b47c28813cbd = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_252(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return addHeapObject(ret);\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbg_new_898a68150f225f2e = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_push_ca1c26067ef907ac = function(arg0, arg1) {\n        const ret = getObject(arg0).push(getObject(arg1));\n        return ret;\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_abda76e883ba8a5f = function() {\n        const ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_658279fe44541cf6 = function(arg0, arg1) {\n        const ret = getObject(arg1).stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_error_f851667af71bcfc6 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_subarray_13db269f57aa838d = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_37fa2ca9e4e07fab = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_buffer_085ec1f694018c4f = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_5cf90238115182c3 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_6da8e527659b86aa = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_randomFillSync_dc1e9a60c158336d = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).randomFillSync(takeObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_crypto_c48a774b022d20ac = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_process_298734cf255a885d = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_e2e78e134e3e5d01 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_1cd7a5d853dbea79 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbg_msCrypto_bcb970640f50a1e8 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_e5d69174d6984cd7 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_8f08ceecec0f4fee = function() { return handleError(function () {\n        const ret = module.require;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_length_fff51ee6522a1a18 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_get_44be0491f933a435 = function(arg0, arg1) {\n        const ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_1ff1d729e9aae938 = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_5f4faef6c12b79ec = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_1d39714405582d3c = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_651f05c6a0944d1c = function() { return handleError(function () {\n        const ret = global.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_581967eacc0e2604 = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_has_c5fcd020291e56b8 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.has(getObject(arg0), getObject(arg1));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_fetch_8eaf01857a5bb21f = function(arg0, arg1) {\n        const ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_fetch_b5d6bebed1e6c2d2 = function(arg0) {\n        const ret = fetch(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function(arg0) {\n        throw takeObject(arg0);\n    };\n    imports.wbg.__wbg_then_b2267541e2a73865 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_f7e06ee3c11698eb = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_resolve_53698b95aaf7fcf8 = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_60fb5e2e86467e31 = function() {\n        const ret = Atomics.waitAsync;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_a0af68041688e8fd = function(arg0) {\n        const ret = new Int32Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_73fd6eb3bace0a8d = function(arg0, arg1, arg2) {\n        const ret = Atomics.waitAsync(getObject(arg0), arg1, arg2);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_async_e1a2a669aacf35ff = function(arg0) {\n        const ret = getObject(arg0).async;\n        return ret;\n    };\n    imports.wbg.__wbg_value_555e4f564193db05 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_link_22046963fe0b707a = function(arg0) {\n        const ret = \"data:application/javascript,\" + encodeURIComponent(`onmessage = function (ev) {\n            let [ia, index, value] = ev.data;\n            ia = new Int32Array(ia.buffer);\n            let result = Atomics.wait(ia, index, value);\n            postMessage(result);\n        };\n        `);\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_new_8e7322f46d5d019c = function() { return handleError(function (arg0, arg1) {\n        const ret = new Worker(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setonmessage_f0bd0280573b7084 = function(arg0, arg1) {\n        getObject(arg0).onmessage = getObject(arg1);\n    };\n    imports.wbg.__wbg_of_3f69007bb4eeae65 = function(arg0, arg1, arg2) {\n        const ret = Array.of(getObject(arg0), getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_postMessage_8c609e2bde333d9c = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).postMessage(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_data_ab99ae4a2e1e8bc9 = function(arg0) {\n        const ret = getObject(arg0).data;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithstrandinit_cad5cd6038c7ff5d = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_status_114ef6fe27fb8b00 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_responseText_da275667251fd153 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg1).responseText;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    }, arguments) };\n    imports.wbg.__wbindgen_closure_wrapper5658 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 543, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper5681 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 543, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n    imports.wbg.memory = maybe_memory || new WebAssembly.Memory({initial:169,maximum:65536,shared:true});\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedBigInt64Memory0 = null;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nvar exports = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Address: Address,\n    Execution: Execution,\n    ExecutionResponse: ExecutionResponse,\n    Field: Field,\n    KeyPair: KeyPair,\n    OfflineQuery: OfflineQuery,\n    PrivateKey: PrivateKey,\n    PrivateKeyCiphertext: PrivateKeyCiphertext,\n    Program: Program,\n    ProgramManager: ProgramManager,\n    ProvingKey: ProvingKey,\n    RecordCiphertext: RecordCiphertext,\n    RecordPlaintext: RecordPlaintext,\n    Signature: Signature,\n    Transaction: Transaction,\n    VerifyingKey: VerifyingKey,\n    ViewKey: ViewKey,\n    default: __wbg_init,\n    initSync: initSync,\n    initThreadPool: initThreadPool,\n    runRayonThread: runRayonThread,\n    verifyFunctionExecution: verifyFunctionExecution\n});\n\nconst wasm_path = \"assets/aleo_wasm.wasm\";\n\n            \n            var Cargo = async (opt = {}) => {\n                let {importHook, serverPath, initializeHook} = opt;\n\n                let final_path = wasm_path;\n\n                if (serverPath != null) {\n                    final_path = serverPath + /[^\\/\\\\]*$/.exec(final_path)[0];\n                }\n\n                if (importHook != null) {\n                    final_path = importHook(final_path);\n                }\n\n                if (initializeHook != null) {\n                    await initializeHook(__wbg_init, final_path);\n\n                } else {\n                    await __wbg_init(final_path);\n                }\n\n                return exports;\n            };\n\nexport { Cargo as default };\n//# sourceMappingURL=wasm.js.map\n","import wasm from \"../dist/wasm.js\";\n\nconst {\n    initThreadPool: wasmInitThreadPool,\n    Address,\n    Execution,\n    ExecutionResponse,\n    Field,\n    OfflineQuery,\n    Private,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    ProgramManager,\n    Signature,\n    Transaction,\n    ViewKey,\n    VerifyingKey,\n    verifyFunctionExecution,\n} = await wasm({\n    importHook: () => {\n        return new URL(\"assets/aleo_wasm.wasm\", import.meta.url);\n    },\n});\n\nasync function initThreadPool(threads) {\n    if (threads == null) {\n        threads = navigator.hardwareConcurrency;\n    }\n\n    console.info(`Spawning ${threads} threads`);\n\n    await wasmInitThreadPool(new URL(\"worker.js\", import.meta.url), threads);\n}\n\nexport {\n    initThreadPool,\n    Address,\n    Execution,\n    ExecutionResponse,\n    Field,\n    OfflineQuery,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    ProgramManager,\n    Signature,\n    Transaction,\n    ViewKey,\n    VerifyingKey,\n    verifyFunctionExecution,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    return createProxy(ep, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        ep.addEventListener(\"message\", function l(ev) {\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\n                return;\n            }\n            ep.removeEventListener(\"message\", l);\n            resolve(ev.data);\n        });\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n"],"names":["Account","_privateKey","_viewKey","_address","constructor","params","this","privateKeyFromParams","e","console","error","Error","ViewKey","from_private_key","Address","fromCiphertext","ciphertext","password","PrivateKeyCiphertext","fromString","PrivateKey","fromPrivateKeyCiphertext","privateKey","to_string","seed","from_seed_unchecked","from_string","viewKey","address","toString","encryptAccount","toCiphertext","decryptRecord","decrypt","decryptRecords","ciphertexts","map","ownsRecordCiphertext","isOwner","RecordCiphertext","sign","message","verify","signature","async","get","url","options","response","fetch","ok","status","post","method","AleoNetworkClient","host","headers","account","setAccount","getAccount","setHost","fetchData","json","findUnspentRecords","startHeight","endHeight","amounts","maxMicrocredits","nonces","records","Array","start","end","resolvedPrivateKey","latestHeight","failures","totalRecordValue","BigInt","to_view_key","blockHeight","getLatestHeight","blocks","getBlockRange","i","length","transactions","j","confirmedTransaction","type","transaction","execution","transitions","k","transition","program","outputs","l","output","record","value","recordPlaintext","nonce","includes","serialNumber","serialNumberString","getTransitionId","push","microcredits","amounts_found","warn","getBlock","height","getDeploymentTransactionIDForProgram","Program","replace","getDeploymentTransactionForProgram","transaction_id","getTransaction","getLatestBlock","getLatestCommittee","getProgram","programId","getProgramObject","inputProgram","getProgramImports","imports","importList","getImports","import_id","hasOwnProperty","programSource","nestedImports","key","logAndThrow","getProgramImportNames","getProgramMappingNames","getProgramMappingValue","mappingName","getStateRoot","id","getTransactions","getTransactionsInMempool","inputOrOutputID","submitTransaction","transaction_string","Transaction","body","Object","assign","AleoKeyProviderParams","proverUri","verifierUri","cacheKey","AleoKeyProvider","cache","cacheOption","keyUris","fetchBytes","data","arrayBuffer","Uint8Array","KEY_STORE","Map","useCache","clearCache","clear","cacheKeys","keyId","keys","provingKey","verifyingKey","set","toBytes","containsKeys","has","deleteKeys","delete","getKeys","debug","provingKeyBytes","verifyingKeyBytes","ProvingKey","fromBytes","VerifyingKey","functionKeys","proverUrl","verifierUrl","fetchKeys","getVerifyingKey","bondPublicKeys","CREDITS_PROGRAM_KEYS","bond_public","prover","verifier","locator","claimUnbondPublicKeys","claim_unbond_public","transferKeys","visibility","PRIVATE_TRANSFER","transfer_private","PRIVATE_TO_PUBLIC_TRANSFER","transfer_private_to_public","PUBLIC_TRANSFER","transfer_public","PUBLIC_TO_PRIVATE_TRANSFER","transfer_public_to_private","joinKeys","join","splitKeys","split","feePrivateKeys","fee_private","feePublicKeys","fee_public","inclusion","set_validator_state","unbond_delegator_as_validator","unbond_public","text","inner","unBondPublicKeys","OfflineSearchParams","verifyCreditsKeys","bondPublicKeyParams","claimUnbondPublicKeyParams","feePrivateKeyParams","feePublicKeyParams","inclusionKeyParams","joinKeyParams","setValidatorStateKeyParams","splitKeyParams","transferPrivateKeyParams","transferPrivateToPublicKeyParams","transferPublicKeyParams","transferPublicToPrivateKeyParams","unbondDelegatorAsValidatorKeyParams","unbondPublicKeyParams","OfflineKeyProvider","Promise","resolve","reject","undefined","isBondPublicProver","isBondPublicVerifier","isClaimUnbondPublicProver","isClaimUnbondPublicVerifier","isFeePrivateProver","isFeePrivateVerifier","isFeePublicProver","isFeePublicVerifier","isInclusionProver","isInclusionVerifier","isJoinProver","isJoinVerifier","isSetValidatorStateProver","isSetValidatorStateVerifier","isSplitProver","isSplitVerifier","isTransferPrivateProver","isTransferPrivateVerifier","isTransferPrivateToPublicProver","isTransferPrivateToPublicVerifier","isTransferPublicProver","isTransferPublicVerifier","isTransferPublicToPrivateProver","isTransferPublicToPrivateVerifier","isUnbondDelegatorAsValidatorProver","isUnbondDelegatorAsValidatorVerifier","isUnbondPublicProver","isUnbondPublicVerifier","insertBondPublicKeys","bondPublicVerifier","insertClaimUnbondPublicKeys","claimUnbondPublicVerifier","insertFeePrivateKeys","feePrivateVerifier","insertFeePublicKeys","feePublicVerifier","insertJoinKeys","joinVerifier","insertSetValidatorStateKeys","setValidatorStateVerifier","insertSplitKeys","splitVerifier","insertTransferPrivateKeys","transferPrivateVerifier","insertTransferPrivateToPublicKeys","transferPrivateToPublicVerifier","insertTransferPublicKeys","transferPublicVerifier","insertTransferPublicToPrivateKeys","transferPublicToPrivateVerifier","insertUnbondDelegatorAsValidatorKeys","unbondDelegatorAsValidatorVerifier","insertUnbondPublicKeys","unbondPublicVerifier","NetworkRecordProvider","networkClient","findCreditsRecords","unspent","searchParameters","findCreditsRecord","findRecord","findRecords","BlockHeightSearch","singletonWorker","createAleoWorker","worker","Worker","URL","wrap","ProgramManager","keyProvider","recordProvider","setKeyProvider","setRecordProvider","deploy","fee","privateFee","recordSearchParams","feeRecord","programObject","log","feeKeys","deploymentPrivateKey","getCreditsRecord","feeProvingKey","feeVerifyingKey","tx","ProgramManager$1","buildDeploymentTransaction","buildExecutionTransaction","programName","functionName","inputs","keySearchParams","offlineQuery","executionPrivateKey","execute","run","function_name","proveExecution","executeFunctionOffline","recordOne","recordTwo","joinProvingKey","joinVerifyingKey","RecordPlaintext","buildJoinTransaction","splitAmount","amountRecord","splitProvingKey","splitVerifyingKey","buildSplitTransaction","synthesizeKeys","function_id","keyPair","synthesizeKeyPair","buildTransferTransaction","amount","recipient","transferType","validateTransferType","transferProvingKey","transferVerifyingKey","requiresAmountRecord","buildTransferPublicTransaction","transfer","buildBondPublicTransaction","scaledAmount","Math","trunc","creditsProgram","additionalOptions","executeOptions","bondPublic","buildUnbondPublicTransaction","unbondPublic","buildClaimUnbondPublicTransaction","claimUnbondPublic","setValidatorState","validator_state","unbondDelegatorAsValidator","verifyExecution","executionResponse","getExecution","getFunctionId","verifyFunctionExecution","createProgramFromSource","getCreditsProgram","verifyProgram","PRIVATE_TRANSFER_TYPES","VALID_TRANSFER_TYPES","inclusionVerifier","Set","initializeWasm","spawnWorker","module","memory","addEventListener","event","setTimeout","unref","capture","once","postMessage","wasm","heap","fill","getObject","idx","heap_next","dropObject","takeObject","ret","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachedUint8Memory0","getUint8Memory0","buffer","getStringFromWasm0","ptr","len","slice","addHeapObject","obj","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encode","encodeString","arg","view","buf","read","written","passStringToWasm0","malloc","realloc","subarray","mem","offset","code","charCodeAt","isLikeNone","x","cachedInt32Memory0","getInt32Memory0","Int32Array","debugString","val","description","name","isArray","builtInMatches","exec","call","className","JSON","stringify","_","stack","makeMutClosure","arg0","arg1","dtor","f","state","a","b","cnt","real","args","__wbindgen_export_3","original","__wbg_adapter_34","arg2","wasm_bindgen__convert__closures__invoke1_mut__h47e001539b710464","_assertClass","instance","klass","passArray8ToWasm0","verifyFunctionExecution$1","verifying_key","retptr","__wbindgen_add_to_stack_pointer","Execution$1","VerifyingKey$1","Program$1","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","__wbg_ptr","r0","r1","cachedBigInt64Memory0","getBigInt64Memory0","BigInt64Array","getArrayU8FromWasm0","runRayonThread","receiver","initThreadPool$1","num_threads","initThreadPool","handleError","apply","__wbindgen_exn_store","__wbg_adapter_252","arg3","wasm_bindgen__convert__closures__invoke2_mut__h02e038df64ba0b9e","__wrap","create","prototype","__destroy_into_raw","free","__wbg_address_free","private_key","PrivateKey$1","address_from_private_key","from_view_key","view_key","ViewKey$1","address_from_view_key","address_from_string","deferred1_0","deferred1_1","address_to_string","__wbindgen_free","Signature$1","address_verify","Execution","__wbg_execution_free","execution_toString","execution_fromString","ExecutionResponse","__wbg_executionresponse_free","getOutputs","executionresponse_getOutputs","executionresponse_getExecution","executionresponse_getKeys","KeyPair","getProvingKey","executionresponse_getProvingKey","ProvingKey$1","executionresponse_getVerifyingKey","executionresponse_getFunctionId","executionresponse_getProgram","Field","__wbg_field_free","field_toString","field","field_fromString","__wbg_keypair_free","proving_key","ptr1","keypair_new","keypair_provingKey","keypair_verifyingKey","OfflineQuery","__wbg_offlinequery_free","state_root","offlinequery_new","addStatePath","commitment","state_path","len1","offlinequery_addStatePath","offlinequery_toString","s","offlinequery_fromString","__wbg_privatekey_free","privatekey_new","privatekey_from_seed_unchecked","privatekey_from_string","privatekey_to_string","privatekey_to_view_key","to_address","Address$1","privatekey_sign","newEncrypted","secret","privatekey_newEncrypted","PrivateKeyCiphertext$1","privatekey_toCiphertext","privatekey_fromPrivateKeyCiphertext","__wbg_privatekeyciphertext_free","encryptPrivateKey","decryptToPrivateKey","privatekeyciphertext_decryptToPrivateKey","privatekeyciphertext_toString","privatekeyciphertext_fromString","__wbg_program_free","program_fromString","program_toString","hasFunction","program_hasFunction","getFunctions","program_getFunctions","getFunctionInputs","program_getFunctionInputs","getMappings","program_getMappings","getRecordMembers","record_name","program_getRecordMembers","getStructMembers","struct_name","program_getStructMembers","program_getCreditsProgram","program_id","program_address","isEqual","other","program_isEqual","program_getImports","__wbg_programmanager_free","fee_credits","fee_record","fee_proving_key","fee_verifying_key","offline_query","RecordPlaintext$1","ptr2","len2","ptr3","ptr4","ptr5","OfflineQuery$1","programmanager_buildDeploymentTransaction","estimateDeploymentFee","programmanager_estimateDeploymentFee","estimateProgramNameCost","programmanager_estimateProgramNameCost","r2","asUintN","_function","prove_execution","len4","programmanager_executeFunctionOffline","len3","ptr6","ptr7","ptr8","programmanager_buildExecutionTransaction","estimateExecutionFee","programmanager_estimateExecutionFee","estimateFinalizeFee","programmanager_estimateFinalizeFee","record_1","record_2","join_proving_key","join_verifying_key","programmanager_buildJoinTransaction","split_amount","amount_record","split_proving_key","split_verifying_key","programmanager_buildSplitTransaction","amount_credits","transfer_type","transfer_proving_key","transfer_verifying_key","ptr9","programmanager_buildTransferTransaction","programmanager_synthesizeKeyPair","__wbg_provingkey_free","provingkey_isBondPublicProver","provingkey_isClaimUnbondPublicProver","provingkey_isFeePrivateProver","provingkey_isFeePublicProver","provingkey_isInclusionProver","provingkey_isJoinProver","provingkey_isSetValidatorStateProver","provingkey_isSplitProver","provingkey_isTransferPrivateProver","provingkey_isTransferPrivateToPublicProver","provingkey_isTransferPublicProver","provingkey_isTransferPublicToPrivateProver","provingkey_isUnbondDelegatorAsValidatorProver","provingkey_isUnbondPublicProver","checksum","provingkey_checksum","copy","provingkey_copy","bytes","provingkey_fromBytes","string","provingkey_fromString","provingkey_toBytes","v1","provingkey_toString","__wbg_recordciphertext_free","recordciphertext_fromString","recordciphertext_toString","recordciphertext_decrypt","recordciphertext_isOwner","__wbg_recordplaintext_free","recordplaintext_commitment","Field$1","recordplaintext_fromString","recordplaintext_toString","recordplaintext_microcredits","recordplaintext_nonce","deferred4_0","deferred4_1","recordplaintext_serialNumberString","r3","Signature","__wbg_signature_free","signature_verify","signature_from_string","signature_to_string","__wbg_transaction_free","transaction_fromString","transaction_toString","transactionId","transaction_transactionId","transactionType","transaction_transactionType","__wbg_verifyingkey_free","verifyingkey_bondPublicVerifier","verifyingkey_claimUnbondPublicVerifier","verifyingkey_feePrivateVerifier","verifyingkey_feePublicVerifier","verifyingkey_inclusionVerifier","verifyingkey_joinVerifier","verifyingkey_setValidatorStateVerifier","verifyingkey_splitVerifier","verifyingkey_transferPrivateVerifier","verifyingkey_transferPrivateToPublicVerifier","verifyingkey_transferPublicVerifier","verifyingkey_transferPublicToPrivateVerifier","verifyingkey_unbondDelegatorAsValidatorVerifier","verifyingkey_unbondPublicVerifier","verifyingkey_isBondPublicVerifier","verifyingkey_isClaimUnbondPublicVerifier","verifyingkey_isFeePrivateVerifier","verifyingkey_isFeePublicVerifier","verifyingkey_isInclusionVerifier","verifyingkey_isJoinVerifier","verifyingkey_isSetValidatorStateVerifier","verifyingkey_isSplitVerifier","verifyingkey_isTransferPrivateVerifier","verifyingkey_isTransferPrivateToPublicVerifier","verifyingkey_isTransferPublicVerifier","verifyingkey_isTransferPublicToPrivateVerifier","verifyingkey_isUnbondDelegatorAsValidatorVerifier","verifyingkey_isUnbondPublicVerifier","verifyingkey_checksum","verifyingkey_fromBytes","verifyingkey_fromString","verifyingkey_toBytes","verifyingkey_toString","__wbg_viewkey_free","viewkey_from_string","viewkey_to_string","deferred3_0","deferred3_1","viewkey_decrypt","__wbg_load","Response","WebAssembly","instantiateStreaming","instantiate","Instance","__wbg_get_imports","wbg","__wbindgen_object_drop_ref","__wbg_new_daafff584c71593b","XMLHttpRequest","arguments","__wbg_overrideMimeType_1a661d17da5f8baf","overrideMimeType","__wbg_open_56fa1eb95989f6a5","arg4","arg5","open","__wbg_send_9f5007eae908c72e","send","__wbg_response_f2acf2ecbe021710","__wbg_new_b51585de1b234aff","__wbindgen_string_new","__wbg_set_092e06b0f9d71865","Reflect","__wbg_new_1eead62f64ca15ce","Headers","__wbindgen_object_clone_ref","__wbg_append_fda9e3432e3e88da","append","__wbg_new_55c9955722952374","AbortController","__wbg_signal_4bd18fb489af2d4c","signal","__wbg_instanceof_Response_fc4327dbfcdf5ced","result","__wbg_status_ac85a3142a84caa2","__wbg_url_8503de97f69da463","__wbg_headers_b70de86b8e989bc0","__wbg_iterator_97f0c81209c6c35a","Symbol","iterator","__wbg_get_97b561fb56f034b5","__wbindgen_is_function","__wbg_call_cb65541d95d71282","__wbindgen_is_object","__wbg_next_526fc47e980da008","next","__wbg_next_ddb3312ca1c4e32a","__wbg_done_5c1f01fb660d73b5","done","__wbg_value_1695675138684bd5","__wbg_abort_654b796176d117aa","abort","__wbg_stringify_e25465938f3f611f","__wbindgen_string_get","__wbg_call_01734de55d61e11d","__wbg_executionresponse_new","ExecutionResponse$1","__wbindgen_bigint_from_u64","__wbg_log_0159ca40cddf5b15","__wbg_transaction_new","Transaction$1","__wbindgen_module","__wbg_init","__wbindgen_wasm_module","__wbindgen_memory","__wbg_spawnWorker_f6acaddb2e29dc4a","__wbg_newwithlength_3ec098a360da1909","__wbg_set_502d29070ea18557","__wbg_keypair_new","__wbindgen_cb_drop","__wbg_arrayBuffer_288fb3538806e85c","__wbg_new_8125e318e6245eed","__wbg_length_72e2208bbc0efc61","__wbg_new_43f1b47c28813cbd","state0","cb0","__wbg_new_898a68150f225f2e","__wbg_push_ca1c26067ef907ac","__wbindgen_number_new","__wbg_new_abda76e883ba8a5f","__wbg_stack_658279fe44541cf6","__wbg_error_f851667af71bcfc6","deferred0_0","deferred0_1","__wbg_subarray_13db269f57aa838d","__wbg_getRandomValues_37fa2ca9e4e07fab","getRandomValues","__wbg_buffer_085ec1f694018c4f","__wbg_set_5cf90238115182c3","__wbg_newwithbyteoffsetandlength_6da8e527659b86aa","__wbg_randomFillSync_dc1e9a60c158336d","randomFillSync","__wbg_crypto_c48a774b022d20ac","crypto","__wbg_process_298734cf255a885d","process","__wbg_versions_e2e78e134e3e5d01","versions","__wbg_node_1cd7a5d853dbea79","node","__wbindgen_is_string","__wbg_msCrypto_bcb970640f50a1e8","msCrypto","__wbg_newwithlength_e5d69174d6984cd7","__wbg_require_8f08ceecec0f4fee","require","__wbg_length_fff51ee6522a1a18","__wbg_get_44be0491f933a435","__wbg_self_1ff1d729e9aae938","self","__wbg_window_5f4faef6c12b79ec","window","__wbg_globalThis_1d39714405582d3c","globalThis","__wbg_global_651f05c6a0944d1c","global","__wbindgen_is_undefined","__wbg_newnoargs_581967eacc0e2604","Function","__wbg_has_c5fcd020291e56b8","__wbg_fetch_8eaf01857a5bb21f","__wbg_fetch_b5d6bebed1e6c2d2","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","__wbg_then_b2267541e2a73865","then","__wbg_then_f7e06ee3c11698eb","__wbg_resolve_53698b95aaf7fcf8","__wbg_waitAsync_60fb5e2e86467e31","Atomics","waitAsync","__wbg_new_a0af68041688e8fd","__wbg_waitAsync_73fd6eb3bace0a8d","__wbg_async_e1a2a669aacf35ff","__wbg_value_555e4f564193db05","__wbindgen_link_22046963fe0b707a","encodeURIComponent","__wbg_new_8e7322f46d5d019c","__wbg_setonmessage_f0bd0280573b7084","onmessage","__wbg_of_3f69007bb4eeae65","of","__wbg_postMessage_8c609e2bde333d9c","__wbg_data_ab99ae4a2e1e8bc9","__wbg_newwithstrandinit_cad5cd6038c7ff5d","Request","__wbg_status_114ef6fe27fb8b00","__wbg_responseText_da275667251fd153","responseText","__wbindgen_closure_wrapper5658","__wbindgen_closure_wrapper5681","__wbg_init_memory","maybe_memory","Memory","initial","maximum","shared","__wbg_finalize_init","exports","__wbindgen_start","initSync","Module","input","freeze","__proto__","RecordCiphertext$1","default","wasm_path","wasmInitThreadPool","Private","opt","importHook","serverPath","initializeHook","final_path","Cargo","threads","navigator","hardwareConcurrency","info","proxyMarker","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","transferHandlers","canHandle","serialize","port1","port2","MessageChannel","expose","deserialize","port","serialized","isError","ep","allowedOrigins","callback","ev","origin","allowedOrigin","RegExp","test","isAllowedOrigin","path","argumentList","fromWireValue","returnValue","parent","reduce","prop","rawValue","proxy","transfers","transferCache","catch","wireValue","transferables","toWireValue","removeEventListener","closeEndPoint","TypeError","endpoint","isMessagePort","close","target","createProxy","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","WeakMap","proxyFinalizers","FinalizationRegistry","newCount","isProxyReleased","Proxy","_target","unregister","unregisterProxy","r","p","bind","_thisArg","rawArgumentList","last","processArguments","construct","register","registerProxy","processed","v","arr","concat","handler","serializedValue","msg","floor","random","Number","MAX_SAFE_INTEGER"],"sourceRoot":""}